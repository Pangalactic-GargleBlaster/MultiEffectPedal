
Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007844  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080079d4  080079d4  000089d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ae0  08007ae0  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ae8  08007ae8  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ae8  08007ae8  00008ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007aec  08007aec  00008aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007af0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000119fc  20000074  08007b64  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011a70  08007b64  00009a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d89  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fec  00000000  00000000  00020e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00023e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c9  00000000  00000000  000253b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e07  00000000  00000000  00026479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019405  00000000  00000000  00050280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109270  00000000  00000000  00069685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001728f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000613c  00000000  00000000  00172938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00178a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079bc 	.word	0x080079bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080079bc 	.word	0x080079bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <recordCurrentSampleForDelayEffects>:

#include "effects.h"
#include <math.h>

// delay effects foundation
void recordCurrentSampleForDelayEffects(struct CircularBuffer* buffer, unsigned short currentSample) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	buffer->buffer[buffer->nextElementIndex] = currentSample;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	889b      	ldrh	r3, [r3, #4]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	4413      	add	r3, r2
 8000588:	887a      	ldrh	r2, [r7, #2]
 800058a:	801a      	strh	r2, [r3, #0]
	buffer->nextElementIndex = (buffer->nextElementIndex + 1) % buffer->bufferSize;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	889b      	ldrh	r3, [r3, #4]
 8000590:	3301      	adds	r3, #1
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	88d2      	ldrh	r2, [r2, #6]
 8000596:	fb93 f1f2 	sdiv	r1, r3, r2
 800059a:	fb01 f202 	mul.w	r2, r1, r2
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	809a      	strh	r2, [r3, #4]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <getDelaySample>:

unsigned short getDelaySample(struct CircularBuffer* buffer, unsigned short delay) {
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	807b      	strh	r3, [r7, #2]
	return buffer->buffer[(buffer->nextElementIndex - 1u - delay) % buffer->bufferSize];
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	889b      	ldrh	r3, [r3, #4]
 80005c6:	461a      	mov	r2, r3
 80005c8:	887b      	ldrh	r3, [r7, #2]
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	3b01      	subs	r3, #1
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	88d2      	ldrh	r2, [r2, #6]
 80005d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80005d6:	fb00 f202 	mul.w	r2, r0, r2
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	440b      	add	r3, r1
 80005e0:	881b      	ldrh	r3, [r3, #0]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <delay>:
struct CircularBuffer delayCircularBuffer = {
		delayBuffer,
		0,
		DELAY_BUFFER_LENGTH
};
unsigned short delay(unsigned short currentSample, unsigned short delayAmount) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	80fb      	strh	r3, [r7, #6]
 80005fc:	4613      	mov	r3, r2
 80005fe:	80bb      	strh	r3, [r7, #4]
	unsigned short delaySample = getDelaySample(&delayCircularBuffer, delayAmount);
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	4619      	mov	r1, r3
 8000604:	480a      	ldr	r0, [pc, #40]	@ (8000630 <delay+0x40>)
 8000606:	f7ff ffd4 	bl	80005b2 <getDelaySample>
 800060a:	4603      	mov	r3, r0
 800060c:	81fb      	strh	r3, [r7, #14]
	unsigned short currentOutput = (currentSample + delaySample) / 2;
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	4413      	add	r3, r2
 8000614:	0fda      	lsrs	r2, r3, #31
 8000616:	4413      	add	r3, r2
 8000618:	105b      	asrs	r3, r3, #1
 800061a:	81bb      	strh	r3, [r7, #12]
	recordCurrentSampleForDelayEffects(&delayCircularBuffer, currentOutput);
 800061c:	89bb      	ldrh	r3, [r7, #12]
 800061e:	4619      	mov	r1, r3
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <delay+0x40>)
 8000622:	f7ff ffa5 	bl	8000570 <recordCurrentSampleForDelayEffects>
	return currentOutput;
 8000626:	89bb      	ldrh	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000

08000634 <crossfade>:
	OCTAVE_BUFFER_LENGTH
};
#define OCTAVE_UP_SAMPLE_LENGTH (OCTAVE_BUFFER_LENGTH/2)
#define OCTAVE_DOWN_SAMPLE_LENGTH (OCTAVE_UP_SAMPLE_LENGTH/2)
#define CROSSFADE_LENGTH 256
unsigned short crossfade(unsigned short input1, unsigned short input2, unsigned short time) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
 800063e:	460b      	mov	r3, r1
 8000640:	80bb      	strh	r3, [r7, #4]
 8000642:	4613      	mov	r3, r2
 8000644:	807b      	strh	r3, [r7, #2]
	return (input1*(CROSSFADE_LENGTH-time) + input2*time) / CROSSFADE_LENGTH;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	887a      	ldrh	r2, [r7, #2]
 800064a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 800064e:	fb03 f202 	mul.w	r2, r3, r2
 8000652:	88bb      	ldrh	r3, [r7, #4]
 8000654:	8879      	ldrh	r1, [r7, #2]
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	4413      	add	r3, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	da00      	bge.n	8000662 <crossfade+0x2e>
 8000660:	33ff      	adds	r3, #255	@ 0xff
 8000662:	121b      	asrs	r3, r3, #8
 8000664:	b29b      	uxth	r3, r3
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <octaveUp>:

unsigned short t_octave_up = 0;
unsigned short octaveUp(unsigned short currentInput) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	unsigned short delayInput = getDelaySample(&octaveCircularBuffer, OCTAVE_UP_SAMPLE_LENGTH - t_octave_up);
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <octaveUp+0x7c>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000686:	b29b      	uxth	r3, r3
 8000688:	4619      	mov	r1, r3
 800068a:	481a      	ldr	r0, [pc, #104]	@ (80006f4 <octaveUp+0x80>)
 800068c:	f7ff ff91 	bl	80005b2 <getDelaySample>
 8000690:	4603      	mov	r3, r0
 8000692:	81fb      	strh	r3, [r7, #14]
	if (t_octave_up > OCTAVE_UP_SAMPLE_LENGTH - CROSSFADE_LENGTH) {
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <octaveUp+0x7c>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800069c:	d916      	bls.n	80006cc <octaveUp+0x58>
		unsigned short crossfadeInput = getDelaySample(&octaveCircularBuffer, 2*OCTAVE_UP_SAMPLE_LENGTH - t_octave_up);
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <octaveUp+0x7c>)
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	4812      	ldr	r0, [pc, #72]	@ (80006f4 <octaveUp+0x80>)
 80006ac:	f7ff ff81 	bl	80005b2 <getDelaySample>
 80006b0:	4603      	mov	r3, r0
 80006b2:	81bb      	strh	r3, [r7, #12]
		delayInput = crossfade(delayInput, crossfadeInput, t_octave_up + CROSSFADE_LENGTH - OCTAVE_UP_SAMPLE_LENGTH);
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <octaveUp+0x7c>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80006bc:	b29a      	uxth	r2, r3
 80006be:	89b9      	ldrh	r1, [r7, #12]
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffb6 	bl	8000634 <crossfade>
 80006c8:	4603      	mov	r3, r0
 80006ca:	81fb      	strh	r3, [r7, #14]
	}
	t_octave_up = (t_octave_up + 1) % OCTAVE_UP_SAMPLE_LENGTH;
 80006cc:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <octaveUp+0x7c>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	425a      	negs	r2, r3
 80006d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80006dc:	bf58      	it	pl
 80006de:	4253      	negpl	r3, r2
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <octaveUp+0x7c>)
 80006e4:	801a      	strh	r2, [r3, #0]
	return delayInput;
 80006e6:	89fb      	ldrh	r3, [r7, #14]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20011090 	.word	0x20011090
 80006f4:	20000008 	.word	0x20000008

080006f8 <octaveDown>:

unsigned short t_octave_down = 0;
unsigned short octaveDown(unsigned short currentInput) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	80fb      	strh	r3, [r7, #6]
	unsigned short delayInput = getDelaySample(&octaveCircularBuffer, (t_octave_down/2)+CROSSFADE_LENGTH);
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <octaveDown+0x84>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	085b      	lsrs	r3, r3, #1
 8000708:	b29b      	uxth	r3, r3
 800070a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800070e:	b29b      	uxth	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	481b      	ldr	r0, [pc, #108]	@ (8000780 <octaveDown+0x88>)
 8000714:	f7ff ff4d 	bl	80005b2 <getDelaySample>
 8000718:	4603      	mov	r3, r0
 800071a:	81fb      	strh	r3, [r7, #14]
	if (t_octave_down > 2*OCTAVE_DOWN_SAMPLE_LENGTH - CROSSFADE_LENGTH) {
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <octaveDown+0x84>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000724:	d918      	bls.n	8000758 <octaveDown+0x60>
		unsigned short crossfadeInput = getDelaySample(&octaveCircularBuffer, (t_octave_down/2) - OCTAVE_DOWN_SAMPLE_LENGTH + CROSSFADE_LENGTH);
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <octaveDown+0x84>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	085b      	lsrs	r3, r3, #1
 800072c:	b29b      	uxth	r3, r3
 800072e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000732:	b29b      	uxth	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	4812      	ldr	r0, [pc, #72]	@ (8000780 <octaveDown+0x88>)
 8000738:	f7ff ff3b 	bl	80005b2 <getDelaySample>
 800073c:	4603      	mov	r3, r0
 800073e:	81bb      	strh	r3, [r7, #12]
		delayInput = crossfade(delayInput, crossfadeInput, t_octave_down + CROSSFADE_LENGTH - 2*OCTAVE_DOWN_SAMPLE_LENGTH);
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <octaveDown+0x84>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8000748:	b29a      	uxth	r2, r3
 800074a:	89b9      	ldrh	r1, [r7, #12]
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff70 	bl	8000634 <crossfade>
 8000754:	4603      	mov	r3, r0
 8000756:	81fb      	strh	r3, [r7, #14]
	}
	t_octave_down = (t_octave_down+1)%(2*OCTAVE_DOWN_SAMPLE_LENGTH);
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <octaveDown+0x84>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	425a      	negs	r2, r3
 8000760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000764:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000768:	bf58      	it	pl
 800076a:	4253      	negpl	r3, r2
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b03      	ldr	r3, [pc, #12]	@ (800077c <octaveDown+0x84>)
 8000770:	801a      	strh	r2, [r3, #0]
	return delayInput;
 8000772:	89fb      	ldrh	r3, [r7, #14]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20011092 	.word	0x20011092
 8000780:	20000008 	.word	0x20000008

08000784 <octave>:

unsigned short octave(unsigned short currentSample, bool octaveDownActive, bool cleanSignalActive, bool octaveUpActive){
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	4604      	mov	r4, r0
 800078c:	4608      	mov	r0, r1
 800078e:	4611      	mov	r1, r2
 8000790:	461a      	mov	r2, r3
 8000792:	4623      	mov	r3, r4
 8000794:	80fb      	strh	r3, [r7, #6]
 8000796:	4603      	mov	r3, r0
 8000798:	717b      	strb	r3, [r7, #5]
 800079a:	460b      	mov	r3, r1
 800079c:	713b      	strb	r3, [r7, #4]
 800079e:	4613      	mov	r3, r2
 80007a0:	70fb      	strb	r3, [r7, #3]
	recordCurrentSampleForDelayEffects(&octaveCircularBuffer, currentSample);
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4818      	ldr	r0, [pc, #96]	@ (8000808 <octave+0x84>)
 80007a8:	f7ff fee2 	bl	8000570 <recordCurrentSampleForDelayEffects>
	unsigned short octaveUpSample = octaveUp(currentSample);
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff60 	bl	8000674 <octaveUp>
 80007b4:	4603      	mov	r3, r0
 80007b6:	81fb      	strh	r3, [r7, #14]
	unsigned short octaveDownSample = octaveDown(currentSample);
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff9c 	bl	80006f8 <octaveDown>
 80007c0:	4603      	mov	r3, r0
 80007c2:	81bb      	strh	r3, [r7, #12]
	int numOfSignalsToMix = octaveUpActive + cleanSignalActive + octaveDownActive;
 80007c4:	78fa      	ldrb	r2, [r7, #3]
 80007c6:	793b      	ldrb	r3, [r7, #4]
 80007c8:	441a      	add	r2, r3
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	4413      	add	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
	if (numOfSignalsToMix != 0){
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d012      	beq.n	80007fc <octave+0x78>
		return (octaveUpActive*octaveUpSample +
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	89fa      	ldrh	r2, [r7, #14]
 80007da:	fb03 f202 	mul.w	r2, r3, r2
				cleanSignalActive*currentSample +
 80007de:	793b      	ldrb	r3, [r7, #4]
 80007e0:	88f9      	ldrh	r1, [r7, #6]
 80007e2:	fb01 f303 	mul.w	r3, r1, r3
		return (octaveUpActive*octaveUpSample +
 80007e6:	441a      	add	r2, r3
				octaveDownActive*octaveDownSample)
 80007e8:	797b      	ldrb	r3, [r7, #5]
 80007ea:	89b9      	ldrh	r1, [r7, #12]
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
				cleanSignalActive*currentSample +
 80007f0:	441a      	add	r2, r3
				/numOfSignalsToMix;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	e000      	b.n	80007fe <octave+0x7a>
	} else {
		return currentSample;
 80007fc:	88fb      	ldrh	r3, [r7, #6]
	}
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008

0800080c <distortion>:

unsigned short distortion(unsigned short input, unsigned short gain){
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	80fb      	strh	r3, [r7, #6]
 8000818:	4613      	mov	r3, r2
 800081a:	80bb      	strh	r3, [r7, #4]
	unsigned int distortedInput;
	if (input < 2048u*gain/(gain+1u)){ // bottom saturation zone
 800081c:	88fa      	ldrh	r2, [r7, #6]
 800081e:	88bb      	ldrh	r3, [r7, #4]
 8000820:	02d9      	lsls	r1, r3, #11
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	3301      	adds	r3, #1
 8000826:	fbb1 f3f3 	udiv	r3, r1, r3
 800082a:	429a      	cmp	r2, r3
 800082c:	d206      	bcs.n	800083c <distortion+0x30>
		distortedInput = input/gain;
 800082e:	88fa      	ldrh	r2, [r7, #6]
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	b29b      	uxth	r3, r3
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e01d      	b.n	8000878 <distortion+0x6c>
	} else if (input < 2048u*(gain+2u)/(gain+1u)) { // linear region
 800083c:	88fa      	ldrh	r2, [r7, #6]
 800083e:	88bb      	ldrh	r3, [r7, #4]
 8000840:	3302      	adds	r3, #2
 8000842:	02d9      	lsls	r1, r3, #11
 8000844:	88bb      	ldrh	r3, [r7, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	fbb1 f3f3 	udiv	r3, r1, r3
 800084c:	429a      	cmp	r2, r3
 800084e:	d20a      	bcs.n	8000866 <distortion+0x5a>
		distortedInput = input*gain - 2048u*(gain-1u);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	88ba      	ldrh	r2, [r7, #4]
 8000854:	fb02 f303 	mul.w	r3, r2, r3
 8000858:	461a      	mov	r2, r3
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
 800085e:	02db      	lsls	r3, r3, #11
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e008      	b.n	8000878 <distortion+0x6c>
	} else { // top saturation zone
		distortedInput = (input+4096u*(gain-1u))/gain;
 8000866:	88fa      	ldrh	r2, [r7, #6]
 8000868:	88bb      	ldrh	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	031b      	lsls	r3, r3, #12
 800086e:	441a      	add	r2, r3
 8000870:	88bb      	ldrh	r3, [r7, #4]
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	60fb      	str	r3, [r7, #12]
	}
	return (distortedInput*(gain+1u) + 2048u*(gain-1u))/(2u*gain);
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	3301      	adds	r3, #1
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	fb03 f202 	mul.w	r2, r3, r2
 8000882:	88bb      	ldrh	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	02db      	lsls	r3, r3, #11
 8000888:	441a      	add	r2, r3
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	b29b      	uxth	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <writeAnalog>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void writeAnalog(uint16_t value, int channel){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	80fb      	strh	r3, [r7, #6]
	HAL_DAC_SetValue(&hdac1, channel, DAC_ALIGN_12B_R, value);
 80008ac:	6839      	ldr	r1, [r7, #0]
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	2200      	movs	r2, #0
 80008b2:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <writeAnalog+0x20>)
 80008b4:	f002 feda 	bl	800366c <HAL_DAC_SetValue>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20011208 	.word	0x20011208

080008c4 <sendMessageToComputer>:
void writeAudio(uint16_t value){
	writeAnalog(value, DAC_CHANNEL_1);
}

char stringBuffer[1024];
void sendMessageToComputer(char* message){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fc7f 	bl	80001d0 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <sendMessageToComputer+0x28>)
 80008de:	f005 fe6f 	bl	80065c0 <HAL_UART_Transmit>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200112e4 	.word	0x200112e4

080008f0 <processSample>:
bool octaveDownActive = 0;
bool delayActive = 0;
bool distortionActive = 0;
uint16_t gain = 8;
uint16_t delayAmount = 4400;
uint16_t processSample(uint16_t sample) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
	if (sample > 3500) {
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000900:	4293      	cmp	r3, r2
 8000902:	d904      	bls.n	800090e <processSample+0x1e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000904:	2101      	movs	r1, #1
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f003 fc89 	bl	8004220 <HAL_GPIO_TogglePin>
	}

	sample = octave(sample, octaveDownActive, cleanSignalActive, octaveUpActive);
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <processSample+0x74>)
 8000910:	7819      	ldrb	r1, [r3, #0]
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <processSample+0x78>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <processSample+0x7c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	88f8      	ldrh	r0, [r7, #6]
 800091c:	f7ff ff32 	bl	8000784 <octave>
 8000920:	4603      	mov	r3, r0
 8000922:	80fb      	strh	r3, [r7, #6]

	if (distortionActive) {
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <processSample+0x80>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <processSample+0x4e>
		sample = distortion(sample, gain);
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <processSample+0x84>)
 800092e:	881a      	ldrh	r2, [r3, #0]
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff69 	bl	800080c <distortion>
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
	}

	if (delayActive) {
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <processSample+0x88>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d008      	beq.n	8000958 <processSample+0x68>
		sample = delay(sample, delayAmount);
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <processSample+0x8c>)
 8000948:	881a      	ldrh	r2, [r3, #0]
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	4611      	mov	r1, r2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe4e 	bl	80005f0 <delay>
 8000954:	4603      	mov	r3, r0
 8000956:	80fb      	strh	r3, [r7, #6]
	}

	return sample;
 8000958:	88fb      	ldrh	r3, [r7, #6]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200118cd 	.word	0x200118cd
 8000968:	20000010 	.word	0x20000010
 800096c:	200118cc 	.word	0x200118cc
 8000970:	200118cf 	.word	0x200118cf
 8000974:	20000012 	.word	0x20000012
 8000978:	200118ce 	.word	0x200118ce
 800097c:	20000014 	.word	0x20000014

08000980 <processHalfBuffer>:

void processHalfBuffer(uint16_t* inputBuffer, uint16_t* outputBuffer) {
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	for (int i=0; i<INPUT_BUFFER_LENGTH/2; i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e010      	b.n	80009b2 <processHalfBuffer+0x32>
		outputBuffer[i] = processSample(inputBuffer[i]);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	8819      	ldrh	r1, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	18d4      	adds	r4, r2, r3
 80009a2:	4608      	mov	r0, r1
 80009a4:	f7ff ffa4 	bl	80008f0 <processSample>
 80009a8:	4603      	mov	r3, r0
 80009aa:	8023      	strh	r3, [r4, #0]
	for (int i=0; i<INPUT_BUFFER_LENGTH/2; i++) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80009b6:	ddeb      	ble.n	8000990 <processHalfBuffer+0x10>
	}
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd90      	pop	{r4, r7, pc}
	...

080009c4 <HAL_ADC_ConvHalfCpltCallback>:

// Called when the input buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	processHalfBuffer(inputBuffer, outputBuffer);
 80009cc:	4903      	ldr	r1, [pc, #12]	@ (80009dc <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80009ce:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80009d0:	f7ff ffd6 	bl	8000980 <processHalfBuffer>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2001141c 	.word	0x2001141c
 80009e0:	2001136c 	.word	0x2001136c

080009e4 <HAL_ADC_ConvCpltCallback>:

// Called when the input buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	processHalfBuffer(inputBuffer+(INPUT_BUFFER_LENGTH/2), outputBuffer+(INPUT_BUFFER_LENGTH/2));
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009ee:	4a05      	ldr	r2, [pc, #20]	@ (8000a04 <HAL_ADC_ConvCpltCallback+0x20>)
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffc4 	bl	8000980 <processHalfBuffer>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200113c4 	.word	0x200113c4
 8000a04:	20011474 	.word	0x20011474

08000a08 <readAnalog>:

uint16_t readAnalog(ADC_HandleTypeDef* hadc1){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f001 fb6b 	bl	80020ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 8000a16:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f001 fc20 	bl	8002260 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(hadc1);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f001 fdb1 	bl	8002588 <HAL_ADC_GetValue>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29b      	uxth	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f000 ffbf 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f8d9 	bl	8000bf4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a42:	f000 f928 	bl	8000c96 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f000 fb9d 	bl	8001184 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4a:	f000 fb75 	bl	8001138 <MX_DMA_Init>
  MX_DAC1_Init();
 8000a4e:	f000 fa8d 	bl	8000f6c <MX_DAC1_Init>
  MX_ADC1_Init();
 8000a52:	f000 f94b 	bl	8000cec <MX_ADC1_Init>
  MX_OPAMP2_Init();
 8000a56:	f000 fac7 	bl	8000fe8 <MX_OPAMP2_Init>
  MX_USART2_UART_Init();
 8000a5a:	f000 fb3d 	bl	80010d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a5e:	f000 faed 	bl	800103c <MX_TIM2_Init>
  MX_ADC2_Init();
 8000a62:	f000 f9bb 	bl	8000ddc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000a66:	f000 fa1d 	bl	8000ea4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inputBuffer, INPUT_BUFFER_LENGTH);
 8000a6a:	2258      	movs	r2, #88	@ 0x58
 8000a6c:	494f      	ldr	r1, [pc, #316]	@ (8000bac <main+0x178>)
 8000a6e:	4850      	ldr	r0, [pc, #320]	@ (8000bb0 <main+0x17c>)
 8000a70:	f001 fcce 	bl	8002410 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000a74:	2110      	movs	r1, #16
 8000a76:	484f      	ldr	r0, [pc, #316]	@ (8000bb4 <main+0x180>)
 8000a78:	f002 fc84 	bl	8003384 <HAL_DAC_Start>
  writeAnalog(256, DAC_CHANNEL_2);
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000a82:	f7ff ff0d 	bl	80008a0 <writeAnalog>
  HAL_OPAMP_Start(&hopamp2);
 8000a86:	484c      	ldr	r0, [pc, #304]	@ (8000bb8 <main+0x184>)
 8000a88:	f003 fcba 	bl	8004400 <HAL_OPAMP_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)outputBuffer, INPUT_BUFFER_LENGTH, DAC_ALIGN_12B_R);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2358      	movs	r3, #88	@ 0x58
 8000a92:	4a4a      	ldr	r2, [pc, #296]	@ (8000bbc <main+0x188>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	4847      	ldr	r0, [pc, #284]	@ (8000bb4 <main+0x180>)
 8000a98:	f002 fcc2 	bl	8003420 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8000a9c:	4848      	ldr	r0, [pc, #288]	@ (8000bc0 <main+0x18c>)
 8000a9e:	f005 f88b 	bl	8005bb8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  distortionActive = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000aa2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aaa:	f003 fb89 	bl	80041c0 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b42      	ldr	r3, [pc, #264]	@ (8000bc4 <main+0x190>)
 8000abc:	701a      	strb	r2, [r3, #0]
	  octaveDownActive = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000abe:	2120      	movs	r1, #32
 8000ac0:	4841      	ldr	r0, [pc, #260]	@ (8000bc8 <main+0x194>)
 8000ac2:	f003 fb7d 	bl	80041c0 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bcc <main+0x198>)
 8000ad4:	701a      	strb	r2, [r3, #0]
	  cleanSignalActive = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	483b      	ldr	r0, [pc, #236]	@ (8000bc8 <main+0x194>)
 8000ada:	f003 fb71 	bl	80041c0 <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2301      	movne	r3, #1
 8000ae6:	2300      	moveq	r3, #0
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b39      	ldr	r3, [pc, #228]	@ (8000bd0 <main+0x19c>)
 8000aec:	701a      	strb	r2, [r3, #0]
	  octaveUpActive = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	4835      	ldr	r0, [pc, #212]	@ (8000bc8 <main+0x194>)
 8000af4:	f003 fb64 	bl	80041c0 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <main+0x1a0>)
 8000b06:	701a      	strb	r2, [r3, #0]
	  delayActive = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000b08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b10:	f003 fb56 	bl	80041c0 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf14      	ite	ne
 8000b1a:	2301      	movne	r3, #1
 8000b1c:	2300      	moveq	r3, #0
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <main+0x1a4>)
 8000b22:	701a      	strb	r2, [r3, #0]
	  if (distortionActive) {
 8000b24:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <main+0x190>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00d      	beq.n	8000b48 <main+0x114>
		  gain = readAnalog(&hadc2)*15u/4096u + 1u;
 8000b2c:	482b      	ldr	r0, [pc, #172]	@ (8000bdc <main+0x1a8>)
 8000b2e:	f7ff ff6b 	bl	8000a08 <readAnalog>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461a      	mov	r2, r3
 8000b36:	4613      	mov	r3, r2
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	0b1b      	lsrs	r3, r3, #12
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	3301      	adds	r3, #1
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <main+0x1ac>)
 8000b46:	801a      	strh	r2, [r3, #0]
	  }
	  if (delayActive) {
 8000b48:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <main+0x1a4>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d007      	beq.n	8000b60 <main+0x12c>
		  delayAmount = readAnalog(&hadc3)*DELAY_BUFFER_LENGTH/4096;
 8000b50:	4824      	ldr	r0, [pc, #144]	@ (8000be4 <main+0x1b0>)
 8000b52:	f7ff ff59 	bl	8000a08 <readAnalog>
 8000b56:	4603      	mov	r3, r0
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <main+0x1b4>)
 8000b5e:	801a      	strh	r2, [r3, #0]
	  }
	  sprintf(stringBuffer, "distortionActive: %d, octaveDownActive: %d, cleanSignalActive: %d, octaveUpActive: %d, delayActive: %d\r\ngain: %d, delay: %d samples\r\n",
 8000b60:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <main+0x190>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461d      	mov	r5, r3
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <main+0x198>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461e      	mov	r6, r3
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <main+0x19c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <main+0x1a0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <main+0x1a4>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <main+0x1ac>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	461c      	mov	r4, r3
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <main+0x1b4>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	9304      	str	r3, [sp, #16]
 8000b8a:	9403      	str	r4, [sp, #12]
 8000b8c:	9002      	str	r0, [sp, #8]
 8000b8e:	9101      	str	r1, [sp, #4]
 8000b90:	9200      	str	r2, [sp, #0]
 8000b92:	4633      	mov	r3, r6
 8000b94:	462a      	mov	r2, r5
 8000b96:	4915      	ldr	r1, [pc, #84]	@ (8000bec <main+0x1b8>)
 8000b98:	4815      	ldr	r0, [pc, #84]	@ (8000bf0 <main+0x1bc>)
 8000b9a:	f006 fa6f 	bl	800707c <siprintf>
			  distortionActive, octaveDownActive, cleanSignalActive, octaveUpActive, delayActive, gain, delayAmount);
	  sendMessageToComputer(stringBuffer);
 8000b9e:	4814      	ldr	r0, [pc, #80]	@ (8000bf0 <main+0x1bc>)
 8000ba0:	f7ff fe90 	bl	80008c4 <sendMessageToComputer>
	  HAL_Delay(17);
 8000ba4:	2011      	movs	r0, #17
 8000ba6:	f000 ff49 	bl	8001a3c <HAL_Delay>
	  distortionActive = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000baa:	e77a      	b.n	8000aa2 <main+0x6e>
 8000bac:	2001136c 	.word	0x2001136c
 8000bb0:	20011094 	.word	0x20011094
 8000bb4:	20011208 	.word	0x20011208
 8000bb8:	20011264 	.word	0x20011264
 8000bbc:	2001141c 	.word	0x2001141c
 8000bc0:	20011298 	.word	0x20011298
 8000bc4:	200118cf 	.word	0x200118cf
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	200118cd 	.word	0x200118cd
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	200118cc 	.word	0x200118cc
 8000bd8:	200118ce 	.word	0x200118ce
 8000bdc:	200110f8 	.word	0x200110f8
 8000be0:	20000012 	.word	0x20000012
 8000be4:	2001115c 	.word	0x2001115c
 8000be8:	20000014 	.word	0x20000014
 8000bec:	080079dc 	.word	0x080079dc
 8000bf0:	200114cc 	.word	0x200114cc

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b096      	sub	sp, #88	@ 0x58
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2244      	movs	r2, #68	@ 0x44
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f006 fa5a 	bl	80070bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c1a:	f003 fc31 	bl	8004480 <HAL_PWREx_ControlVoltageScaling>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c24:	f000 fb34 	bl	8001290 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c32:	2310      	movs	r3, #16
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c36:	2302      	movs	r3, #2
 8000c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c42:	230a      	movs	r3, #10
 8000c44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c46:	2307      	movs	r3, #7
 8000c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 fc68 	bl	800452c <HAL_RCC_OscConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c62:	f000 fb15 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	230f      	movs	r3, #15
 8000c68:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 f830 	bl	8004ce4 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c8a:	f000 fb01 	bl	8001290 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3758      	adds	r7, #88	@ 0x58
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b0a2      	sub	sp, #136	@ 0x88
 8000c9a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2288      	movs	r2, #136	@ 0x88
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f006 fa0a 	bl	80070bc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ca8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cd0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 fa5b 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000ce0:	f000 fad6 	bl	8001290 <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3788      	adds	r7, #136	@ 0x88
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b30      	ldr	r3, [pc, #192]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d10:	4a30      	ldr	r2, [pc, #192]	@ (8000dd4 <MX_ADC1_Init+0xe8>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d4e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8000d52:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d72:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d74:	f001 f86a 	bl	8001e4c <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d7e:	f000 fa87 	bl	8001290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4810      	ldr	r0, [pc, #64]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d8e:	f002 f945 	bl	800301c <HAL_ADCEx_MultiModeConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d98:	f000 fa7a 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_ADC1_Init+0xec>)
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da0:	2306      	movs	r3, #6
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da8:	237f      	movs	r3, #127	@ 0x7f
 8000daa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dac:	2304      	movs	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000dba:	f001 fbfd 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000dc4:	f000 fa64 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20011094 	.word	0x20011094
 8000dd4:	50040000 	.word	0x50040000
 8000dd8:	3ef08000 	.word	0x3ef08000

08000ddc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000df2:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000df4:	4a29      	ldr	r2, [pc, #164]	@ (8000e9c <MX_ADC2_Init+0xc0>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dfe:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e04:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e10:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e52:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e54:	f000 fffa 	bl	8001e4c <HAL_ADC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000e5e:	f000 fa17 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_ADC2_Init+0xc4>)
 8000e64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e66:	2306      	movs	r3, #6
 8000e68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e6e:	237f      	movs	r3, #127	@ 0x7f
 8000e70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e72:	2304      	movs	r3, #4
 8000e74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <MX_ADC2_Init+0xbc>)
 8000e80:	f001 fb9a 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000e8a:	f000 fa01 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200110f8 	.word	0x200110f8
 8000e9c:	50040100 	.word	0x50040100
 8000ea0:	04300002 	.word	0x04300002

08000ea4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eba:	4b29      	ldr	r3, [pc, #164]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ebc:	4a29      	ldr	r2, [pc, #164]	@ (8000f64 <MX_ADC3_Init+0xc0>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec0:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f1a:	4811      	ldr	r0, [pc, #68]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000f1c:	f000 ff96 	bl	8001e4c <HAL_ADC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000f26:	f000 f9b3 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_ADC3_Init+0xc4>)
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f36:	237f      	movs	r3, #127	@ 0x7f
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	@ (8000f60 <MX_ADC3_Init+0xbc>)
 8000f48:	f001 fb36 	bl	80025b8 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000f52:	f000 f99d 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2001115c 	.word	0x2001115c
 8000f64:	50040200 	.word	0x50040200
 8000f68:	08600004 	.word	0x08600004

08000f6c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2224      	movs	r2, #36	@ 0x24
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 f89f 	bl	80070bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_DAC1_Init+0x74>)
 8000f80:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <MX_DAC1_Init+0x78>)
 8000f82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f84:	4816      	ldr	r0, [pc, #88]	@ (8000fe0 <MX_DAC1_Init+0x74>)
 8000f86:	f002 f9db 	bl	8003340 <HAL_DAC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f90:	f000 f97e 	bl	8001290 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f98:	2324      	movs	r3, #36	@ 0x24
 8000f9a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <MX_DAC1_Init+0x74>)
 8000fb0:	f002 fba9 	bl	8003706 <HAL_DAC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000fba:	f000 f969 	bl	8001290 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_DAC1_Init+0x74>)
 8000fca:	f002 fb9c 	bl	8003706 <HAL_DAC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000fd4:	f000 f95c 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20011208 	.word	0x20011208
 8000fe4:	40007400 	.word	0x40007400

08000fe8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <MX_OPAMP2_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8000ff4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ff8:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_CONNECT_NO;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8001008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100c:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_8;
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8001010:	2220      	movs	r2, #32
 8001012:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_OPAMP2_Init+0x4c>)
 8001022:	f003 f917 	bl	8004254 <HAL_OPAMP_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_OPAMP2_Init+0x48>
  {
    Error_Handler();
 800102c:	f000 f930 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20011264 	.word	0x20011264
 8001038:	40007810 	.word	0x40007810

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105a:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800105c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001062:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1761;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001070:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8001074:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <MX_TIM2_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001082:	4814      	ldr	r0, [pc, #80]	@ (80010d4 <MX_TIM2_Init+0x98>)
 8001084:	f004 fd40 	bl	8005b08 <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800108e:	f000 f8ff 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <MX_TIM2_Init+0x98>)
 80010a0:	f004 ff69 	bl	8005f76 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010aa:	f000 f8f1 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ae:	2320      	movs	r3, #32
 80010b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <MX_TIM2_Init+0x98>)
 80010bc:	f005 f98c 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f000 f8e3 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20011298 	.word	0x20011298

080010d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 80010de:	4a15      	ldr	r2, [pc, #84]	@ (8001134 <MX_USART2_UART_Init+0x5c>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_USART2_UART_Init+0x58>)
 800111c:	f005 fa02 	bl	8006524 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001126:	f000 f8b3 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200112e4 	.word	0x200112e4
 8001134:	40004400 	.word	0x40004400

08001138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_DMA_Init+0x48>)
 8001140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001142:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <MX_DMA_Init+0x48>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6493      	str	r3, [r2, #72]	@ 0x48
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_DMA_Init+0x48>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	200b      	movs	r0, #11
 800115c:	f002 f8c6 	bl	80032ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001160:	200b      	movs	r0, #11
 8001162:	f002 f8df 	bl	8003324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	200d      	movs	r0, #13
 800116c:	f002 f8be 	bl	80032ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001170:	200d      	movs	r0, #13
 8001172:	f002 f8d7 	bl	8003324 <HAL_NVIC_EnableIRQ>

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b32      	ldr	r3, [pc, #200]	@ (8001264 <MX_GPIO_Init+0xe0>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a31      	ldr	r2, [pc, #196]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a25      	ldr	r2, [pc, #148]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <MX_GPIO_Init+0xe0>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2101      	movs	r1, #1
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001202:	f002 fff5 	bl	80041f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f002 fe24 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001224:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800122e:	2302      	movs	r3, #2
 8001230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480b      	ldr	r0, [pc, #44]	@ (8001268 <MX_GPIO_Init+0xe4>)
 800123a:	f002 fe17 	bl	8003e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800123e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001256:	f002 fe09 	bl	8003e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	@ 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	48000400 	.word	0x48000400

0800126c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800127e:	f000 fbbd 	bl	80019fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40001000 	.word	0x40001000

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_MspInit+0x44>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <HAL_MspInit+0x44>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <HAL_MspInit+0x44>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_MspInit+0x44>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <HAL_MspInit+0x44>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_MspInit+0x44>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	@ 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a62      	ldr	r2, [pc, #392]	@ (800148c <HAL_ADC_MspInit+0x1a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d158      	bne.n	80013b8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001306:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a60      	ldr	r2, [pc, #384]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 800130e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001310:	4b5f      	ldr	r3, [pc, #380]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001318:	4b5e      	ldr	r3, [pc, #376]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a5d      	ldr	r2, [pc, #372]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 800131e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b5b      	ldr	r3, [pc, #364]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b58      	ldr	r3, [pc, #352]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a57      	ldr	r2, [pc, #348]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b55      	ldr	r3, [pc, #340]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001348:	2301      	movs	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800134c:	230b      	movs	r3, #11
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	484f      	ldr	r0, [pc, #316]	@ (8001498 <HAL_ADC_MspInit+0x1b4>)
 800135c:	f002 fd86 	bl	8003e6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001360:	4b4e      	ldr	r3, [pc, #312]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 8001362:	4a4f      	ldr	r2, [pc, #316]	@ (80014a0 <HAL_ADC_MspInit+0x1bc>)
 8001364:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001366:	4b4d      	ldr	r3, [pc, #308]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136c:	4b4b      	ldr	r3, [pc, #300]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001372:	4b4a      	ldr	r3, [pc, #296]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001378:	4b48      	ldr	r3, [pc, #288]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 800137a:	2280      	movs	r2, #128	@ 0x80
 800137c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137e:	4b47      	ldr	r3, [pc, #284]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 8001380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001384:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001386:	4b45      	ldr	r3, [pc, #276]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 8001388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800138e:	4b43      	ldr	r3, [pc, #268]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 8001390:	2220      	movs	r2, #32
 8001392:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001394:	4b41      	ldr	r3, [pc, #260]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800139a:	4840      	ldr	r0, [pc, #256]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 800139c:	f002 fb6e 	bl	8003a7c <HAL_DMA_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80013a6:	f7ff ff73 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a3b      	ldr	r2, [pc, #236]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 80013ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013b0:	4a3a      	ldr	r2, [pc, #232]	@ (800149c <HAL_ADC_MspInit+0x1b8>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013b6:	e064      	b.n	8001482 <HAL_ADC_MspInit+0x19e>
  else if(hadc->Instance==ADC2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a39      	ldr	r2, [pc, #228]	@ (80014a4 <HAL_ADC_MspInit+0x1c0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12d      	bne.n	800141e <HAL_ADC_MspInit+0x13a>
    HAL_RCC_ADC_CLK_ENABLED++;
 80013c2:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a31      	ldr	r2, [pc, #196]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 80013ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 80013da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001404:	2301      	movs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001408:	230b      	movs	r3, #11
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	4824      	ldr	r0, [pc, #144]	@ (80014a8 <HAL_ADC_MspInit+0x1c4>)
 8001418:	f002 fd28 	bl	8003e6c <HAL_GPIO_Init>
}
 800141c:	e031      	b.n	8001482 <HAL_ADC_MspInit+0x19e>
  else if(hadc->Instance==ADC3)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a22      	ldr	r2, [pc, #136]	@ (80014ac <HAL_ADC_MspInit+0x1c8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d12c      	bne.n	8001482 <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 8001430:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_ADC_MspInit+0x1ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10b      	bne.n	8001452 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC_CLK_ENABLE();
 800143a:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a15      	ldr	r2, [pc, #84]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001440:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <HAL_ADC_MspInit+0x1b0>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146a:	2302      	movs	r3, #2
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800146e:	230b      	movs	r3, #11
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <HAL_ADC_MspInit+0x1c4>)
 800147e:	f002 fcf5 	bl	8003e6c <HAL_GPIO_Init>
}
 8001482:	bf00      	nop
 8001484:	3738      	adds	r7, #56	@ 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	50040000 	.word	0x50040000
 8001490:	200118d0 	.word	0x200118d0
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400
 800149c:	200111c0 	.word	0x200111c0
 80014a0:	40020008 	.word	0x40020008
 80014a4:	50040100 	.word	0x50040100
 80014a8:	48000800 	.word	0x48000800
 80014ac:	50040200 	.word	0x50040200

080014b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2f      	ldr	r2, [pc, #188]	@ (800158c <HAL_DAC_MspInit+0xdc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d157      	bne.n	8001582 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001590 <HAL_DAC_MspInit+0xe0>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001590 <HAL_DAC_MspInit+0xe0>)
 80014d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014de:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <HAL_DAC_MspInit+0xe0>)
 80014e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <HAL_DAC_MspInit+0xe0>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a28      	ldr	r2, [pc, #160]	@ (8001590 <HAL_DAC_MspInit+0xe0>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <HAL_DAC_MspInit+0xe0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001502:	2330      	movs	r3, #48	@ 0x30
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001518:	f002 fca8 	bl	8003e6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 800151e:	4a1e      	ldr	r2, [pc, #120]	@ (8001598 <HAL_DAC_MspInit+0xe8>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 8001524:	2206      	movs	r2, #6
 8001526:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 800152a:	2210      	movs	r2, #16
 800152c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800153a:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 800153c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001540:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 8001544:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001548:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 800154c:	2220      	movs	r2, #32
 800154e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001550:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001556:	480f      	ldr	r0, [pc, #60]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 8001558:	f002 fa90 	bl	8003a7c <HAL_DMA_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001562:	f7ff fe95 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <HAL_DAC_MspInit+0xe4>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	210f      	movs	r1, #15
 8001576:	2036      	movs	r0, #54	@ 0x36
 8001578:	f001 feb8 	bl	80032ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f001 fed1 	bl	8003324 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001582:	bf00      	nop
 8001584:	3728      	adds	r7, #40	@ 0x28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40007400 	.word	0x40007400
 8001590:	40021000 	.word	0x40021000
 8001594:	2001121c 	.word	0x2001121c
 8001598:	40020030 	.word	0x40020030

0800159c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <HAL_OPAMP_MspInit+0xa4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d13c      	bne.n	8001638 <HAL_OPAMP_MspInit+0x9c>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 80015be:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c2:	4a20      	ldr	r2, [pc, #128]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	4a1a      	ldr	r2, [pc, #104]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_OPAMP_MspInit+0xa8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VINP
    PB0     ------> OPAMP2_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001606:	2340      	movs	r3, #64	@ 0x40
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161c:	f002 fc26 	bl	8003e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001624:	230b      	movs	r3, #11
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <HAL_OPAMP_MspInit+0xac>)
 8001634:	f002 fc1a 	bl	8003e6c <HAL_GPIO_Init>

  /* USER CODE END OPAMP2_MspInit 1 */

  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40007810 	.word	0x40007810
 8001644:	40021000 	.word	0x40021000
 8001648:	48000400 	.word	0x48000400

0800164c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165c:	d10b      	bne.n	8001676 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_TIM_Base_MspInit+0x38>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <HAL_TIM_Base_MspInit+0x38>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6593      	str	r3, [r2, #88]	@ 0x58
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_TIM_Base_MspInit+0x38>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0ac      	sub	sp, #176	@ 0xb0
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2288      	movs	r2, #136	@ 0x88
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 fd07 	bl	80070bc <memset>
  if(huart->Instance==USART2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a21      	ldr	r2, [pc, #132]	@ (8001738 <HAL_UART_MspInit+0xb0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d13b      	bne.n	8001730 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fd63 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d0:	f7ff fdde 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_UART_MspInit+0xb4>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	4a18      	ldr	r2, [pc, #96]	@ (800173c <HAL_UART_MspInit+0xb4>)
 80016da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016de:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e0:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_UART_MspInit+0xb4>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_UART_MspInit+0xb4>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <HAL_UART_MspInit+0xb4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_UART_MspInit+0xb4>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001704:	230c      	movs	r3, #12
 8001706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171c:	2307      	movs	r3, #7
 800171e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172c:	f002 fb9e 	bl	8003e6c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001730:	bf00      	nop
 8001732:	37b0      	adds	r7, #176	@ 0xb0
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40004400 	.word	0x40004400
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	@ 0x38
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <HAL_InitTick+0xe0>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	4a33      	ldr	r2, [pc, #204]	@ (8001820 <HAL_InitTick+0xe0>)
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	6593      	str	r3, [r2, #88]	@ 0x58
 800175a:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <HAL_InitTick+0xe0>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001766:	f107 0210 	add.w	r2, r7, #16
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f003 fc7b 	bl	800506c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800177a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001780:	f003 fc48 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8001784:	6378      	str	r0, [r7, #52]	@ 0x34
 8001786:	e004      	b.n	8001792 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001788:	f003 fc44 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 800178c:	4603      	mov	r3, r0
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001794:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <HAL_InitTick+0xe4>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	3b01      	subs	r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <HAL_InitTick+0xe8>)
 80017a2:	4a22      	ldr	r2, [pc, #136]	@ (800182c <HAL_InitTick+0xec>)
 80017a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <HAL_InitTick+0xe8>)
 80017a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <HAL_InitTick+0xe8>)
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_InitTick+0xe8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_InitTick+0xe8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_InitTick+0xe8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017c6:	4818      	ldr	r0, [pc, #96]	@ (8001828 <HAL_InitTick+0xe8>)
 80017c8:	f004 f99e 	bl	8005b08 <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11b      	bne.n	8001812 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017da:	4813      	ldr	r0, [pc, #76]	@ (8001828 <HAL_InitTick+0xe8>)
 80017dc:	f004 fa54 	bl	8005c88 <HAL_TIM_Base_Start_IT>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d111      	bne.n	8001812 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ee:	2036      	movs	r0, #54	@ 0x36
 80017f0:	f001 fd98 	bl	8003324 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d808      	bhi.n	800180c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017fa:	2200      	movs	r2, #0
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	2036      	movs	r0, #54	@ 0x36
 8001800:	f001 fd74 	bl	80032ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_InitTick+0xf0>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e002      	b.n	8001812 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001812:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001816:	4618      	mov	r0, r3
 8001818:	3738      	adds	r7, #56	@ 0x38
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	431bde83 	.word	0x431bde83
 8001828:	200118d4 	.word	0x200118d4
 800182c:	40001000 	.word	0x40001000
 8001830:	2000001c 	.word	0x2000001c

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <MemManage_Handler+0x4>

0800184c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <UsageFault_Handler+0x4>

0800185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <DMA1_Channel1_IRQHandler+0x10>)
 800189a:	f002 fa07 	bl	8003cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200111c0 	.word	0x200111c0

080018a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <DMA1_Channel3_IRQHandler+0x10>)
 80018ae:	f002 f9fd 	bl	8003cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2001121c 	.word	0x2001121c

080018bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018c0:	4803      	ldr	r0, [pc, #12]	@ (80018d0 <TIM6_DAC_IRQHandler+0x14>)
 80018c2:	f004 fa51 	bl	8005d68 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80018c6:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <TIM6_DAC_IRQHandler+0x18>)
 80018c8:	f001 fe76 	bl	80035b8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200118d4 	.word	0x200118d4
 80018d4:	20011208 	.word	0x20011208

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f005 fbe0 	bl	80070cc <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20018000 	.word	0x20018000
 8001938:	00000400 	.word	0x00000400
 800193c:	20011920 	.word	0x20011920
 8001940:	20011a70 	.word	0x20011a70

08001944 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <LoopForever+0xe>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	@ (80019b4 <LoopForever+0x16>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f005 fb9f 	bl	80070d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800199a:	f7ff f84b 	bl	8000a34 <main>

0800199e <LoopForever>:

LoopForever:
    b LoopForever
 800199e:	e7fe      	b.n	800199e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019ac:	08007af0 	.word	0x08007af0
  ldr r2, =_sbss
 80019b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019b4:	20011a70 	.word	0x20011a70

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>
	...

080019bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_Init+0x3c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0b      	ldr	r2, [pc, #44]	@ (80019f8 <HAL_Init+0x3c>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f001 fc7f 	bl	80032d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d8:	200f      	movs	r0, #15
 80019da:	f7ff feb1 	bl	8001740 <HAL_InitTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	e001      	b.n	80019ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ea:	f7ff fc57 	bl	800129c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000020 	.word	0x20000020
 8001a20:	20011924 	.word	0x20011924

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	@ (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20011924 	.word	0x20011924

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000020 	.word	0x20000020

08001a84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3360      	adds	r3, #96	@ 0x60
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <LL_ADC_SetOffset+0x44>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	03fff000 	.word	0x03fff000

08001b34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3360      	adds	r3, #96	@ 0x60
 8001b42:	461a      	mov	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3360      	adds	r3, #96	@ 0x60
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3330      	adds	r3, #48	@ 0x30
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	211f      	movs	r1, #31
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	f003 011f 	and.w	r1, r3, #31
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3314      	adds	r3, #20
 8001c24:	461a      	mov	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	0e5b      	lsrs	r3, r3, #25
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	4413      	add	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	0d1b      	lsrs	r3, r3, #20
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2107      	movs	r1, #7
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	401a      	ands	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0d1b      	lsrs	r3, r3, #20
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0318 	and.w	r3, r3, #24
 8001c8e:	4908      	ldr	r1, [pc, #32]	@ (8001cb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c90:	40d9      	lsrs	r1, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	400b      	ands	r3, r1
 8001c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	0007ffff 	.word	0x0007ffff

08001cb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6093      	str	r3, [r2, #8]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d24:	d101      	bne.n	8001d2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d4c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_IsEnabled+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_IsEnabled+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001de6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dea:	f043 0204 	orr.w	r2, r3, #4
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d101      	bne.n	8001e16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d101      	bne.n	8001e3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e130      	b.n	80020c8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fa35 	bl	80012e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff3f 	bl	8001d10 <LL_ADC_IsDeepPowerDownEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff25 	bl	8001cec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff5a 	bl	8001d60 <LL_ADC_IsInternalRegulatorEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d115      	bne.n	8001ede <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff3e 	bl	8001d38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ebc:	4b84      	ldr	r3, [pc, #528]	@ (80020d0 <HAL_ADC_Init+0x284>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	4a84      	ldr	r2, [pc, #528]	@ (80020d4 <HAL_ADC_Init+0x288>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff3c 	bl	8001d60 <LL_ADC_IsInternalRegulatorEnabled>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10d      	bne.n	8001f0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff75 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 8001f14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 80c9 	bne.w	80020b6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 80c5 	bne.w	80020b6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f34:	f043 0202 	orr.w	r2, r3, #2
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff35 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d115      	bne.n	8001f78 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f4c:	4862      	ldr	r0, [pc, #392]	@ (80020d8 <HAL_ADC_Init+0x28c>)
 8001f4e:	f7ff ff2f 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f52:	4604      	mov	r4, r0
 8001f54:	4861      	ldr	r0, [pc, #388]	@ (80020dc <HAL_ADC_Init+0x290>)
 8001f56:	f7ff ff2b 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	431c      	orrs	r4, r3
 8001f5e:	4860      	ldr	r0, [pc, #384]	@ (80020e0 <HAL_ADC_Init+0x294>)
 8001f60:	f7ff ff26 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4323      	orrs	r3, r4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4619      	mov	r1, r3
 8001f72:	485c      	ldr	r0, [pc, #368]	@ (80020e4 <HAL_ADC_Init+0x298>)
 8001f74:	f7ff fd86 	bl	8001a84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e5b      	ldrb	r3, [r3, #25]
 8001f7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	3b01      	subs	r3, #1
 8001fac:	045b      	lsls	r3, r3, #17
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	4b44      	ldr	r3, [pc, #272]	@ (80020e8 <HAL_ADC_Init+0x29c>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff1b 	bl	8001e24 <LL_ADC_INJ_IsConversionOngoing>
 8001fee:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d13d      	bne.n	8002072 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d13a      	bne.n	8002072 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002000:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002008:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002018:	f023 0302 	bic.w	r3, r3, #2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	69b9      	ldr	r1, [r7, #24]
 8002022:	430b      	orrs	r3, r1
 8002024:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800202c:	2b01      	cmp	r3, #1
 800202e:	d118      	bne.n	8002062 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800203a:	f023 0304 	bic.w	r3, r3, #4
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800204c:	4311      	orrs	r1, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002052:	430a      	orrs	r2, r1
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	e007      	b.n	8002072 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10c      	bne.n	8002094 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f023 010f 	bic.w	r1, r3, #15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
 8002092:	e007      	b.n	80020a4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 020f 	bic.w	r2, r2, #15
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a8:	f023 0303 	bic.w	r3, r3, #3
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80020b4:	e007      	b.n	80020c6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3724      	adds	r7, #36	@ 0x24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd90      	pop	{r4, r7, pc}
 80020d0:	20000018 	.word	0x20000018
 80020d4:	053e2d63 	.word	0x053e2d63
 80020d8:	50040000 	.word	0x50040000
 80020dc:	50040100 	.word	0x50040100
 80020e0:	50040200 	.word	0x50040200
 80020e4:	50040300 	.word	0x50040300
 80020e8:	fff0c007 	.word	0xfff0c007

080020ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f4:	4857      	ldr	r0, [pc, #348]	@ (8002254 <HAL_ADC_Start+0x168>)
 80020f6:	f7ff fddd 	bl	8001cb4 <LL_ADC_GetMultimode>
 80020fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fe7c 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 809c 	bne.w	8002246 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_ADC_Start+0x30>
 8002118:	2302      	movs	r3, #2
 800211a:	e097      	b.n	800224c <HAL_ADC_Start+0x160>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fe39 	bl	8002d9c <ADC_Enable>
 800212a:	4603      	mov	r3, r0
 800212c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	2b00      	cmp	r3, #0
 8002132:	f040 8083 	bne.w	800223c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800213e:	f023 0301 	bic.w	r3, r3, #1
 8002142:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a42      	ldr	r2, [pc, #264]	@ (8002258 <HAL_ADC_Start+0x16c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d002      	beq.n	800215a <HAL_ADC_Start+0x6e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e000      	b.n	800215c <HAL_ADC_Start+0x70>
 800215a:	4b40      	ldr	r3, [pc, #256]	@ (800225c <HAL_ADC_Start+0x170>)
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	4293      	cmp	r3, r2
 8002162:	d002      	beq.n	800216a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002182:	d106      	bne.n	8002192 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f023 0206 	bic.w	r2, r3, #6
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002190:	e002      	b.n	8002198 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	221c      	movs	r2, #28
 800219e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002258 <HAL_ADC_Start+0x16c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d002      	beq.n	80021b8 <HAL_ADC_Start+0xcc>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e000      	b.n	80021ba <HAL_ADC_Start+0xce>
 80021b8:	4b28      	ldr	r3, [pc, #160]	@ (800225c <HAL_ADC_Start+0x170>)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4293      	cmp	r3, r2
 80021c0:	d008      	beq.n	80021d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d002      	beq.n	80021d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	d114      	bne.n	80021fe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fded 	bl	8001dd6 <LL_ADC_REG_StartConversion>
 80021fc:	e025      	b.n	800224a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002202:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <HAL_ADC_Start+0x16c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d002      	beq.n	800221a <HAL_ADC_Start+0x12e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e000      	b.n	800221c <HAL_ADC_Start+0x130>
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_ADC_Start+0x170>)
 800221c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002232:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
 800223a:	e006      	b.n	800224a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002244:	e001      	b.n	800224a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002246:	2302      	movs	r3, #2
 8002248:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	50040300 	.word	0x50040300
 8002258:	50040100 	.word	0x50040100
 800225c:	50040000 	.word	0x50040000

08002260 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800226a:	4866      	ldr	r0, [pc, #408]	@ (8002404 <HAL_ADC_PollForConversion+0x1a4>)
 800226c:	f7ff fd22 	bl	8001cb4 <LL_ADC_GetMultimode>
 8002270:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	2b08      	cmp	r3, #8
 8002278:	d102      	bne.n	8002280 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800227a:	2308      	movs	r3, #8
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	e02a      	b.n	80022d6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d002      	beq.n	8002292 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b09      	cmp	r3, #9
 8002290:	d111      	bne.n	80022b6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0a4      	b.n	80023fa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022b0:	2304      	movs	r3, #4
 80022b2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022b4:	e00f      	b.n	80022d6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022b6:	4853      	ldr	r0, [pc, #332]	@ (8002404 <HAL_ADC_PollForConversion+0x1a4>)
 80022b8:	f7ff fd0a 	bl	8001cd0 <LL_ADC_GetMultiDMATransfer>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e093      	b.n	80023fa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022d2:	2304      	movs	r3, #4
 80022d4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022d6:	f7ff fba5 	bl	8001a24 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022dc:	e021      	b.n	8002322 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d01d      	beq.n	8002322 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022e6:	f7ff fb9d 	bl	8001a24 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d302      	bcc.n	80022fc <HAL_ADC_PollForConversion+0x9c>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d112      	bne.n	8002322 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10b      	bne.n	8002322 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230e:	f043 0204 	orr.w	r2, r3, #4
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e06b      	b.n	80023fa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0d6      	beq.n	80022de <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002334:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fc28 	bl	8001b96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01c      	beq.n	8002386 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e5b      	ldrb	r3, [r3, #25]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d118      	bne.n	8002386 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b08      	cmp	r3, #8
 8002360:	d111      	bne.n	8002386 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002366:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1f      	ldr	r2, [pc, #124]	@ (8002408 <HAL_ADC_PollForConversion+0x1a8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d002      	beq.n	8002396 <HAL_ADC_PollForConversion+0x136>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e000      	b.n	8002398 <HAL_ADC_PollForConversion+0x138>
 8002396:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_ADC_PollForConversion+0x1ac>)
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	4293      	cmp	r3, r2
 800239e:	d008      	beq.n	80023b2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d002      	beq.n	80023b2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b09      	cmp	r3, #9
 80023b0:	d104      	bne.n	80023bc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	e00c      	b.n	80023d6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a11      	ldr	r2, [pc, #68]	@ (8002408 <HAL_ADC_PollForConversion+0x1a8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d002      	beq.n	80023cc <HAL_ADC_PollForConversion+0x16c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e000      	b.n	80023ce <HAL_ADC_PollForConversion+0x16e>
 80023cc:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <HAL_ADC_PollForConversion+0x1ac>)
 80023ce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d104      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e008      	b.n	80023f8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	220c      	movs	r2, #12
 80023f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	50040300 	.word	0x50040300
 8002408:	50040100 	.word	0x50040100
 800240c:	50040000 	.word	0x50040000

08002410 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800241c:	4853      	ldr	r0, [pc, #332]	@ (800256c <HAL_ADC_Start_DMA+0x15c>)
 800241e:	f7ff fc49 	bl	8001cb4 <LL_ADC_GetMultimode>
 8002422:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fce8 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 8093 	bne.w	800255c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_ADC_Start_DMA+0x34>
 8002440:	2302      	movs	r3, #2
 8002442:	e08e      	b.n	8002562 <HAL_ADC_Start_DMA+0x152>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a47      	ldr	r2, [pc, #284]	@ (8002570 <HAL_ADC_Start_DMA+0x160>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d008      	beq.n	8002468 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d002      	beq.n	8002468 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b09      	cmp	r3, #9
 8002466:	d172      	bne.n	800254e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fc97 	bl	8002d9c <ADC_Enable>
 800246e:	4603      	mov	r3, r0
 8002470:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002472:	7dfb      	ldrb	r3, [r7, #23]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d165      	bne.n	8002544 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a38      	ldr	r2, [pc, #224]	@ (8002574 <HAL_ADC_Start_DMA+0x164>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d002      	beq.n	800249c <HAL_ADC_Start_DMA+0x8c>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	e000      	b.n	800249e <HAL_ADC_Start_DMA+0x8e>
 800249c:	4b36      	ldr	r3, [pc, #216]	@ (8002578 <HAL_ADC_Start_DMA+0x168>)
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d002      	beq.n	80024ac <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	f023 0206 	bic.w	r2, r3, #6
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024dc:	4a27      	ldr	r2, [pc, #156]	@ (800257c <HAL_ADC_Start_DMA+0x16c>)
 80024de:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e4:	4a26      	ldr	r2, [pc, #152]	@ (8002580 <HAL_ADC_Start_DMA+0x170>)
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ec:	4a25      	ldr	r2, [pc, #148]	@ (8002584 <HAL_ADC_Start_DMA+0x174>)
 80024ee:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	221c      	movs	r2, #28
 80024f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0210 	orr.w	r2, r2, #16
 800250e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3340      	adds	r3, #64	@ 0x40
 800252a:	4619      	mov	r1, r3
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f001 fb5c 	bl	8003bec <HAL_DMA_Start_IT>
 8002534:	4603      	mov	r3, r0
 8002536:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fc4a 	bl	8001dd6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002542:	e00d      	b.n	8002560 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800254c:	e008      	b.n	8002560 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800255a:	e001      	b.n	8002560 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002560:	7dfb      	ldrb	r3, [r7, #23]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	50040300 	.word	0x50040300
 8002570:	50040200 	.word	0x50040200
 8002574:	50040100 	.word	0x50040100
 8002578:	50040000 	.word	0x50040000
 800257c:	08002ea9 	.word	0x08002ea9
 8002580:	08002f81 	.word	0x08002f81
 8002584:	08002f9d 	.word	0x08002f9d

08002588 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0b6      	sub	sp, #216	@ 0xd8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_ADC_ConfigChannel+0x22>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e3c9      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x7b6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fc09 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 83aa 	bne.w	8002d48 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d824      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	3b02      	subs	r3, #2
 800260a:	2b03      	cmp	r3, #3
 800260c:	d81b      	bhi.n	8002646 <HAL_ADC_ConfigChannel+0x8e>
 800260e:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <HAL_ADC_ConfigChannel+0x5c>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002625 	.word	0x08002625
 8002618:	0800262d 	.word	0x0800262d
 800261c:	08002635 	.word	0x08002635
 8002620:	0800263d 	.word	0x0800263d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002624:	230c      	movs	r3, #12
 8002626:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800262a:	e010      	b.n	800264e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800262c:	2312      	movs	r3, #18
 800262e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002632:	e00c      	b.n	800264e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002634:	2318      	movs	r3, #24
 8002636:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800263a:	e008      	b.n	800264e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800263c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002644:	e003      	b.n	800264e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002646:	2306      	movs	r3, #6
 8002648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800264c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800265c:	f7ff faae 	bl	8001bbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fbca 	bl	8001dfe <LL_ADC_REG_IsConversionOngoing>
 800266a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fbd6 	bl	8001e24 <LL_ADC_INJ_IsConversionOngoing>
 8002678:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 81a4 	bne.w	80029ce <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 819f 	bne.w	80029ce <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	461a      	mov	r2, r3
 800269e:	f7ff fab9 	bl	8001c14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	08db      	lsrs	r3, r3, #3
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d00a      	beq.n	80026da <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026d4:	f7ff fa0a 	bl	8001aec <LL_ADC_SetOffset>
 80026d8:	e179      	b.n	80029ce <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fa27 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x14e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa1c 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	0e9b      	lsrs	r3, r3, #26
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	e01e      	b.n	8002744 <HAL_ADC_ConfigChannel+0x18c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fa11 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002724:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002728:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800272c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e004      	b.n	8002742 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002738:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1a4>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	e018      	b.n	800278e <HAL_ADC_ConfigChannel+0x1d6>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002770:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002774:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002778:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002780:	2320      	movs	r3, #32
 8002782:	e004      	b.n	800278e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800278e:	429a      	cmp	r2, r3
 8002790:	d106      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f9e0 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f9c4 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x214>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff f9b9 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	f003 021f 	and.w	r2, r3, #31
 80027ca:	e01e      	b.n	800280a <HAL_ADC_ConfigChannel+0x252>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f9ae 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e004      	b.n	8002808 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80027fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002812:	2b00      	cmp	r3, #0
 8002814:	d105      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x26a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	e018      	b.n	8002854 <HAL_ADC_ConfigChannel+0x29c>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002836:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800283a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800283e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e004      	b.n	8002854 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800284a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002854:	429a      	cmp	r2, r3
 8002856:	d106      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2200      	movs	r2, #0
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f97d 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff f961 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x2da>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2102      	movs	r1, #2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f956 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	e01e      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x318>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2102      	movs	r1, #2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f94b 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80028b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80028b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80028c0:	2320      	movs	r3, #32
 80028c2:	e004      	b.n	80028ce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80028c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x330>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	e014      	b.n	8002912 <HAL_ADC_ConfigChannel+0x35a>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e004      	b.n	8002912 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002908:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002912:	429a      	cmp	r2, r3
 8002914:	d106      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f91e 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2103      	movs	r1, #3
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f902 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x398>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2103      	movs	r1, #3
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f8f7 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	f003 021f 	and.w	r2, r3, #31
 800294e:	e017      	b.n	8002980 <HAL_ADC_ConfigChannel+0x3c8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2103      	movs	r1, #3
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f8ec 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 800295c:	4603      	mov	r3, r0
 800295e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800296c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e003      	b.n	800297e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x3e0>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	e011      	b.n	80029bc <HAL_ADC_ConfigChannel+0x404>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80029a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80029aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e003      	b.n	80029bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2103      	movs	r1, #3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f8c9 	bl	8001b60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f9ec 	bl	8001db0 <LL_ADC_IsEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 8140 	bne.w	8002c60 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f7ff f93d 	bl	8001c6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	4a8f      	ldr	r2, [pc, #572]	@ (8002c34 <HAL_ADC_ConfigChannel+0x67c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	f040 8131 	bne.w	8002c60 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x46e>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0e9b      	lsrs	r3, r3, #26
 8002a14:	3301      	adds	r3, #1
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	bf94      	ite	ls
 8002a1e:	2301      	movls	r3, #1
 8002a20:	2300      	movhi	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e019      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x4a2>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d079      	beq.n	8002b52 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x4c2>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0e9b      	lsrs	r3, r3, #26
 8002a70:	3301      	adds	r3, #1
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a78:	e015      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x4ee>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	069b      	lsls	r3, r3, #26
 8002aa2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x50e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	e017      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x53e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e003      	b.n	8002aea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	ea42 0103 	orr.w	r1, r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x564>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	051b      	lsls	r3, r3, #20
 8002b1a:	e018      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x596>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 021f 	and.w	r2, r3, #31
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	e081      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d107      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x5b6>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	3301      	adds	r3, #1
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6c:	e015      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x5e2>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e003      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	069b      	lsls	r3, r3, #26
 8002b96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x602>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	e017      	b.n	8002bea <HAL_ADC_ConfigChannel+0x632>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	61bb      	str	r3, [r7, #24]
  return result;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2101      	movs	r1, #1
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	ea42 0103 	orr.w	r1, r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x65e>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	3301      	adds	r3, #1
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b1e      	subs	r3, #30
 8002c0e:	051b      	lsls	r3, r3, #20
 8002c10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	e01e      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x69c>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	60fb      	str	r3, [r7, #12]
  return result;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e006      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x688>
 8002c32:	bf00      	nop
 8002c34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	f003 021f 	and.w	r2, r3, #31
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b1e      	subs	r3, #30
 8002c4e:	051b      	lsls	r3, r3, #20
 8002c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fe ffda 	bl	8001c14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d07a      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c6c:	4843      	ldr	r0, [pc, #268]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c6e:	f7fe ff2f 	bl	8001ad0 <LL_ADC_GetCommonPathInternalCh>
 8002c72:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d12c      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d126      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a3c      	ldr	r2, [pc, #240]	@ (8002d84 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d004      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x6e8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d88 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d15d      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ca4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4834      	ldr	r0, [pc, #208]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7c4>)
 8002cac:	f7fe fefd 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb0:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <HAL_ADC_ConfigChannel+0x7d4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	4a36      	ldr	r2, [pc, #216]	@ (8002d90 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cca:	e002      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f9      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd8:	e040      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2d      	ldr	r2, [pc, #180]	@ (8002d94 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d118      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d112      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a23      	ldr	r2, [pc, #140]	@ (8002d84 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x74c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a22      	ldr	r2, [pc, #136]	@ (8002d88 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d12d      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	481b      	ldr	r0, [pc, #108]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d10:	f7fe fecb 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d14:	e024      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d98 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d120      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d11a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a14      	ldr	r2, [pc, #80]	@ (8002d84 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d115      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480e      	ldr	r0, [pc, #56]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d42:	f7fe feb2 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
 8002d46:	e00c      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d5a:	e002      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	37d8      	adds	r7, #216	@ 0xd8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	80080000 	.word	0x80080000
 8002d7c:	50040300 	.word	0x50040300
 8002d80:	c7520000 	.word	0xc7520000
 8002d84:	50040000 	.word	0x50040000
 8002d88:	50040200 	.word	0x50040200
 8002d8c:	20000018 	.word	0x20000018
 8002d90:	053e2d63 	.word	0x053e2d63
 8002d94:	cb840000 	.word	0xcb840000
 8002d98:	80000001 	.word	0x80000001

08002d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe ffff 	bl	8001db0 <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d169      	bne.n	8002e8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <ADC_Enable+0xfc>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dca:	f043 0210 	orr.w	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	f043 0201 	orr.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e055      	b.n	8002e8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe ffce 	bl	8001d88 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dec:	482b      	ldr	r0, [pc, #172]	@ (8002e9c <ADC_Enable+0x100>)
 8002dee:	f7fe fe6f 	bl	8001ad0 <LL_ADC_GetCommonPathInternalCh>
 8002df2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002df4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dfc:	4b28      	ldr	r3, [pc, #160]	@ (8002ea0 <ADC_Enable+0x104>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	4a28      	ldr	r2, [pc, #160]	@ (8002ea4 <ADC_Enable+0x108>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e16:	e002      	b.n	8002e1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e24:	f7fe fdfe 	bl	8001a24 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e2a:	e028      	b.n	8002e7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe ffbd 	bl	8001db0 <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d104      	bne.n	8002e46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe ffa1 	bl	8001d88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e46:	f7fe fded 	bl	8001a24 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d914      	bls.n	8002e7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00d      	beq.n	8002e7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e66:	f043 0210 	orr.w	r2, r3, #16
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e72:	f043 0201 	orr.w	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e007      	b.n	8002e8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1cf      	bne.n	8002e2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	8000003f 	.word	0x8000003f
 8002e9c:	50040300 	.word	0x50040300
 8002ea0:	20000018 	.word	0x20000018
 8002ea4:	053e2d63 	.word	0x053e2d63

08002ea8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d14b      	bne.n	8002f5a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d021      	beq.n	8002f20 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fe58 	bl	8001b96 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d032      	beq.n	8002f52 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d12b      	bne.n	8002f52 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11f      	bne.n	8002f52 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f1e:	e018      	b.n	8002f52 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d111      	bne.n	8002f52 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7fd fd46 	bl	80009e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f58:	e00e      	b.n	8002f78 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff fb1b 	bl	80025a2 <HAL_ADC_ErrorCallback>
}
 8002f6c:	e004      	b.n	8002f78 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7fd fd18 	bl	80009c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff faed 	bl	80025a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <LL_ADC_IsEnabled>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <LL_ADC_IsEnabled+0x18>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <LL_ADC_IsEnabled+0x1a>
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d101      	bne.n	800300e <LL_ADC_REG_IsConversionOngoing+0x18>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b09f      	sub	sp, #124	@ 0x7c
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003036:	2302      	movs	r3, #2
 8003038:	e093      	b.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003042:	2300      	movs	r3, #0
 8003044:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003046:	2300      	movs	r3, #0
 8003048:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a47      	ldr	r2, [pc, #284]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d102      	bne.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003054:	4b46      	ldr	r3, [pc, #280]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	e001      	b.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	f043 0220 	orr.w	r2, r3, #32
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e072      	b.n	8003162 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ffb9 	bl	8002ff6 <LL_ADC_REG_IsConversionOngoing>
 8003084:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ffb3 	bl	8002ff6 <LL_ADC_REG_IsConversionOngoing>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d154      	bne.n	8003140 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003098:	2b00      	cmp	r3, #0
 800309a:	d151      	bne.n	8003140 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800309c:	4b35      	ldr	r3, [pc, #212]	@ (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800309e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02c      	beq.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030ba:	035b      	lsls	r3, r3, #13
 80030bc:	430b      	orrs	r3, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c4:	4829      	ldr	r0, [pc, #164]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030c6:	f7ff ff83 	bl	8002fd0 <LL_ADC_IsEnabled>
 80030ca:	4604      	mov	r4, r0
 80030cc:	4828      	ldr	r0, [pc, #160]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030ce:	f7ff ff7f 	bl	8002fd0 <LL_ADC_IsEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	431c      	orrs	r4, r3
 80030d6:	4828      	ldr	r0, [pc, #160]	@ (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030d8:	f7ff ff7a 	bl	8002fd0 <LL_ADC_IsEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	4323      	orrs	r3, r4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d137      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030ec:	f023 030f 	bic.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	6811      	ldr	r1, [r2, #0]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6892      	ldr	r2, [r2, #8]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	431a      	orrs	r2, r3
 80030fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003100:	e028      	b.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800310a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800310c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800310e:	4817      	ldr	r0, [pc, #92]	@ (800316c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003110:	f7ff ff5e 	bl	8002fd0 <LL_ADC_IsEnabled>
 8003114:	4604      	mov	r4, r0
 8003116:	4816      	ldr	r0, [pc, #88]	@ (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003118:	f7ff ff5a 	bl	8002fd0 <LL_ADC_IsEnabled>
 800311c:	4603      	mov	r3, r0
 800311e:	431c      	orrs	r4, r3
 8003120:	4815      	ldr	r0, [pc, #84]	@ (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003122:	f7ff ff55 	bl	8002fd0 <LL_ADC_IsEnabled>
 8003126:	4603      	mov	r3, r0
 8003128:	4323      	orrs	r3, r4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d112      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800312e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003136:	f023 030f 	bic.w	r3, r3, #15
 800313a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800313c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800313e:	e009      	b.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003152:	e000      	b.n	8003156 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003154:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800315e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003162:	4618      	mov	r0, r3
 8003164:	377c      	adds	r7, #124	@ 0x7c
 8003166:	46bd      	mov	sp, r7
 8003168:	bd90      	pop	{r4, r7, pc}
 800316a:	bf00      	nop
 800316c:	50040000 	.word	0x50040000
 8003170:	50040100 	.word	0x50040100
 8003174:	50040300 	.word	0x50040300
 8003178:	50040200 	.word	0x50040200

0800317c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800318c:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003198:	4013      	ands	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ae:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <__NVIC_SetPriorityGrouping+0x44>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	60d3      	str	r3, [r2, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <__NVIC_GetPriorityGrouping+0x18>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	f003 0307 	and.w	r3, r3, #7
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	db0b      	blt.n	800320a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	4907      	ldr	r1, [pc, #28]	@ (8003218 <__NVIC_EnableIRQ+0x38>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2001      	movs	r0, #1
 8003202:	fa00 f202 	lsl.w	r2, r0, r2
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e100 	.word	0xe000e100

0800321c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322c:	2b00      	cmp	r3, #0
 800322e:	db0a      	blt.n	8003246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	490c      	ldr	r1, [pc, #48]	@ (8003268 <__NVIC_SetPriority+0x4c>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	0112      	lsls	r2, r2, #4
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	440b      	add	r3, r1
 8003240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003244:	e00a      	b.n	800325c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4908      	ldr	r1, [pc, #32]	@ (800326c <__NVIC_SetPriority+0x50>)
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	3b04      	subs	r3, #4
 8003254:	0112      	lsls	r2, r2, #4
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	440b      	add	r3, r1
 800325a:	761a      	strb	r2, [r3, #24]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000e100 	.word	0xe000e100
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	@ 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f1c3 0307 	rsb	r3, r3, #7
 800328a:	2b04      	cmp	r3, #4
 800328c:	bf28      	it	cs
 800328e:	2304      	movcs	r3, #4
 8003290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3304      	adds	r3, #4
 8003296:	2b06      	cmp	r3, #6
 8003298:	d902      	bls.n	80032a0 <NVIC_EncodePriority+0x30>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3b03      	subs	r3, #3
 800329e:	e000      	b.n	80032a2 <NVIC_EncodePriority+0x32>
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	401a      	ands	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43d9      	mvns	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	4313      	orrs	r3, r2
         );
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3724      	adds	r7, #36	@ 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ff4c 	bl	800317c <__NVIC_SetPriorityGrouping>
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032fe:	f7ff ff61 	bl	80031c4 <__NVIC_GetPriorityGrouping>
 8003302:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	6978      	ldr	r0, [r7, #20]
 800330a:	f7ff ffb1 	bl	8003270 <NVIC_EncodePriority>
 800330e:	4602      	mov	r2, r0
 8003310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff80 	bl	800321c <__NVIC_SetPriority>
}
 800331c:	bf00      	nop
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff54 	bl	80031e0 <__NVIC_EnableIRQ>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e014      	b.n	800337c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	791b      	ldrb	r3, [r3, #4]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe f8a4 	bl	80014b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	795b      	ldrb	r3, [r3, #5]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_DAC_Start+0x16>
 8003396:	2302      	movs	r3, #2
 8003398:	e03b      	b.n	8003412 <HAL_DAC_Start+0x8e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2201      	movs	r2, #1
 80033b4:	409a      	lsls	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d118      	bne.n	8003404 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	e00f      	b.n	8003404 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80033ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f2:	d107      	bne.n	8003404 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0202 	orr.w	r2, r2, #2
 8003402:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	795b      	ldrb	r3, [r3, #5]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_DAC_Start_DMA+0x1e>
 800343a:	2302      	movs	r3, #2
 800343c:	e0ab      	b.n	8003596 <HAL_DAC_Start_DMA+0x176>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2202      	movs	r2, #2
 8003448:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d12f      	bne.n	80034b0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_DAC_Start_DMA+0x180>)
 8003456:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a51      	ldr	r2, [pc, #324]	@ (80035a4 <HAL_DAC_Start_DMA+0x184>)
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a50      	ldr	r2, [pc, #320]	@ (80035a8 <HAL_DAC_Start_DMA+0x188>)
 8003466:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003476:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d013      	beq.n	80034a6 <HAL_DAC_Start_DMA+0x86>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d845      	bhi.n	8003510 <HAL_DAC_Start_DMA+0xf0>
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_DAC_Start_DMA+0x72>
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d005      	beq.n	800349c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003490:	e03e      	b.n	8003510 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3308      	adds	r3, #8
 8003498:	613b      	str	r3, [r7, #16]
        break;
 800349a:	e03c      	b.n	8003516 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	330c      	adds	r3, #12
 80034a2:	613b      	str	r3, [r7, #16]
        break;
 80034a4:	e037      	b.n	8003516 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3310      	adds	r3, #16
 80034ac:	613b      	str	r3, [r7, #16]
        break;
 80034ae:	e032      	b.n	8003516 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a3d      	ldr	r2, [pc, #244]	@ (80035ac <HAL_DAC_Start_DMA+0x18c>)
 80034b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4a3c      	ldr	r2, [pc, #240]	@ (80035b0 <HAL_DAC_Start_DMA+0x190>)
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a3b      	ldr	r2, [pc, #236]	@ (80035b4 <HAL_DAC_Start_DMA+0x194>)
 80034c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80034d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d013      	beq.n	8003506 <HAL_DAC_Start_DMA+0xe6>
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d817      	bhi.n	8003514 <HAL_DAC_Start_DMA+0xf4>
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_DAC_Start_DMA+0xd2>
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d005      	beq.n	80034fc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80034f0:	e010      	b.n	8003514 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	613b      	str	r3, [r7, #16]
        break;
 80034fa:	e00c      	b.n	8003516 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3318      	adds	r3, #24
 8003502:	613b      	str	r3, [r7, #16]
        break;
 8003504:	e007      	b.n	8003516 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	331c      	adds	r3, #28
 800350c:	613b      	str	r3, [r7, #16]
        break;
 800350e:	e002      	b.n	8003516 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003514:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d111      	bne.n	8003540 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800352a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6898      	ldr	r0, [r3, #8]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	f000 fb59 	bl	8003bec <HAL_DMA_Start_IT>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]
 800353e:	e010      	b.n	8003562 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800354e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68d8      	ldr	r0, [r3, #12]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	f000 fb47 	bl	8003bec <HAL_DMA_Start_IT>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2201      	movs	r2, #1
 800357c:	409a      	lsls	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e005      	b.n	8003594 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f043 0204 	orr.w	r2, r3, #4
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003594:	7dfb      	ldrb	r3, [r7, #23]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	08003955 	.word	0x08003955
 80035a4:	08003977 	.word	0x08003977
 80035a8:	08003993 	.word	0x08003993
 80035ac:	08003a11 	.word	0x08003a11
 80035b0:	08003a33 	.word	0x08003a33
 80035b4:	08003a4f 	.word	0x08003a4f

080035b8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ce:	d120      	bne.n	8003612 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035de:	d118      	bne.n	8003612 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f043 0201 	orr.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800360a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f870 	bl	80036f2 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800361c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003620:	d120      	bne.n	8003664 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003630:	d118      	bne.n	8003664 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2204      	movs	r2, #4
 8003636:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f043 0202 	orr.w	r2, r3, #2
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800365c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9cc 	bl	80039fc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	3308      	adds	r3, #8
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e004      	b.n	80036a0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	3314      	adds	r3, #20
 800369e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	461a      	mov	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b088      	sub	sp, #32
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	795b      	ldrb	r3, [r3, #5]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_DAC_ConfigChannel+0x1c>
 800371e:	2302      	movs	r3, #2
 8003720:	e114      	b.n	800394c <HAL_DAC_ConfigChannel+0x246>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2202      	movs	r2, #2
 800372c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b04      	cmp	r3, #4
 8003734:	f040 8081 	bne.w	800383a <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003738:	f7fe f974 	bl	8001a24 <HAL_GetTick>
 800373c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d140      	bne.n	80037c6 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003744:	e018      	b.n	8003778 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003746:	f7fe f96d 	bl	8001a24 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d911      	bls.n	8003778 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2203      	movs	r2, #3
 8003772:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0e9      	b.n	800394c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1df      	bne.n	8003746 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003786:	2001      	movs	r0, #1
 8003788:	f7fe f958 	bl	8001a3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	6992      	ldr	r2, [r2, #24]
 8003794:	641a      	str	r2, [r3, #64]	@ 0x40
 8003796:	e023      	b.n	80037e0 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003798:	f7fe f944 	bl	8001a24 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d90f      	bls.n	80037c6 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	da0a      	bge.n	80037c6 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f043 0208 	orr.w	r2, r3, #8
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2203      	movs	r2, #3
 80037c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0c2      	b.n	800394c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	dbe3      	blt.n	8003798 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fe f933 	bl	8001a3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	6992      	ldr	r2, [r2, #24]
 80037de:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	ea02 0103 	and.w	r1, r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	409a      	lsls	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	21ff      	movs	r1, #255	@ 0xff
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	ea02 0103 	and.w	r1, r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	409a      	lsls	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d11d      	bne.n	800387e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	221f      	movs	r2, #31
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2207      	movs	r2, #7
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6819      	ldr	r1, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	22c0      	movs	r2, #192	@ 0xc0
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43da      	mvns	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	400a      	ands	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff fea7 	bl	80036b6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	711a      	strb	r2, [r3, #4]
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fea0 	bl	80036ca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fe96 	bl	80036de <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	711a      	strb	r2, [r3, #4]
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff ffce 	bl	80039c0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	711a      	strb	r2, [r3, #4]
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff ffc7 	bl	80039d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f043 0204 	orr.w	r2, r3, #4
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff ffbd 	bl	80039e8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	711a      	strb	r2, [r3, #4]
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e098      	b.n	8003bc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b4d      	ldr	r3, [pc, #308]	@ (8003bcc <HAL_DMA_Init+0x150>)
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d80f      	bhi.n	8003aba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd0 <HAL_DMA_Init+0x154>)
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd4 <HAL_DMA_Init+0x158>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	009a      	lsls	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a48      	ldr	r2, [pc, #288]	@ (8003bd8 <HAL_DMA_Init+0x15c>)
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ab8:	e00e      	b.n	8003ad8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b46      	ldr	r3, [pc, #280]	@ (8003bdc <HAL_DMA_Init+0x160>)
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a43      	ldr	r2, [pc, #268]	@ (8003bd4 <HAL_DMA_Init+0x158>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	009a      	lsls	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a42      	ldr	r2, [pc, #264]	@ (8003be0 <HAL_DMA_Init+0x164>)
 8003ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b32:	d039      	beq.n	8003ba8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	4a27      	ldr	r2, [pc, #156]	@ (8003bd8 <HAL_DMA_Init+0x15c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d11a      	bne.n	8003b74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b3e:	4b29      	ldr	r3, [pc, #164]	@ (8003be4 <HAL_DMA_Init+0x168>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f003 031c 	and.w	r3, r3, #28
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	4924      	ldr	r1, [pc, #144]	@ (8003be4 <HAL_DMA_Init+0x168>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b58:	4b22      	ldr	r3, [pc, #136]	@ (8003be4 <HAL_DMA_Init+0x168>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6859      	ldr	r1, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b64:	f003 031c 	and.w	r3, r3, #28
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	491d      	ldr	r1, [pc, #116]	@ (8003be4 <HAL_DMA_Init+0x168>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
 8003b72:	e019      	b.n	8003ba8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b74:	4b1c      	ldr	r3, [pc, #112]	@ (8003be8 <HAL_DMA_Init+0x16c>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	f003 031c 	and.w	r3, r3, #28
 8003b80:	210f      	movs	r1, #15
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	4917      	ldr	r1, [pc, #92]	@ (8003be8 <HAL_DMA_Init+0x16c>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b8e:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <HAL_DMA_Init+0x16c>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6859      	ldr	r1, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	f003 031c 	and.w	r3, r3, #28
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	4911      	ldr	r1, [pc, #68]	@ (8003be8 <HAL_DMA_Init+0x16c>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40020407 	.word	0x40020407
 8003bd0:	bffdfff8 	.word	0xbffdfff8
 8003bd4:	cccccccd 	.word	0xcccccccd
 8003bd8:	40020000 	.word	0x40020000
 8003bdc:	bffdfbf8 	.word	0xbffdfbf8
 8003be0:	40020400 	.word	0x40020400
 8003be4:	400200a8 	.word	0x400200a8
 8003be8:	400204a8 	.word	0x400204a8

08003bec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_DMA_Start_IT+0x20>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e04b      	b.n	8003ca4 <HAL_DMA_Start_IT+0xb8>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d13a      	bne.n	8003c96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f8e0 	bl	8003e0a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 020e 	orr.w	r2, r2, #14
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e00f      	b.n	8003c84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 020a 	orr.w	r2, r2, #10
 8003c82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e005      	b.n	8003ca2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc8:	f003 031c 	and.w	r3, r3, #28
 8003ccc:	2204      	movs	r2, #4
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d026      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x7a>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d021      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d04:	f003 021c 	and.w	r2, r3, #28
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	2104      	movs	r1, #4
 8003d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d12:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d071      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d24:	e06c      	b.n	8003e00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f003 031c 	and.w	r3, r3, #28
 8003d2e:	2202      	movs	r2, #2
 8003d30:	409a      	lsls	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d02e      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xec>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d029      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 020a 	bic.w	r2, r2, #10
 8003d60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f003 021c 	and.w	r2, r3, #28
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	2102      	movs	r1, #2
 8003d78:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d038      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d96:	e033      	b.n	8003e00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	f003 031c 	and.w	r3, r3, #28
 8003da0:	2208      	movs	r2, #8
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d02a      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x156>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d025      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 020e 	bic.w	r2, r2, #14
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f003 021c 	and.w	r2, r3, #28
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
}
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	f003 021c 	and.w	r2, r3, #28
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d108      	bne.n	8003e4e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e4c:	e007      	b.n	8003e5e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e7a:	e17f      	b.n	800417c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2101      	movs	r1, #1
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8171 	beq.w	8004176 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d005      	beq.n	8003eac <HAL_GPIO_Init+0x40>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d130      	bne.n	8003f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 0201 	and.w	r2, r3, #1
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d118      	bne.n	8003f4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f20:	2201      	movs	r2, #1
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	08db      	lsrs	r3, r3, #3
 8003f36:	f003 0201 	and.w	r2, r3, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d017      	beq.n	8003f88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d123      	bne.n	8003fdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	08da      	lsrs	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0203 	and.w	r2, r3, #3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80ac 	beq.w	8004176 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	4b5f      	ldr	r3, [pc, #380]	@ (800419c <HAL_GPIO_Init+0x330>)
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	4a5e      	ldr	r2, [pc, #376]	@ (800419c <HAL_GPIO_Init+0x330>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6613      	str	r3, [r2, #96]	@ 0x60
 800402a:	4b5c      	ldr	r3, [pc, #368]	@ (800419c <HAL_GPIO_Init+0x330>)
 800402c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004036:	4a5a      	ldr	r2, [pc, #360]	@ (80041a0 <HAL_GPIO_Init+0x334>)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004060:	d025      	beq.n	80040ae <HAL_GPIO_Init+0x242>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4f      	ldr	r2, [pc, #316]	@ (80041a4 <HAL_GPIO_Init+0x338>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <HAL_GPIO_Init+0x23e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4e      	ldr	r2, [pc, #312]	@ (80041a8 <HAL_GPIO_Init+0x33c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d019      	beq.n	80040a6 <HAL_GPIO_Init+0x23a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4d      	ldr	r2, [pc, #308]	@ (80041ac <HAL_GPIO_Init+0x340>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_GPIO_Init+0x236>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4c      	ldr	r2, [pc, #304]	@ (80041b0 <HAL_GPIO_Init+0x344>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00d      	beq.n	800409e <HAL_GPIO_Init+0x232>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4b      	ldr	r2, [pc, #300]	@ (80041b4 <HAL_GPIO_Init+0x348>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x22e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4a      	ldr	r2, [pc, #296]	@ (80041b8 <HAL_GPIO_Init+0x34c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_GPIO_Init+0x22a>
 8004092:	2306      	movs	r3, #6
 8004094:	e00c      	b.n	80040b0 <HAL_GPIO_Init+0x244>
 8004096:	2307      	movs	r3, #7
 8004098:	e00a      	b.n	80040b0 <HAL_GPIO_Init+0x244>
 800409a:	2305      	movs	r3, #5
 800409c:	e008      	b.n	80040b0 <HAL_GPIO_Init+0x244>
 800409e:	2304      	movs	r3, #4
 80040a0:	e006      	b.n	80040b0 <HAL_GPIO_Init+0x244>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e004      	b.n	80040b0 <HAL_GPIO_Init+0x244>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e002      	b.n	80040b0 <HAL_GPIO_Init+0x244>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_GPIO_Init+0x244>
 80040ae:	2300      	movs	r3, #0
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	f002 0203 	and.w	r2, r2, #3
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	4093      	lsls	r3, r2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040c0:	4937      	ldr	r1, [pc, #220]	@ (80041a0 <HAL_GPIO_Init+0x334>)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	3302      	adds	r3, #2
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040ce:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <HAL_GPIO_Init+0x350>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040f2:	4a32      	ldr	r2, [pc, #200]	@ (80041bc <HAL_GPIO_Init+0x350>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040f8:	4b30      	ldr	r3, [pc, #192]	@ (80041bc <HAL_GPIO_Init+0x350>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800411c:	4a27      	ldr	r2, [pc, #156]	@ (80041bc <HAL_GPIO_Init+0x350>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004122:	4b26      	ldr	r3, [pc, #152]	@ (80041bc <HAL_GPIO_Init+0x350>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004146:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <HAL_GPIO_Init+0x350>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_GPIO_Init+0x350>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004170:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <HAL_GPIO_Init+0x350>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3301      	adds	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f47f ae78 	bne.w	8003e7c <HAL_GPIO_Init+0x10>
  }
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	40010000 	.word	0x40010000
 80041a4:	48000400 	.word	0x48000400
 80041a8:	48000800 	.word	0x48000800
 80041ac:	48000c00 	.word	0x48000c00
 80041b0:	48001000 	.word	0x48001000
 80041b4:	48001400 	.word	0x48001400
 80041b8:	48001800 	.word	0x48001800
 80041bc:	40010400 	.word	0x40010400

080041c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	e001      	b.n	80041e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
 80041fc:	4613      	mov	r3, r2
 80041fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004200:	787b      	ldrb	r3, [r7, #1]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800420c:	e002      	b.n	8004214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4013      	ands	r3, r2
 8004238:	041a      	lsls	r2, r3, #16
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	43d9      	mvns	r1, r3
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	400b      	ands	r3, r1
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	619a      	str	r2, [r3, #24]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0c3      	b.n	80043f2 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b05      	cmp	r3, #5
 8004274:	d101      	bne.n	800427a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0bb      	b.n	80043f2 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d101      	bne.n	800428a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0b3      	b.n	80043f2 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd f978 	bl	800159c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042ba:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d11b      	bne.n	80042fc <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 80042ce:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6891      	ldr	r1, [r2, #8]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68d2      	ldr	r2, [r2, #12]
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6992      	ldr	r2, [r2, #24]
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6912      	ldr	r2, [r2, #16]
 80042e6:	4311      	orrs	r1, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6952      	ldr	r2, [r2, #20]
 80042ec:	4311      	orrs	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	69d2      	ldr	r2, [r2, #28]
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	d115      	bne.n	8004330 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 800430e:	f023 030e 	bic.w	r3, r3, #14
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6891      	ldr	r1, [r2, #8]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	4311      	orrs	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6952      	ldr	r2, [r2, #20]
 8004320:	4311      	orrs	r1, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	69d2      	ldr	r2, [r2, #28]
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	430b      	orrs	r3, r1
 800432e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d118      	bne.n	800436a <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 8004342:	f023 030e 	bic.w	r3, r3, #14
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6891      	ldr	r1, [r2, #8]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6912      	ldr	r2, [r2, #16]
 8004354:	4311      	orrs	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6952      	ldr	r2, [r2, #20]
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	69d2      	ldr	r2, [r2, #28]
 8004360:	4311      	orrs	r1, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	430b      	orrs	r3, r1
 8004368:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004372:	d12a      	bne.n	80043ca <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d013      	beq.n	80043a4 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004386:	4313      	orrs	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004394:	f023 031f 	bic.w	r3, r3, #31
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	430b      	orrs	r3, r1
 80043a0:	6053      	str	r3, [r2, #4]
 80043a2:	e012      	b.n	80043ca <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80043bc:	f023 031f 	bic.w	r3, r3, #31
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	430b      	orrs	r3, r1
 80043c8:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 80043ca:	4b0c      	ldr	r3, [pc, #48]	@ (80043fc <HAL_OPAMP_Init+0x1a8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4909      	ldr	r1, [pc, #36]	@ (80043fc <HAL_OPAMP_Init+0x1a8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d103      	bne.n	80043f0 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40007800 	.word	0x40007800

08004400 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	e01d      	b.n	8004454 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b05      	cmp	r3, #5
 8004422:	d102      	bne.n	800442a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	e014      	b.n	8004454 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d10c      	bne.n	8004450 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800444e:	e001      	b.n	8004454 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004468:	4b04      	ldr	r3, [pc, #16]	@ (800447c <HAL_PWREx_GetVoltageRange+0x18>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40007000 	.word	0x40007000

08004480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448e:	d130      	bne.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004490:	4b23      	ldr	r3, [pc, #140]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800449c:	d038      	beq.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800449e:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2232      	movs	r2, #50	@ 0x32
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004528 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	0c9b      	lsrs	r3, r3, #18
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044c4:	e002      	b.n	80044cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d8:	d102      	bne.n	80044e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f2      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ec:	d110      	bne.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e00f      	b.n	8004512 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d007      	beq.n	8004510 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004500:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004508:	4a05      	ldr	r2, [pc, #20]	@ (8004520 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800450a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800450e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40007000 	.word	0x40007000
 8004524:	20000018 	.word	0x20000018
 8004528:	431bde83 	.word	0x431bde83

0800452c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e3ca      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800453e:	4b97      	ldr	r3, [pc, #604]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004548:	4b94      	ldr	r3, [pc, #592]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80e4 	beq.w	8004728 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_RCC_OscConfig+0x4a>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	f040 808b 	bne.w	8004684 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 8087 	bne.w	8004684 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004576:	4b89      	ldr	r3, [pc, #548]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_RCC_OscConfig+0x62>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e3a2      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	4b82      	ldr	r3, [pc, #520]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <HAL_RCC_OscConfig+0x7c>
 800459e:	4b7f      	ldr	r3, [pc, #508]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045a6:	e005      	b.n	80045b4 <HAL_RCC_OscConfig+0x88>
 80045a8:	4b7c      	ldr	r3, [pc, #496]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d223      	bcs.n	8004600 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fd87 	bl	80050d0 <RCC_SetFlashLatencyFromMSIRange>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e383      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045cc:	4b73      	ldr	r3, [pc, #460]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a72      	ldr	r2, [pc, #456]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045d2:	f043 0308 	orr.w	r3, r3, #8
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b70      	ldr	r3, [pc, #448]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	496d      	ldr	r1, [pc, #436]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ea:	4b6c      	ldr	r3, [pc, #432]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	4968      	ldr	r1, [pc, #416]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
 80045fe:	e025      	b.n	800464c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004600:	4b66      	ldr	r3, [pc, #408]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a65      	ldr	r2, [pc, #404]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004606:	f043 0308 	orr.w	r3, r3, #8
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	4b63      	ldr	r3, [pc, #396]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4960      	ldr	r1, [pc, #384]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800461e:	4b5f      	ldr	r3, [pc, #380]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	495b      	ldr	r1, [pc, #364]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fd47 	bl	80050d0 <RCC_SetFlashLatencyFromMSIRange>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e343      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800464c:	f000 fc4a 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b52      	ldr	r3, [pc, #328]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	4950      	ldr	r1, [pc, #320]	@ (80047a0 <HAL_RCC_OscConfig+0x274>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
 8004668:	4a4e      	ldr	r2, [pc, #312]	@ (80047a4 <HAL_RCC_OscConfig+0x278>)
 800466a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800466c:	4b4e      	ldr	r3, [pc, #312]	@ (80047a8 <HAL_RCC_OscConfig+0x27c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd f865 	bl	8001740 <HAL_InitTick>
 8004676:	4603      	mov	r3, r0
 8004678:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d052      	beq.n	8004726 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	e327      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d032      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800468c:	4b43      	ldr	r3, [pc, #268]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a42      	ldr	r2, [pc, #264]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004698:	f7fd f9c4 	bl	8001a24 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046a0:	f7fd f9c0 	bl	8001a24 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e310      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046b2:	4b3a      	ldr	r3, [pc, #232]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046be:	4b37      	ldr	r3, [pc, #220]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a36      	ldr	r2, [pc, #216]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046c4:	f043 0308 	orr.w	r3, r3, #8
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b34      	ldr	r3, [pc, #208]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	4931      	ldr	r1, [pc, #196]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046dc:	4b2f      	ldr	r3, [pc, #188]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	492c      	ldr	r1, [pc, #176]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
 80046f0:	e01a      	b.n	8004728 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046f2:	4b2a      	ldr	r3, [pc, #168]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a29      	ldr	r2, [pc, #164]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046fe:	f7fd f991 	bl	8001a24 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004706:	f7fd f98d 	bl	8001a24 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e2dd      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004718:	4b20      	ldr	r3, [pc, #128]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x1da>
 8004724:	e000      	b.n	8004728 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004726:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d074      	beq.n	800481e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b08      	cmp	r3, #8
 8004738:	d005      	beq.n	8004746 <HAL_RCC_OscConfig+0x21a>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d10e      	bne.n	800475e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d10b      	bne.n	800475e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004746:	4b15      	ldr	r3, [pc, #84]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d064      	beq.n	800481c <HAL_RCC_OscConfig+0x2f0>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d160      	bne.n	800481c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e2ba      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x24a>
 8004768:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0b      	ldr	r2, [pc, #44]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800476e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	e026      	b.n	80047c4 <HAL_RCC_OscConfig+0x298>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800477e:	d115      	bne.n	80047ac <HAL_RCC_OscConfig+0x280>
 8004780:	4b06      	ldr	r3, [pc, #24]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a05      	ldr	r2, [pc, #20]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a02      	ldr	r2, [pc, #8]	@ (800479c <HAL_RCC_OscConfig+0x270>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e014      	b.n	80047c4 <HAL_RCC_OscConfig+0x298>
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	08007a64 	.word	0x08007a64
 80047a4:	20000018 	.word	0x20000018
 80047a8:	2000001c 	.word	0x2000001c
 80047ac:	4ba0      	ldr	r3, [pc, #640]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a9f      	ldr	r2, [pc, #636]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80047b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	4b9d      	ldr	r3, [pc, #628]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a9c      	ldr	r2, [pc, #624]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80047be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d013      	beq.n	80047f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fd f92a 	bl	8001a24 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fd f926 	bl	8001a24 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	@ 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e276      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047e6:	4b92      	ldr	r3, [pc, #584]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x2a8>
 80047f2:	e014      	b.n	800481e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fd f916 	bl	8001a24 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047fc:	f7fd f912 	bl	8001a24 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	@ 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e262      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800480e:	4b88      	ldr	r3, [pc, #544]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x2d0>
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d060      	beq.n	80048ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d005      	beq.n	800483c <HAL_RCC_OscConfig+0x310>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b0c      	cmp	r3, #12
 8004834:	d119      	bne.n	800486a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d116      	bne.n	800486a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800483c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_OscConfig+0x328>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e23f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004854:	4b76      	ldr	r3, [pc, #472]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	061b      	lsls	r3, r3, #24
 8004862:	4973      	ldr	r1, [pc, #460]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004864:	4313      	orrs	r3, r2
 8004866:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004868:	e040      	b.n	80048ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d023      	beq.n	80048ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004872:	4b6f      	ldr	r3, [pc, #444]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a6e      	ldr	r2, [pc, #440]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7fd f8d1 	bl	8001a24 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004886:	f7fd f8cd 	bl	8001a24 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e21d      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004898:	4b65      	ldr	r3, [pc, #404]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a4:	4b62      	ldr	r3, [pc, #392]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	495f      	ldr	r1, [pc, #380]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
 80048b8:	e018      	b.n	80048ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a5c      	ldr	r2, [pc, #368]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80048c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fd f8ad 	bl	8001a24 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ce:	f7fd f8a9 	bl	8001a24 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1f9      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048e0:	4b53      	ldr	r3, [pc, #332]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f0      	bne.n	80048ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d03c      	beq.n	8004972 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004900:	4b4b      	ldr	r3, [pc, #300]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004906:	4a4a      	ldr	r2, [pc, #296]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fd f888 	bl	8001a24 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004918:	f7fd f884 	bl	8001a24 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1d4      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800492a:	4b41      	ldr	r3, [pc, #260]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ef      	beq.n	8004918 <HAL_RCC_OscConfig+0x3ec>
 8004938:	e01b      	b.n	8004972 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 800493c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004940:	4a3b      	ldr	r2, [pc, #236]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fd f86b 	bl	8001a24 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004952:	f7fd f867 	bl	8001a24 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e1b7      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004964:	4b32      	ldr	r3, [pc, #200]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ef      	bne.n	8004952 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80a6 	beq.w	8004acc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004980:	2300      	movs	r3, #0
 8004982:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004984:	4b2a      	ldr	r3, [pc, #168]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10d      	bne.n	80049ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004990:	4b27      	ldr	r3, [pc, #156]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004994:	4a26      	ldr	r2, [pc, #152]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499a:	6593      	str	r3, [r2, #88]	@ 0x58
 800499c:	4b24      	ldr	r3, [pc, #144]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a8:	2301      	movs	r3, #1
 80049aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ac:	4b21      	ldr	r3, [pc, #132]	@ (8004a34 <HAL_RCC_OscConfig+0x508>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d118      	bne.n	80049ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a34 <HAL_RCC_OscConfig+0x508>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a34 <HAL_RCC_OscConfig+0x508>)
 80049be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c4:	f7fd f82e 	bl	8001a24 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049cc:	f7fd f82a 	bl	8001a24 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e17a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049de:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <HAL_RCC_OscConfig+0x508>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d108      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4d8>
 80049f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a02:	e029      	b.n	8004a58 <HAL_RCC_OscConfig+0x52c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d115      	bne.n	8004a38 <HAL_RCC_OscConfig+0x50c>
 8004a0c:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	4a07      	ldr	r2, [pc, #28]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a1c:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a22:	4a03      	ldr	r2, [pc, #12]	@ (8004a30 <HAL_RCC_OscConfig+0x504>)
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a2c:	e014      	b.n	8004a58 <HAL_RCC_OscConfig+0x52c>
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40007000 	.word	0x40007000
 8004a38:	4b9c      	ldr	r3, [pc, #624]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	4a9b      	ldr	r2, [pc, #620]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a48:	4b98      	ldr	r3, [pc, #608]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4e:	4a97      	ldr	r2, [pc, #604]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d016      	beq.n	8004a8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fc ffe0 	bl	8001a24 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fc ffdc 	bl	8001a24 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e12a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ed      	beq.n	8004a68 <HAL_RCC_OscConfig+0x53c>
 8004a8c:	e015      	b.n	8004aba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fc ffc9 	bl	8001a24 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fc ffc5 	bl	8001a24 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e113      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aac:	4b7f      	ldr	r3, [pc, #508]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1ed      	bne.n	8004a96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d105      	bne.n	8004acc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac0:	4b7a      	ldr	r3, [pc, #488]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac4:	4a79      	ldr	r2, [pc, #484]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80fe 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	f040 80d0 	bne.w	8004c80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ae0:	4b72      	ldr	r3, [pc, #456]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0203 	and.w	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d130      	bne.n	8004b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	3b01      	subs	r3, #1
 8004b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d127      	bne.n	8004b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d11f      	bne.n	8004b56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b20:	2a07      	cmp	r2, #7
 8004b22:	bf14      	ite	ne
 8004b24:	2201      	movne	r2, #1
 8004b26:	2200      	moveq	r2, #0
 8004b28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d113      	bne.n	8004b56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d06e      	beq.n	8004c34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	d069      	beq.n	8004c30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b5c:	4b53      	ldr	r3, [pc, #332]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b68:	4b50      	ldr	r3, [pc, #320]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0ad      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b78:	4b4c      	ldr	r3, [pc, #304]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b84:	f7fc ff4e 	bl	8001a24 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fc ff4a 	bl	8001a24 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e09a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b9e:	4b43      	ldr	r3, [pc, #268]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004baa:	4b40      	ldr	r3, [pc, #256]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <HAL_RCC_OscConfig+0x784>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bc4:	0212      	lsls	r2, r2, #8
 8004bc6:	4311      	orrs	r1, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bcc:	0852      	lsrs	r2, r2, #1
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	0552      	lsls	r2, r2, #21
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bd8:	0852      	lsrs	r2, r2, #1
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	0652      	lsls	r2, r2, #25
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004be4:	0912      	lsrs	r2, r2, #4
 8004be6:	0452      	lsls	r2, r2, #17
 8004be8:	430a      	orrs	r2, r1
 8004bea:	4930      	ldr	r1, [pc, #192]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a2a      	ldr	r2, [pc, #168]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c08:	f7fc ff0c 	bl	8001a24 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fc ff08 	bl	8001a24 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e058      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c22:	4b22      	ldr	r3, [pc, #136]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c2e:	e050      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e04f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c34:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d148      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c40:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a19      	ldr	r2, [pc, #100]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c4c:	4b17      	ldr	r3, [pc, #92]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c58:	f7fc fee4 	bl	8001a24 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fc fee0 	bl	8001a24 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e030      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c72:	4b0e      	ldr	r3, [pc, #56]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x734>
 8004c7e:	e028      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b0c      	cmp	r3, #12
 8004c84:	d023      	beq.n	8004cce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c86:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a08      	ldr	r2, [pc, #32]	@ (8004cac <HAL_RCC_OscConfig+0x780>)
 8004c8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fc fec7 	bl	8001a24 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	e00c      	b.n	8004cb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9a:	f7fc fec3 	bl	8001a24 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d905      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e013      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cb4:	4b09      	ldr	r3, [pc, #36]	@ (8004cdc <HAL_RCC_OscConfig+0x7b0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ec      	bne.n	8004c9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cc0:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <HAL_RCC_OscConfig+0x7b0>)
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	4905      	ldr	r1, [pc, #20]	@ (8004cdc <HAL_RCC_OscConfig+0x7b0>)
 8004cc6:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <HAL_RCC_OscConfig+0x7b4>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60cb      	str	r3, [r1, #12]
 8004ccc:	e001      	b.n	8004cd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	feeefffc 	.word	0xfeeefffc

08004ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0e7      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b75      	ldr	r3, [pc, #468]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d910      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b72      	ldr	r3, [pc, #456]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 0207 	bic.w	r2, r3, #7
 8004d0e:	4970      	ldr	r1, [pc, #448]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b6e      	ldr	r3, [pc, #440]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0cf      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d010      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	4b66      	ldr	r3, [pc, #408]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d908      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d44:	4b63      	ldr	r3, [pc, #396]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4960      	ldr	r1, [pc, #384]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d04c      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d107      	bne.n	8004d7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d121      	bne.n	8004dba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e0a6      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d82:	4b54      	ldr	r3, [pc, #336]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d115      	bne.n	8004dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e09a      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e08e      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004daa:	4b4a      	ldr	r3, [pc, #296]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e086      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dba:	4b46      	ldr	r3, [pc, #280]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 0203 	bic.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4943      	ldr	r1, [pc, #268]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dcc:	f7fc fe2a 	bl	8001a24 <HAL_GetTick>
 8004dd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd4:	f7fc fe26 	bl	8001a24 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e06e      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 020c 	and.w	r2, r3, #12
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d1eb      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d010      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d208      	bcs.n	8004e2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e18:	4b2e      	ldr	r3, [pc, #184]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	492b      	ldr	r1, [pc, #172]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e2a:	4b29      	ldr	r3, [pc, #164]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d210      	bcs.n	8004e5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e38:	4b25      	ldr	r3, [pc, #148]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 0207 	bic.w	r2, r3, #7
 8004e40:	4923      	ldr	r1, [pc, #140]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e48:	4b21      	ldr	r3, [pc, #132]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e036      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e66:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	4918      	ldr	r1, [pc, #96]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e84:	4b13      	ldr	r3, [pc, #76]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4910      	ldr	r1, [pc, #64]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e98:	f000 f824 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	490b      	ldr	r1, [pc, #44]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1f4>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	4a09      	ldr	r2, [pc, #36]	@ (8004edc <HAL_RCC_ClockConfig+0x1f8>)
 8004eb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <HAL_RCC_ClockConfig+0x1fc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fc fc3f 	bl	8001740 <HAL_InitTick>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40022000 	.word	0x40022000
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	08007a64 	.word	0x08007a64
 8004edc:	20000018 	.word	0x20000018
 8004ee0:	2000001c 	.word	0x2000001c

08004ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	@ 0x24
 8004ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004efc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d121      	bne.n	8004f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d11e      	bne.n	8004f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f18:	4b34      	ldr	r3, [pc, #208]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f24:	4b31      	ldr	r3, [pc, #196]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e005      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f34:	4b2d      	ldr	r3, [pc, #180]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10d      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d102      	bne.n	8004f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	e004      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f68:	4b23      	ldr	r3, [pc, #140]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d134      	bne.n	8004fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f72:	4b1e      	ldr	r3, [pc, #120]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d003      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d003      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0xac>
 8004f88:	e005      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f8c:	617b      	str	r3, [r7, #20]
      break;
 8004f8e:	e005      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f92:	617b      	str	r3, [r7, #20]
      break;
 8004f94:	e002      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	617b      	str	r3, [r7, #20]
      break;
 8004f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f9c:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004faa:	4b10      	ldr	r3, [pc, #64]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	fb03 f202 	mul.w	r2, r3, r2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	0e5b      	lsrs	r3, r3, #25
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3724      	adds	r7, #36	@ 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	08007a7c 	.word	0x08007a7c
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	007a1200 	.word	0x007a1200

08004ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005000:	4b03      	ldr	r3, [pc, #12]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x14>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000018 	.word	0x20000018

08005014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005018:	f7ff fff0 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4904      	ldr	r1, [pc, #16]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x28>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	08007a74 	.word	0x08007a74

08005040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005044:	f7ff ffda 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0adb      	lsrs	r3, r3, #11
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4904      	ldr	r1, [pc, #16]	@ (8005068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000
 8005068:	08007a74 	.word	0x08007a74

0800506c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	220f      	movs	r2, #15
 800507a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800507c:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0203 	and.w	r2, r3, #3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005088:	4b0f      	ldr	r3, [pc, #60]	@ (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050a0:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <HAL_RCC_GetClockConfig+0x5c>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	08db      	lsrs	r3, r3, #3
 80050a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050ae:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <HAL_RCC_GetClockConfig+0x60>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	601a      	str	r2, [r3, #0]
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40022000 	.word	0x40022000

080050d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050e8:	f7ff f9bc 	bl	8004464 <HAL_PWREx_GetVoltageRange>
 80050ec:	6178      	str	r0, [r7, #20]
 80050ee:	e014      	b.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f0:	4b25      	ldr	r3, [pc, #148]	@ (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f4:	4a24      	ldr	r2, [pc, #144]	@ (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80050fc:	4b22      	ldr	r3, [pc, #136]	@ (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005108:	f7ff f9ac 	bl	8004464 <HAL_PWREx_GetVoltageRange>
 800510c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800510e:	4b1e      	ldr	r3, [pc, #120]	@ (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005112:	4a1d      	ldr	r2, [pc, #116]	@ (8005188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005118:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005120:	d10b      	bne.n	800513a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b80      	cmp	r3, #128	@ 0x80
 8005126:	d919      	bls.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2ba0      	cmp	r3, #160	@ 0xa0
 800512c:	d902      	bls.n	8005134 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800512e:	2302      	movs	r3, #2
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e013      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005134:	2301      	movs	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e010      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b80      	cmp	r3, #128	@ 0x80
 800513e:	d902      	bls.n	8005146 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005140:	2303      	movs	r3, #3
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	e00a      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b80      	cmp	r3, #128	@ 0x80
 800514a:	d102      	bne.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800514c:	2302      	movs	r3, #2
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	e004      	b.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b70      	cmp	r3, #112	@ 0x70
 8005156:	d101      	bne.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005158:	2301      	movs	r3, #1
 800515a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800515c:	4b0b      	ldr	r3, [pc, #44]	@ (800518c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 0207 	bic.w	r2, r3, #7
 8005164:	4909      	ldr	r1, [pc, #36]	@ (800518c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800516c:	4b07      	ldr	r3, [pc, #28]	@ (800518c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	429a      	cmp	r2, r3
 8005178:	d001      	beq.n	800517e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000
 800518c:	40022000 	.word	0x40022000

08005190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005198:	2300      	movs	r3, #0
 800519a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800519c:	2300      	movs	r3, #0
 800519e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d041      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051b4:	d02a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051ba:	d824      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051c0:	d008      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051c6:	d81e      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051d0:	d010      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051d2:	e018      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051d4:	4b86      	ldr	r3, [pc, #536]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a85      	ldr	r2, [pc, #532]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051e0:	e015      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fabb 	bl	8005764 <RCCEx_PLLSAI1_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051f2:	e00c      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3320      	adds	r3, #32
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fba6 	bl	800594c <RCCEx_PLLSAI2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005204:	e003      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	74fb      	strb	r3, [r7, #19]
      break;
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800520c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520e:	7cfb      	ldrb	r3, [r7, #19]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005214:	4b76      	ldr	r3, [pc, #472]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005222:	4973      	ldr	r1, [pc, #460]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800522a:	e001      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d041      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005240:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005244:	d02a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005246:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800524a:	d824      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800524c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005250:	d008      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005252:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005256:	d81e      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800525c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005260:	d010      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005262:	e018      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005264:	4b62      	ldr	r3, [pc, #392]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a61      	ldr	r2, [pc, #388]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005270:	e015      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fa73 	bl	8005764 <RCCEx_PLLSAI1_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005282:	e00c      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3320      	adds	r3, #32
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fb5e 	bl	800594c <RCCEx_PLLSAI2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	74fb      	strb	r3, [r7, #19]
      break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800529c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800529e:	7cfb      	ldrb	r3, [r7, #19]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052a4:	4b52      	ldr	r3, [pc, #328]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052b2:	494f      	ldr	r1, [pc, #316]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052ba:	e001      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80a0 	beq.w	800540e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ce:	2300      	movs	r3, #0
 80052d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052d2:	4b47      	ldr	r3, [pc, #284]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e8:	4b41      	ldr	r3, [pc, #260]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ec:	4a40      	ldr	r2, [pc, #256]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052f4:	4b3e      	ldr	r3, [pc, #248]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005300:	2301      	movs	r3, #1
 8005302:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005304:	4b3b      	ldr	r3, [pc, #236]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3a      	ldr	r2, [pc, #232]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800530a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005310:	f7fc fb88 	bl	8001a24 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005316:	e009      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fc fb84 	bl	8001a24 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d902      	bls.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	74fb      	strb	r3, [r7, #19]
        break;
 800532a:	e005      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800532c:	4b31      	ldr	r3, [pc, #196]	@ (80053f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ef      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d15c      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800533e:	4b2c      	ldr	r3, [pc, #176]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005348:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	429a      	cmp	r2, r3
 800535a:	d019      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800535c:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005368:	4b21      	ldr	r3, [pc, #132]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536e:	4a20      	ldr	r2, [pc, #128]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005378:	4b1d      	ldr	r3, [pc, #116]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537e:	4a1c      	ldr	r2, [pc, #112]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539a:	f7fc fb43 	bl	8001a24 <HAL_GetTick>
 800539e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a0:	e00b      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a2:	f7fc fb3f 	bl	8001a24 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d902      	bls.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	74fb      	strb	r3, [r7, #19]
            break;
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ba:	4b0d      	ldr	r3, [pc, #52]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0ec      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ce:	4b08      	ldr	r3, [pc, #32]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053de:	4904      	ldr	r1, [pc, #16]	@ (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053e6:	e009      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	74bb      	strb	r3, [r7, #18]
 80053ec:	e006      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053fc:	7c7b      	ldrb	r3, [r7, #17]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005402:	4b9e      	ldr	r3, [pc, #632]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005406:	4a9d      	ldr	r2, [pc, #628]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005408:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541a:	4b98      	ldr	r3, [pc, #608]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005420:	f023 0203 	bic.w	r2, r3, #3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	4994      	ldr	r1, [pc, #592]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543c:	4b8f      	ldr	r3, [pc, #572]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	f023 020c 	bic.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544a:	498c      	ldr	r1, [pc, #560]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800545e:	4b87      	ldr	r3, [pc, #540]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	4983      	ldr	r1, [pc, #524]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005480:	4b7e      	ldr	r3, [pc, #504]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005486:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	497b      	ldr	r1, [pc, #492]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054a2:	4b76      	ldr	r3, [pc, #472]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b0:	4972      	ldr	r1, [pc, #456]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054c4:	4b6d      	ldr	r3, [pc, #436]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d2:	496a      	ldr	r1, [pc, #424]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054e6:	4b65      	ldr	r3, [pc, #404]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f4:	4961      	ldr	r1, [pc, #388]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005508:	4b5c      	ldr	r3, [pc, #368]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005516:	4959      	ldr	r1, [pc, #356]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800552a:	4b54      	ldr	r3, [pc, #336]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005538:	4950      	ldr	r1, [pc, #320]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800554c:	4b4b      	ldr	r3, [pc, #300]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005552:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	4948      	ldr	r1, [pc, #288]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800556e:	4b43      	ldr	r3, [pc, #268]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	493f      	ldr	r1, [pc, #252]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d028      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005590:	4b3a      	ldr	r3, [pc, #232]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559e:	4937      	ldr	r1, [pc, #220]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ae:	d106      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b0:	4b32      	ldr	r3, [pc, #200]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4a31      	ldr	r2, [pc, #196]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ba:	60d3      	str	r3, [r2, #12]
 80055bc:	e011      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055c6:	d10c      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	2101      	movs	r1, #1
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f8c8 	bl	8005764 <RCCEx_PLLSAI1_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d028      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055ee:	4b23      	ldr	r3, [pc, #140]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fc:	491f      	ldr	r1, [pc, #124]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800560c:	d106      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560e:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	4a1a      	ldr	r2, [pc, #104]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005618:	60d3      	str	r3, [r2, #12]
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005624:	d10c      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	2101      	movs	r1, #1
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f899 	bl	8005764 <RCCEx_PLLSAI1_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02b      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005652:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565a:	4908      	ldr	r1, [pc, #32]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800566a:	d109      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800566c:	4b03      	ldr	r3, [pc, #12]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	4a02      	ldr	r2, [pc, #8]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005676:	60d3      	str	r3, [r2, #12]
 8005678:	e014      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005684:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005688:	d10c      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	2101      	movs	r1, #1
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f867 	bl	8005764 <RCCEx_PLLSAI1_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800569a:	7cfb      	ldrb	r3, [r7, #19]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d02f      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056be:	4928      	ldr	r1, [pc, #160]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ce:	d10d      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f844 	bl	8005764 <RCCEx_PLLSAI1_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d014      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
 80056e8:	74bb      	strb	r3, [r7, #18]
 80056ea:	e011      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3320      	adds	r3, #32
 80056fa:	2102      	movs	r1, #2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f925 	bl	800594c <RCCEx_PLLSAI2_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800571c:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800572a:	490d      	ldr	r1, [pc, #52]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800573e:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005744:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800574e:	4904      	ldr	r1, [pc, #16]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005756:	7cbb      	ldrb	r3, [r7, #18]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000

08005764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005772:	4b75      	ldr	r3, [pc, #468]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d018      	beq.n	80057b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800577e:	4b72      	ldr	r3, [pc, #456]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0203 	and.w	r2, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d10d      	bne.n	80057aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
       ||
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005796:	4b6c      	ldr	r3, [pc, #432]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	091b      	lsrs	r3, r3, #4
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
       ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d047      	beq.n	800583a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
 80057ae:	e044      	b.n	800583a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d018      	beq.n	80057ea <RCCEx_PLLSAI1_Config+0x86>
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d825      	bhi.n	8005808 <RCCEx_PLLSAI1_Config+0xa4>
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d002      	beq.n	80057c6 <RCCEx_PLLSAI1_Config+0x62>
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d009      	beq.n	80057d8 <RCCEx_PLLSAI1_Config+0x74>
 80057c4:	e020      	b.n	8005808 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057c6:	4b60      	ldr	r3, [pc, #384]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11d      	bne.n	800580e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d6:	e01a      	b.n	800580e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d116      	bne.n	8005812 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e8:	e013      	b.n	8005812 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ea:	4b57      	ldr	r3, [pc, #348]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10f      	bne.n	8005816 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057f6:	4b54      	ldr	r3, [pc, #336]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005806:	e006      	b.n	8005816 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	73fb      	strb	r3, [r7, #15]
      break;
 800580c:	e004      	b.n	8005818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005816:	bf00      	nop
    }

    if(status == HAL_OK)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10d      	bne.n	800583a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800581e:	4b4a      	ldr	r3, [pc, #296]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	3b01      	subs	r3, #1
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	430b      	orrs	r3, r1
 8005834:	4944      	ldr	r1, [pc, #272]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d17d      	bne.n	800593c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005840:	4b41      	ldr	r3, [pc, #260]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a40      	ldr	r2, [pc, #256]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005846:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800584a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584c:	f7fc f8ea 	bl	8001a24 <HAL_GetTick>
 8005850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005852:	e009      	b.n	8005868 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005854:	f7fc f8e6 	bl	8001a24 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d902      	bls.n	8005868 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	73fb      	strb	r3, [r7, #15]
        break;
 8005866:	e005      	b.n	8005874 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005868:	4b37      	ldr	r3, [pc, #220]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ef      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d160      	bne.n	800593c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d111      	bne.n	80058a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005880:	4b31      	ldr	r3, [pc, #196]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6892      	ldr	r2, [r2, #8]
 8005890:	0211      	lsls	r1, r2, #8
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68d2      	ldr	r2, [r2, #12]
 8005896:	0912      	lsrs	r2, r2, #4
 8005898:	0452      	lsls	r2, r2, #17
 800589a:	430a      	orrs	r2, r1
 800589c:	492a      	ldr	r1, [pc, #168]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	610b      	str	r3, [r1, #16]
 80058a2:	e027      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d112      	bne.n	80058d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058aa:	4b27      	ldr	r3, [pc, #156]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80058b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6892      	ldr	r2, [r2, #8]
 80058ba:	0211      	lsls	r1, r2, #8
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6912      	ldr	r2, [r2, #16]
 80058c0:	0852      	lsrs	r2, r2, #1
 80058c2:	3a01      	subs	r2, #1
 80058c4:	0552      	lsls	r2, r2, #21
 80058c6:	430a      	orrs	r2, r1
 80058c8:	491f      	ldr	r1, [pc, #124]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	610b      	str	r3, [r1, #16]
 80058ce:	e011      	b.n	80058f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80058d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6892      	ldr	r2, [r2, #8]
 80058e0:	0211      	lsls	r1, r2, #8
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6952      	ldr	r2, [r2, #20]
 80058e6:	0852      	lsrs	r2, r2, #1
 80058e8:	3a01      	subs	r2, #1
 80058ea:	0652      	lsls	r2, r2, #25
 80058ec:	430a      	orrs	r2, r1
 80058ee:	4916      	ldr	r1, [pc, #88]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058f4:	4b14      	ldr	r3, [pc, #80]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a13      	ldr	r2, [pc, #76]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fc f890 	bl	8001a24 <HAL_GetTick>
 8005904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005906:	e009      	b.n	800591c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005908:	f7fc f88c 	bl	8001a24 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	73fb      	strb	r3, [r7, #15]
          break;
 800591a:	e005      	b.n	8005928 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800591c:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ef      	beq.n	8005908 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800592e:	4b06      	ldr	r3, [pc, #24]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	4904      	ldr	r1, [pc, #16]	@ (8005948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005938:	4313      	orrs	r3, r2
 800593a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000

0800594c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800595a:	4b6a      	ldr	r3, [pc, #424]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d018      	beq.n	8005998 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005966:	4b67      	ldr	r3, [pc, #412]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0203 	and.w	r2, r3, #3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d10d      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
       ||
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800597e:	4b61      	ldr	r3, [pc, #388]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	091b      	lsrs	r3, r3, #4
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
       ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d047      	beq.n	8005a22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	73fb      	strb	r3, [r7, #15]
 8005996:	e044      	b.n	8005a22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d018      	beq.n	80059d2 <RCCEx_PLLSAI2_Config+0x86>
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d825      	bhi.n	80059f0 <RCCEx_PLLSAI2_Config+0xa4>
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d002      	beq.n	80059ae <RCCEx_PLLSAI2_Config+0x62>
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d009      	beq.n	80059c0 <RCCEx_PLLSAI2_Config+0x74>
 80059ac:	e020      	b.n	80059f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ae:	4b55      	ldr	r3, [pc, #340]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d11d      	bne.n	80059f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059be:	e01a      	b.n	80059f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059c0:	4b50      	ldr	r3, [pc, #320]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d116      	bne.n	80059fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d0:	e013      	b.n	80059fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059d2:	4b4c      	ldr	r3, [pc, #304]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10f      	bne.n	80059fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059de:	4b49      	ldr	r3, [pc, #292]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d109      	bne.n	80059fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ee:	e006      	b.n	80059fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
      break;
 80059f4:	e004      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059f6:	bf00      	nop
 80059f8:	e002      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059fa:	bf00      	nop
 80059fc:	e000      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10d      	bne.n	8005a22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a06:	4b3f      	ldr	r3, [pc, #252]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6819      	ldr	r1, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	4939      	ldr	r1, [pc, #228]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d167      	bne.n	8005af8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a28:	4b36      	ldr	r3, [pc, #216]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a35      	ldr	r2, [pc, #212]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a34:	f7fb fff6 	bl	8001a24 <HAL_GetTick>
 8005a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a3a:	e009      	b.n	8005a50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a3c:	f7fb fff2 	bl	8001a24 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d902      	bls.n	8005a50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a4e:	e005      	b.n	8005a5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a50:	4b2c      	ldr	r3, [pc, #176]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1ef      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d14a      	bne.n	8005af8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d111      	bne.n	8005a8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a68:	4b26      	ldr	r3, [pc, #152]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6892      	ldr	r2, [r2, #8]
 8005a78:	0211      	lsls	r1, r2, #8
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	68d2      	ldr	r2, [r2, #12]
 8005a7e:	0912      	lsrs	r2, r2, #4
 8005a80:	0452      	lsls	r2, r2, #17
 8005a82:	430a      	orrs	r2, r1
 8005a84:	491f      	ldr	r1, [pc, #124]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	614b      	str	r3, [r1, #20]
 8005a8a:	e011      	b.n	8005ab0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6892      	ldr	r2, [r2, #8]
 8005a9c:	0211      	lsls	r1, r2, #8
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6912      	ldr	r2, [r2, #16]
 8005aa2:	0852      	lsrs	r2, r2, #1
 8005aa4:	3a01      	subs	r2, #1
 8005aa6:	0652      	lsls	r2, r2, #25
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	4916      	ldr	r1, [pc, #88]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ab0:	4b14      	ldr	r3, [pc, #80]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a13      	ldr	r2, [pc, #76]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abc:	f7fb ffb2 	bl	8001a24 <HAL_GetTick>
 8005ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ac2:	e009      	b.n	8005ad8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ac4:	f7fb ffae 	bl	8001a24 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d902      	bls.n	8005ad8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ad6:	e005      	b.n	8005ae4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0ef      	beq.n	8005ac4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005aea:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4904      	ldr	r1, [pc, #16]	@ (8005b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40021000 	.word	0x40021000

08005b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e049      	b.n	8005bae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb fd8c 	bl	800164c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f000 fb06 	bl	8006158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e047      	b.n	8005c60 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a23      	ldr	r2, [pc, #140]	@ (8005c6c <HAL_TIM_Base_Start+0xb4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01d      	beq.n	8005c1e <HAL_TIM_Base_Start+0x66>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bea:	d018      	beq.n	8005c1e <HAL_TIM_Base_Start+0x66>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c70 <HAL_TIM_Base_Start+0xb8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <HAL_TIM_Base_Start+0x66>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005c74 <HAL_TIM_Base_Start+0xbc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <HAL_TIM_Base_Start+0x66>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	@ (8005c78 <HAL_TIM_Base_Start+0xc0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_TIM_Base_Start+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <HAL_TIM_Base_Start+0xc4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <HAL_TIM_Base_Start+0x66>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a19      	ldr	r2, [pc, #100]	@ (8005c80 <HAL_TIM_Base_Start+0xc8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d115      	bne.n	8005c4a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	4b17      	ldr	r3, [pc, #92]	@ (8005c84 <HAL_TIM_Base_Start+0xcc>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	d015      	beq.n	8005c5c <HAL_TIM_Base_Start+0xa4>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c36:	d011      	beq.n	8005c5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c48:	e008      	b.n	8005c5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0201 	orr.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e000      	b.n	8005c5e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40000c00 	.word	0x40000c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	00010007 	.word	0x00010007

08005c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d001      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e04f      	b.n	8005d40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a23      	ldr	r2, [pc, #140]	@ (8005d4c <HAL_TIM_Base_Start_IT+0xc4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_TIM_Base_Start_IT+0x76>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cca:	d018      	beq.n	8005cfe <HAL_TIM_Base_Start_IT+0x76>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <HAL_TIM_Base_Start_IT+0xc8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_TIM_Base_Start_IT+0x76>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	@ (8005d54 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_TIM_Base_Start_IT+0x76>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_TIM_Base_Start_IT+0x76>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1b      	ldr	r2, [pc, #108]	@ (8005d5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_TIM_Base_Start_IT+0x76>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d115      	bne.n	8005d2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	4b17      	ldr	r3, [pc, #92]	@ (8005d64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b06      	cmp	r3, #6
 8005d0e:	d015      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0xb4>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d16:	d011      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	e008      	b.n	8005d3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0201 	orr.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e000      	b.n	8005d3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40000400 	.word	0x40000400
 8005d54:	40000800 	.word	0x40000800
 8005d58:	40000c00 	.word	0x40000c00
 8005d5c:	40013400 	.word	0x40013400
 8005d60:	40014000 	.word	0x40014000
 8005d64:	00010007 	.word	0x00010007

08005d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d020      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0202 	mvn.w	r2, #2
 8005d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9b2 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005db8:	e005      	b.n	8005dc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9a4 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9b5 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d020      	beq.n	8005e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01b      	beq.n	8005e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0204 	mvn.w	r2, #4
 8005de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f98c 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f97e 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f98f 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d020      	beq.n	8005e64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01b      	beq.n	8005e64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0208 	mvn.w	r2, #8
 8005e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f966 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005e50:	e005      	b.n	8005e5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f958 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f969 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d020      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0210 	mvn.w	r2, #16
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2208      	movs	r2, #8
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f940 	bl	800611c <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f932 	bl	8006108 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f943 	bl	8006130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0201 	mvn.w	r2, #1
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fb f9cc 	bl	800126c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00c      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fafd 	bl	80064fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00c      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 faf5 	bl	8006510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00c      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f8fd 	bl	8006144 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f06f 0220 	mvn.w	r2, #32
 8005f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fabd 	bl	80064e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_TIM_ConfigClockSource+0x1c>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e0b6      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x18a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fbc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fce:	d03e      	beq.n	800604e <HAL_TIM_ConfigClockSource+0xd8>
 8005fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd4:	f200 8087 	bhi.w	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fdc:	f000 8086 	beq.w	80060ec <HAL_TIM_ConfigClockSource+0x176>
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe4:	d87f      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 8005fe6:	2b70      	cmp	r3, #112	@ 0x70
 8005fe8:	d01a      	beq.n	8006020 <HAL_TIM_ConfigClockSource+0xaa>
 8005fea:	2b70      	cmp	r3, #112	@ 0x70
 8005fec:	d87b      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 8005fee:	2b60      	cmp	r3, #96	@ 0x60
 8005ff0:	d050      	beq.n	8006094 <HAL_TIM_ConfigClockSource+0x11e>
 8005ff2:	2b60      	cmp	r3, #96	@ 0x60
 8005ff4:	d877      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 8005ff6:	2b50      	cmp	r3, #80	@ 0x50
 8005ff8:	d03c      	beq.n	8006074 <HAL_TIM_ConfigClockSource+0xfe>
 8005ffa:	2b50      	cmp	r3, #80	@ 0x50
 8005ffc:	d873      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 8005ffe:	2b40      	cmp	r3, #64	@ 0x40
 8006000:	d058      	beq.n	80060b4 <HAL_TIM_ConfigClockSource+0x13e>
 8006002:	2b40      	cmp	r3, #64	@ 0x40
 8006004:	d86f      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 8006006:	2b30      	cmp	r3, #48	@ 0x30
 8006008:	d064      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15e>
 800600a:	2b30      	cmp	r3, #48	@ 0x30
 800600c:	d86b      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 800600e:	2b20      	cmp	r3, #32
 8006010:	d060      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15e>
 8006012:	2b20      	cmp	r3, #32
 8006014:	d867      	bhi.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d05c      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15e>
 800601a:	2b10      	cmp	r3, #16
 800601c:	d05a      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0x15e>
 800601e:	e062      	b.n	80060e6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006030:	f000 f9b2 	bl	8006398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006042:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]
      break;
 800604c:	e04f      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800605e:	f000 f99b 	bl	8006398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006070:	609a      	str	r2, [r3, #8]
      break;
 8006072:	e03c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006080:	461a      	mov	r2, r3
 8006082:	f000 f90f 	bl	80062a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2150      	movs	r1, #80	@ 0x50
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f968 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8006092:	e02c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a0:	461a      	mov	r2, r3
 80060a2:	f000 f92e 	bl	8006302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2160      	movs	r1, #96	@ 0x60
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 f958 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80060b2:	e01c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c0:	461a      	mov	r2, r3
 80060c2:	f000 f8ef 	bl	80062a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2140      	movs	r1, #64	@ 0x40
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f948 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80060d2:	e00c      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f000 f93f 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80060e4:	e003      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	73fb      	strb	r3, [r7, #15]
      break;
 80060ea:	e000      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a46      	ldr	r2, [pc, #280]	@ (8006284 <TIM_Base_SetConfig+0x12c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d013      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006176:	d00f      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a43      	ldr	r2, [pc, #268]	@ (8006288 <TIM_Base_SetConfig+0x130>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00b      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a42      	ldr	r2, [pc, #264]	@ (800628c <TIM_Base_SetConfig+0x134>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a41      	ldr	r2, [pc, #260]	@ (8006290 <TIM_Base_SetConfig+0x138>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a40      	ldr	r2, [pc, #256]	@ (8006294 <TIM_Base_SetConfig+0x13c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d108      	bne.n	80061aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a35      	ldr	r2, [pc, #212]	@ (8006284 <TIM_Base_SetConfig+0x12c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01f      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b8:	d01b      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a32      	ldr	r2, [pc, #200]	@ (8006288 <TIM_Base_SetConfig+0x130>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d017      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a31      	ldr	r2, [pc, #196]	@ (800628c <TIM_Base_SetConfig+0x134>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a30      	ldr	r2, [pc, #192]	@ (8006290 <TIM_Base_SetConfig+0x138>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006294 <TIM_Base_SetConfig+0x13c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006298 <TIM_Base_SetConfig+0x140>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2d      	ldr	r2, [pc, #180]	@ (800629c <TIM_Base_SetConfig+0x144>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_Base_SetConfig+0x9a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2c      	ldr	r2, [pc, #176]	@ (80062a0 <TIM_Base_SetConfig+0x148>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a16      	ldr	r2, [pc, #88]	@ (8006284 <TIM_Base_SetConfig+0x12c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00f      	beq.n	8006250 <TIM_Base_SetConfig+0xf8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <TIM_Base_SetConfig+0x13c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d00b      	beq.n	8006250 <TIM_Base_SetConfig+0xf8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a17      	ldr	r2, [pc, #92]	@ (8006298 <TIM_Base_SetConfig+0x140>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_Base_SetConfig+0xf8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a16      	ldr	r2, [pc, #88]	@ (800629c <TIM_Base_SetConfig+0x144>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_Base_SetConfig+0xf8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a15      	ldr	r2, [pc, #84]	@ (80062a0 <TIM_Base_SetConfig+0x148>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d103      	bne.n	8006258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b01      	cmp	r3, #1
 8006268:	d105      	bne.n	8006276 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]
  }
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40013400 	.word	0x40013400
 8006298:	40014000 	.word	0x40014000
 800629c:	40014400 	.word	0x40014400
 80062a0:	40014800 	.word	0x40014800

080062a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0201 	bic.w	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 030a 	bic.w	r3, r3, #10
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006302:	b480      	push	{r7}
 8006304:	b087      	sub	sp, #28
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f023 0210 	bic.w	r2, r3, #16
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800632c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	031b      	lsls	r3, r3, #12
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800633e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	f043 0307 	orr.w	r3, r3, #7
 8006384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e068      	b.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2e      	ldr	r2, [pc, #184]	@ (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2d      	ldr	r2, [pc, #180]	@ (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d108      	bne.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800642a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1e      	ldr	r2, [pc, #120]	@ (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006462:	d018      	beq.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1a      	ldr	r2, [pc, #104]	@ (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a18      	ldr	r2, [pc, #96]	@ (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a13      	ldr	r2, [pc, #76]	@ (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a14      	ldr	r2, [pc, #80]	@ (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d10c      	bne.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800649c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40013400 	.word	0x40013400
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40000c00 	.word	0x40000c00
 80064e4:	40014000 	.word	0x40014000

080064e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e040      	b.n	80065b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb f89e 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2224      	movs	r2, #36	@ 0x24
 8006550:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fb6a 	bl	8006c44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f8af 	bl	80066d4 <UART_SetConfig>
 8006576:	4603      	mov	r3, r0
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e01b      	b.n	80065b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800658e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800659e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fbe9 	bl	8006d88 <UART_CheckIdleState>
 80065b6:	4603      	mov	r3, r0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08a      	sub	sp, #40	@ 0x28
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d177      	bne.n	80066c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <HAL_UART_Transmit+0x24>
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e070      	b.n	80066ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2221      	movs	r2, #33	@ 0x21
 80065f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065f6:	f7fb fa15 	bl	8001a24 <HAL_GetTick>
 80065fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006614:	d108      	bne.n	8006628 <HAL_UART_Transmit+0x68>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d104      	bne.n	8006628 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	e003      	b.n	8006630 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800662c:	2300      	movs	r3, #0
 800662e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006630:	e02f      	b.n	8006692 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2200      	movs	r2, #0
 800663a:	2180      	movs	r1, #128	@ 0x80
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 fc4b 	bl	8006ed8 <UART_WaitOnFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e03b      	b.n	80066ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	881a      	ldrh	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006664:	b292      	uxth	r2, r2
 8006666:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	3302      	adds	r3, #2
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	e007      	b.n	8006680 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	781a      	ldrb	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	3301      	adds	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1c9      	bne.n	8006632 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2140      	movs	r1, #64	@ 0x40
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fc15 	bl	8006ed8 <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e005      	b.n	80066ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e000      	b.n	80066ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d8:	b08a      	sub	sp, #40	@ 0x28
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	4ba4      	ldr	r3, [pc, #656]	@ (8006994 <UART_SetConfig+0x2c0>)
 8006704:	4013      	ands	r3, r2
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	6812      	ldr	r2, [r2, #0]
 800670a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800670c:	430b      	orrs	r3, r1
 800670e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a99      	ldr	r2, [pc, #612]	@ (8006998 <UART_SetConfig+0x2c4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673c:	4313      	orrs	r3, r2
 800673e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006750:	430a      	orrs	r2, r1
 8006752:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a90      	ldr	r2, [pc, #576]	@ (800699c <UART_SetConfig+0x2c8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d126      	bne.n	80067ac <UART_SetConfig+0xd8>
 800675e:	4b90      	ldr	r3, [pc, #576]	@ (80069a0 <UART_SetConfig+0x2cc>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006764:	f003 0303 	and.w	r3, r3, #3
 8006768:	2b03      	cmp	r3, #3
 800676a:	d81b      	bhi.n	80067a4 <UART_SetConfig+0xd0>
 800676c:	a201      	add	r2, pc, #4	@ (adr r2, 8006774 <UART_SetConfig+0xa0>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006785 	.word	0x08006785
 8006778:	08006795 	.word	0x08006795
 800677c:	0800678d 	.word	0x0800678d
 8006780:	0800679d 	.word	0x0800679d
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678a:	e116      	b.n	80069ba <UART_SetConfig+0x2e6>
 800678c:	2302      	movs	r3, #2
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006792:	e112      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006794:	2304      	movs	r3, #4
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800679a:	e10e      	b.n	80069ba <UART_SetConfig+0x2e6>
 800679c:	2308      	movs	r3, #8
 800679e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067a2:	e10a      	b.n	80069ba <UART_SetConfig+0x2e6>
 80067a4:	2310      	movs	r3, #16
 80067a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067aa:	e106      	b.n	80069ba <UART_SetConfig+0x2e6>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7c      	ldr	r2, [pc, #496]	@ (80069a4 <UART_SetConfig+0x2d0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d138      	bne.n	8006828 <UART_SetConfig+0x154>
 80067b6:	4b7a      	ldr	r3, [pc, #488]	@ (80069a0 <UART_SetConfig+0x2cc>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067bc:	f003 030c 	and.w	r3, r3, #12
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d82d      	bhi.n	8006820 <UART_SetConfig+0x14c>
 80067c4:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <UART_SetConfig+0xf8>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	08006801 	.word	0x08006801
 80067d0:	08006821 	.word	0x08006821
 80067d4:	08006821 	.word	0x08006821
 80067d8:	08006821 	.word	0x08006821
 80067dc:	08006811 	.word	0x08006811
 80067e0:	08006821 	.word	0x08006821
 80067e4:	08006821 	.word	0x08006821
 80067e8:	08006821 	.word	0x08006821
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006821 	.word	0x08006821
 80067f4:	08006821 	.word	0x08006821
 80067f8:	08006821 	.word	0x08006821
 80067fc:	08006819 	.word	0x08006819
 8006800:	2300      	movs	r3, #0
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006806:	e0d8      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006808:	2302      	movs	r3, #2
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800680e:	e0d4      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006810:	2304      	movs	r3, #4
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006816:	e0d0      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006818:	2308      	movs	r3, #8
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681e:	e0cc      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006826:	e0c8      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5e      	ldr	r2, [pc, #376]	@ (80069a8 <UART_SetConfig+0x2d4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d125      	bne.n	800687e <UART_SetConfig+0x1aa>
 8006832:	4b5b      	ldr	r3, [pc, #364]	@ (80069a0 <UART_SetConfig+0x2cc>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800683c:	2b30      	cmp	r3, #48	@ 0x30
 800683e:	d016      	beq.n	800686e <UART_SetConfig+0x19a>
 8006840:	2b30      	cmp	r3, #48	@ 0x30
 8006842:	d818      	bhi.n	8006876 <UART_SetConfig+0x1a2>
 8006844:	2b20      	cmp	r3, #32
 8006846:	d00a      	beq.n	800685e <UART_SetConfig+0x18a>
 8006848:	2b20      	cmp	r3, #32
 800684a:	d814      	bhi.n	8006876 <UART_SetConfig+0x1a2>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <UART_SetConfig+0x182>
 8006850:	2b10      	cmp	r3, #16
 8006852:	d008      	beq.n	8006866 <UART_SetConfig+0x192>
 8006854:	e00f      	b.n	8006876 <UART_SetConfig+0x1a2>
 8006856:	2300      	movs	r3, #0
 8006858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685c:	e0ad      	b.n	80069ba <UART_SetConfig+0x2e6>
 800685e:	2302      	movs	r3, #2
 8006860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006864:	e0a9      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006866:	2304      	movs	r3, #4
 8006868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686c:	e0a5      	b.n	80069ba <UART_SetConfig+0x2e6>
 800686e:	2308      	movs	r3, #8
 8006870:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006874:	e0a1      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006876:	2310      	movs	r3, #16
 8006878:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687c:	e09d      	b.n	80069ba <UART_SetConfig+0x2e6>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a4a      	ldr	r2, [pc, #296]	@ (80069ac <UART_SetConfig+0x2d8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d125      	bne.n	80068d4 <UART_SetConfig+0x200>
 8006888:	4b45      	ldr	r3, [pc, #276]	@ (80069a0 <UART_SetConfig+0x2cc>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006892:	2bc0      	cmp	r3, #192	@ 0xc0
 8006894:	d016      	beq.n	80068c4 <UART_SetConfig+0x1f0>
 8006896:	2bc0      	cmp	r3, #192	@ 0xc0
 8006898:	d818      	bhi.n	80068cc <UART_SetConfig+0x1f8>
 800689a:	2b80      	cmp	r3, #128	@ 0x80
 800689c:	d00a      	beq.n	80068b4 <UART_SetConfig+0x1e0>
 800689e:	2b80      	cmp	r3, #128	@ 0x80
 80068a0:	d814      	bhi.n	80068cc <UART_SetConfig+0x1f8>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <UART_SetConfig+0x1d8>
 80068a6:	2b40      	cmp	r3, #64	@ 0x40
 80068a8:	d008      	beq.n	80068bc <UART_SetConfig+0x1e8>
 80068aa:	e00f      	b.n	80068cc <UART_SetConfig+0x1f8>
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b2:	e082      	b.n	80069ba <UART_SetConfig+0x2e6>
 80068b4:	2302      	movs	r3, #2
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ba:	e07e      	b.n	80069ba <UART_SetConfig+0x2e6>
 80068bc:	2304      	movs	r3, #4
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c2:	e07a      	b.n	80069ba <UART_SetConfig+0x2e6>
 80068c4:	2308      	movs	r3, #8
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ca:	e076      	b.n	80069ba <UART_SetConfig+0x2e6>
 80068cc:	2310      	movs	r3, #16
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d2:	e072      	b.n	80069ba <UART_SetConfig+0x2e6>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a35      	ldr	r2, [pc, #212]	@ (80069b0 <UART_SetConfig+0x2dc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d12a      	bne.n	8006934 <UART_SetConfig+0x260>
 80068de:	4b30      	ldr	r3, [pc, #192]	@ (80069a0 <UART_SetConfig+0x2cc>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ec:	d01a      	beq.n	8006924 <UART_SetConfig+0x250>
 80068ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f2:	d81b      	bhi.n	800692c <UART_SetConfig+0x258>
 80068f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068f8:	d00c      	beq.n	8006914 <UART_SetConfig+0x240>
 80068fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068fe:	d815      	bhi.n	800692c <UART_SetConfig+0x258>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <UART_SetConfig+0x238>
 8006904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006908:	d008      	beq.n	800691c <UART_SetConfig+0x248>
 800690a:	e00f      	b.n	800692c <UART_SetConfig+0x258>
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006912:	e052      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006914:	2302      	movs	r3, #2
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691a:	e04e      	b.n	80069ba <UART_SetConfig+0x2e6>
 800691c:	2304      	movs	r3, #4
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006922:	e04a      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006924:	2308      	movs	r3, #8
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800692a:	e046      	b.n	80069ba <UART_SetConfig+0x2e6>
 800692c:	2310      	movs	r3, #16
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006932:	e042      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <UART_SetConfig+0x2c4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d13a      	bne.n	80069b4 <UART_SetConfig+0x2e0>
 800693e:	4b18      	ldr	r3, [pc, #96]	@ (80069a0 <UART_SetConfig+0x2cc>)
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006944:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006948:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800694c:	d01a      	beq.n	8006984 <UART_SetConfig+0x2b0>
 800694e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006952:	d81b      	bhi.n	800698c <UART_SetConfig+0x2b8>
 8006954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006958:	d00c      	beq.n	8006974 <UART_SetConfig+0x2a0>
 800695a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800695e:	d815      	bhi.n	800698c <UART_SetConfig+0x2b8>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <UART_SetConfig+0x298>
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006968:	d008      	beq.n	800697c <UART_SetConfig+0x2a8>
 800696a:	e00f      	b.n	800698c <UART_SetConfig+0x2b8>
 800696c:	2300      	movs	r3, #0
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006972:	e022      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006974:	2302      	movs	r3, #2
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800697a:	e01e      	b.n	80069ba <UART_SetConfig+0x2e6>
 800697c:	2304      	movs	r3, #4
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006982:	e01a      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006984:	2308      	movs	r3, #8
 8006986:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800698a:	e016      	b.n	80069ba <UART_SetConfig+0x2e6>
 800698c:	2310      	movs	r3, #16
 800698e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006992:	e012      	b.n	80069ba <UART_SetConfig+0x2e6>
 8006994:	efff69f3 	.word	0xefff69f3
 8006998:	40008000 	.word	0x40008000
 800699c:	40013800 	.word	0x40013800
 80069a0:	40021000 	.word	0x40021000
 80069a4:	40004400 	.word	0x40004400
 80069a8:	40004800 	.word	0x40004800
 80069ac:	40004c00 	.word	0x40004c00
 80069b0:	40005000 	.word	0x40005000
 80069b4:	2310      	movs	r3, #16
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a9f      	ldr	r2, [pc, #636]	@ (8006c3c <UART_SetConfig+0x568>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d17a      	bne.n	8006aba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d824      	bhi.n	8006a16 <UART_SetConfig+0x342>
 80069cc:	a201      	add	r2, pc, #4	@ (adr r2, 80069d4 <UART_SetConfig+0x300>)
 80069ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d2:	bf00      	nop
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a17 	.word	0x08006a17
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a17 	.word	0x08006a17
 80069e4:	08006a07 	.word	0x08006a07
 80069e8:	08006a17 	.word	0x08006a17
 80069ec:	08006a17 	.word	0x08006a17
 80069f0:	08006a17 	.word	0x08006a17
 80069f4:	08006a0f 	.word	0x08006a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069f8:	f7fe fb0c 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 80069fc:	61f8      	str	r0, [r7, #28]
        break;
 80069fe:	e010      	b.n	8006a22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a00:	4b8f      	ldr	r3, [pc, #572]	@ (8006c40 <UART_SetConfig+0x56c>)
 8006a02:	61fb      	str	r3, [r7, #28]
        break;
 8006a04:	e00d      	b.n	8006a22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a06:	f7fe fa6d 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8006a0a:	61f8      	str	r0, [r7, #28]
        break;
 8006a0c:	e009      	b.n	8006a22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a12:	61fb      	str	r3, [r7, #28]
        break;
 8006a14:	e005      	b.n	8006a22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80fb 	beq.w	8006c20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d305      	bcc.n	8006a46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d903      	bls.n	8006a4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a4c:	e0e8      	b.n	8006c20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	2200      	movs	r2, #0
 8006a52:	461c      	mov	r4, r3
 8006a54:	4615      	mov	r5, r2
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	022b      	lsls	r3, r5, #8
 8006a60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a64:	0222      	lsls	r2, r4, #8
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	6849      	ldr	r1, [r1, #4]
 8006a6a:	0849      	lsrs	r1, r1, #1
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	4688      	mov	r8, r1
 8006a70:	4681      	mov	r9, r0
 8006a72:	eb12 0a08 	adds.w	sl, r2, r8
 8006a76:	eb43 0b09 	adc.w	fp, r3, r9
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a88:	4650      	mov	r0, sl
 8006a8a:	4659      	mov	r1, fp
 8006a8c:	f7f9 fbf8 	bl	8000280 <__aeabi_uldivmod>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4613      	mov	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a9e:	d308      	bcc.n	8006ab2 <UART_SetConfig+0x3de>
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aa6:	d204      	bcs.n	8006ab2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	60da      	str	r2, [r3, #12]
 8006ab0:	e0b6      	b.n	8006c20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ab8:	e0b2      	b.n	8006c20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac2:	d15e      	bne.n	8006b82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d828      	bhi.n	8006b1e <UART_SetConfig+0x44a>
 8006acc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad4 <UART_SetConfig+0x400>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	08006b1f 	.word	0x08006b1f
 8006ae4:	08006b0f 	.word	0x08006b0f
 8006ae8:	08006b1f 	.word	0x08006b1f
 8006aec:	08006b1f 	.word	0x08006b1f
 8006af0:	08006b1f 	.word	0x08006b1f
 8006af4:	08006b17 	.word	0x08006b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7fe fa8c 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8006afc:	61f8      	str	r0, [r7, #28]
        break;
 8006afe:	e014      	b.n	8006b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b00:	f7fe fa9e 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 8006b04:	61f8      	str	r0, [r7, #28]
        break;
 8006b06:	e010      	b.n	8006b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b08:	4b4d      	ldr	r3, [pc, #308]	@ (8006c40 <UART_SetConfig+0x56c>)
 8006b0a:	61fb      	str	r3, [r7, #28]
        break;
 8006b0c:	e00d      	b.n	8006b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0e:	f7fe f9e9 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8006b12:	61f8      	str	r0, [r7, #28]
        break;
 8006b14:	e009      	b.n	8006b2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b1a:	61fb      	str	r3, [r7, #28]
        break;
 8006b1c:	e005      	b.n	8006b2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d077      	beq.n	8006c20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	005a      	lsls	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	085b      	lsrs	r3, r3, #1
 8006b3a:	441a      	add	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b0f      	cmp	r3, #15
 8006b4a:	d916      	bls.n	8006b7a <UART_SetConfig+0x4a6>
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b52:	d212      	bcs.n	8006b7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f023 030f 	bic.w	r3, r3, #15
 8006b5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	085b      	lsrs	r3, r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	8afb      	ldrh	r3, [r7, #22]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	8afa      	ldrh	r2, [r7, #22]
 8006b76:	60da      	str	r2, [r3, #12]
 8006b78:	e052      	b.n	8006c20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b80:	e04e      	b.n	8006c20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d827      	bhi.n	8006bda <UART_SetConfig+0x506>
 8006b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b90 <UART_SetConfig+0x4bc>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006bb5 	.word	0x08006bb5
 8006b94:	08006bbd 	.word	0x08006bbd
 8006b98:	08006bc5 	.word	0x08006bc5
 8006b9c:	08006bdb 	.word	0x08006bdb
 8006ba0:	08006bcb 	.word	0x08006bcb
 8006ba4:	08006bdb 	.word	0x08006bdb
 8006ba8:	08006bdb 	.word	0x08006bdb
 8006bac:	08006bdb 	.word	0x08006bdb
 8006bb0:	08006bd3 	.word	0x08006bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb4:	f7fe fa2e 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8006bb8:	61f8      	str	r0, [r7, #28]
        break;
 8006bba:	e014      	b.n	8006be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bbc:	f7fe fa40 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 8006bc0:	61f8      	str	r0, [r7, #28]
        break;
 8006bc2:	e010      	b.n	8006be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c40 <UART_SetConfig+0x56c>)
 8006bc6:	61fb      	str	r3, [r7, #28]
        break;
 8006bc8:	e00d      	b.n	8006be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bca:	f7fe f98b 	bl	8004ee4 <HAL_RCC_GetSysClockFreq>
 8006bce:	61f8      	str	r0, [r7, #28]
        break;
 8006bd0:	e009      	b.n	8006be6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd6:	61fb      	str	r3, [r7, #28]
        break;
 8006bd8:	e005      	b.n	8006be6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006be4:	bf00      	nop
    }

    if (pclk != 0U)
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d019      	beq.n	8006c20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	085a      	lsrs	r2, r3, #1
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	441a      	add	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b0f      	cmp	r3, #15
 8006c04:	d909      	bls.n	8006c1a <UART_SetConfig+0x546>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0c:	d205      	bcs.n	8006c1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60da      	str	r2, [r3, #12]
 8006c18:	e002      	b.n	8006c20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3728      	adds	r7, #40	@ 0x28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40008000 	.word	0x40008000
 8006c40:	00f42400 	.word	0x00f42400

08006c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c50:	f003 0308 	and.w	r3, r3, #8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d42:	d10a      	bne.n	8006d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b098      	sub	sp, #96	@ 0x60
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d98:	f7fa fe44 	bl	8001a24 <HAL_GetTick>
 8006d9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d12e      	bne.n	8006e0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f88c 	bl	8006ed8 <UART_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d021      	beq.n	8006e0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006de6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e6      	bne.n	8006dc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e062      	b.n	8006ed0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d149      	bne.n	8006eac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e20:	2200      	movs	r2, #0
 8006e22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f856 	bl	8006ed8 <UART_WaitOnFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d03c      	beq.n	8006eac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e6      	bne.n	8006e32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0301 	bic.w	r3, r3, #1
 8006e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e84:	61fa      	str	r2, [r7, #28]
 8006e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	69b9      	ldr	r1, [r7, #24]
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	617b      	str	r3, [r7, #20]
   return(result);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e5      	bne.n	8006e64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e011      	b.n	8006ed0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3758      	adds	r7, #88	@ 0x58
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee8:	e04f      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d04b      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef2:	f7fa fd97 	bl	8001a24 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d302      	bcc.n	8006f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e04e      	b.n	8006faa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d037      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b80      	cmp	r3, #128	@ 0x80
 8006f1e:	d034      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b40      	cmp	r3, #64	@ 0x40
 8006f24:	d031      	beq.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d110      	bne.n	8006f56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f838 	bl	8006fb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2208      	movs	r2, #8
 8006f46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e029      	b.n	8006faa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f64:	d111      	bne.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f81e 	bl	8006fb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e00f      	b.n	8006faa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4013      	ands	r3, r2
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d0a0      	beq.n	8006eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b095      	sub	sp, #84	@ 0x54
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e6      	bne.n	8006fba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800700c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800700e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e5      	bne.n	8006fec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007024:	2b01      	cmp	r3, #1
 8007026:	d118      	bne.n	800705a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	60bb      	str	r3, [r7, #8]
   return(result);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f023 0310 	bic.w	r3, r3, #16
 800703c:	647b      	str	r3, [r7, #68]	@ 0x44
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6979      	ldr	r1, [r7, #20]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	613b      	str	r3, [r7, #16]
   return(result);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e6      	bne.n	8007028 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800706e:	bf00      	nop
 8007070:	3754      	adds	r7, #84	@ 0x54
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <siprintf>:
 800707c:	b40e      	push	{r1, r2, r3}
 800707e:	b500      	push	{lr}
 8007080:	b09c      	sub	sp, #112	@ 0x70
 8007082:	ab1d      	add	r3, sp, #116	@ 0x74
 8007084:	9002      	str	r0, [sp, #8]
 8007086:	9006      	str	r0, [sp, #24]
 8007088:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800708c:	4809      	ldr	r0, [pc, #36]	@ (80070b4 <siprintf+0x38>)
 800708e:	9107      	str	r1, [sp, #28]
 8007090:	9104      	str	r1, [sp, #16]
 8007092:	4909      	ldr	r1, [pc, #36]	@ (80070b8 <siprintf+0x3c>)
 8007094:	f853 2b04 	ldr.w	r2, [r3], #4
 8007098:	9105      	str	r1, [sp, #20]
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	a902      	add	r1, sp, #8
 80070a0:	f000 f994 	bl	80073cc <_svfiprintf_r>
 80070a4:	9b02      	ldr	r3, [sp, #8]
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	b01c      	add	sp, #112	@ 0x70
 80070ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b0:	b003      	add	sp, #12
 80070b2:	4770      	bx	lr
 80070b4:	20000024 	.word	0x20000024
 80070b8:	ffff0208 	.word	0xffff0208

080070bc <memset>:
 80070bc:	4402      	add	r2, r0
 80070be:	4603      	mov	r3, r0
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d100      	bne.n	80070c6 <memset+0xa>
 80070c4:	4770      	bx	lr
 80070c6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ca:	e7f9      	b.n	80070c0 <memset+0x4>

080070cc <__errno>:
 80070cc:	4b01      	ldr	r3, [pc, #4]	@ (80070d4 <__errno+0x8>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000024 	.word	0x20000024

080070d8 <__libc_init_array>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4d0d      	ldr	r5, [pc, #52]	@ (8007110 <__libc_init_array+0x38>)
 80070dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007114 <__libc_init_array+0x3c>)
 80070de:	1b64      	subs	r4, r4, r5
 80070e0:	10a4      	asrs	r4, r4, #2
 80070e2:	2600      	movs	r6, #0
 80070e4:	42a6      	cmp	r6, r4
 80070e6:	d109      	bne.n	80070fc <__libc_init_array+0x24>
 80070e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007118 <__libc_init_array+0x40>)
 80070ea:	4c0c      	ldr	r4, [pc, #48]	@ (800711c <__libc_init_array+0x44>)
 80070ec:	f000 fc66 	bl	80079bc <_init>
 80070f0:	1b64      	subs	r4, r4, r5
 80070f2:	10a4      	asrs	r4, r4, #2
 80070f4:	2600      	movs	r6, #0
 80070f6:	42a6      	cmp	r6, r4
 80070f8:	d105      	bne.n	8007106 <__libc_init_array+0x2e>
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007100:	4798      	blx	r3
 8007102:	3601      	adds	r6, #1
 8007104:	e7ee      	b.n	80070e4 <__libc_init_array+0xc>
 8007106:	f855 3b04 	ldr.w	r3, [r5], #4
 800710a:	4798      	blx	r3
 800710c:	3601      	adds	r6, #1
 800710e:	e7f2      	b.n	80070f6 <__libc_init_array+0x1e>
 8007110:	08007ae8 	.word	0x08007ae8
 8007114:	08007ae8 	.word	0x08007ae8
 8007118:	08007ae8 	.word	0x08007ae8
 800711c:	08007aec 	.word	0x08007aec

08007120 <__retarget_lock_acquire_recursive>:
 8007120:	4770      	bx	lr

08007122 <__retarget_lock_release_recursive>:
 8007122:	4770      	bx	lr

08007124 <_free_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4605      	mov	r5, r0
 8007128:	2900      	cmp	r1, #0
 800712a:	d041      	beq.n	80071b0 <_free_r+0x8c>
 800712c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007130:	1f0c      	subs	r4, r1, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	bfb8      	it	lt
 8007136:	18e4      	addlt	r4, r4, r3
 8007138:	f000 f8e0 	bl	80072fc <__malloc_lock>
 800713c:	4a1d      	ldr	r2, [pc, #116]	@ (80071b4 <_free_r+0x90>)
 800713e:	6813      	ldr	r3, [r2, #0]
 8007140:	b933      	cbnz	r3, 8007150 <_free_r+0x2c>
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	6014      	str	r4, [r2, #0]
 8007146:	4628      	mov	r0, r5
 8007148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800714c:	f000 b8dc 	b.w	8007308 <__malloc_unlock>
 8007150:	42a3      	cmp	r3, r4
 8007152:	d908      	bls.n	8007166 <_free_r+0x42>
 8007154:	6820      	ldr	r0, [r4, #0]
 8007156:	1821      	adds	r1, r4, r0
 8007158:	428b      	cmp	r3, r1
 800715a:	bf01      	itttt	eq
 800715c:	6819      	ldreq	r1, [r3, #0]
 800715e:	685b      	ldreq	r3, [r3, #4]
 8007160:	1809      	addeq	r1, r1, r0
 8007162:	6021      	streq	r1, [r4, #0]
 8007164:	e7ed      	b.n	8007142 <_free_r+0x1e>
 8007166:	461a      	mov	r2, r3
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	b10b      	cbz	r3, 8007170 <_free_r+0x4c>
 800716c:	42a3      	cmp	r3, r4
 800716e:	d9fa      	bls.n	8007166 <_free_r+0x42>
 8007170:	6811      	ldr	r1, [r2, #0]
 8007172:	1850      	adds	r0, r2, r1
 8007174:	42a0      	cmp	r0, r4
 8007176:	d10b      	bne.n	8007190 <_free_r+0x6c>
 8007178:	6820      	ldr	r0, [r4, #0]
 800717a:	4401      	add	r1, r0
 800717c:	1850      	adds	r0, r2, r1
 800717e:	4283      	cmp	r3, r0
 8007180:	6011      	str	r1, [r2, #0]
 8007182:	d1e0      	bne.n	8007146 <_free_r+0x22>
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	6053      	str	r3, [r2, #4]
 800718a:	4408      	add	r0, r1
 800718c:	6010      	str	r0, [r2, #0]
 800718e:	e7da      	b.n	8007146 <_free_r+0x22>
 8007190:	d902      	bls.n	8007198 <_free_r+0x74>
 8007192:	230c      	movs	r3, #12
 8007194:	602b      	str	r3, [r5, #0]
 8007196:	e7d6      	b.n	8007146 <_free_r+0x22>
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	1821      	adds	r1, r4, r0
 800719c:	428b      	cmp	r3, r1
 800719e:	bf04      	itt	eq
 80071a0:	6819      	ldreq	r1, [r3, #0]
 80071a2:	685b      	ldreq	r3, [r3, #4]
 80071a4:	6063      	str	r3, [r4, #4]
 80071a6:	bf04      	itt	eq
 80071a8:	1809      	addeq	r1, r1, r0
 80071aa:	6021      	streq	r1, [r4, #0]
 80071ac:	6054      	str	r4, [r2, #4]
 80071ae:	e7ca      	b.n	8007146 <_free_r+0x22>
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	bf00      	nop
 80071b4:	20011a6c 	.word	0x20011a6c

080071b8 <sbrk_aligned>:
 80071b8:	b570      	push	{r4, r5, r6, lr}
 80071ba:	4e0f      	ldr	r6, [pc, #60]	@ (80071f8 <sbrk_aligned+0x40>)
 80071bc:	460c      	mov	r4, r1
 80071be:	6831      	ldr	r1, [r6, #0]
 80071c0:	4605      	mov	r5, r0
 80071c2:	b911      	cbnz	r1, 80071ca <sbrk_aligned+0x12>
 80071c4:	f000 fba6 	bl	8007914 <_sbrk_r>
 80071c8:	6030      	str	r0, [r6, #0]
 80071ca:	4621      	mov	r1, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	f000 fba1 	bl	8007914 <_sbrk_r>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d103      	bne.n	80071de <sbrk_aligned+0x26>
 80071d6:	f04f 34ff 	mov.w	r4, #4294967295
 80071da:	4620      	mov	r0, r4
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	1cc4      	adds	r4, r0, #3
 80071e0:	f024 0403 	bic.w	r4, r4, #3
 80071e4:	42a0      	cmp	r0, r4
 80071e6:	d0f8      	beq.n	80071da <sbrk_aligned+0x22>
 80071e8:	1a21      	subs	r1, r4, r0
 80071ea:	4628      	mov	r0, r5
 80071ec:	f000 fb92 	bl	8007914 <_sbrk_r>
 80071f0:	3001      	adds	r0, #1
 80071f2:	d1f2      	bne.n	80071da <sbrk_aligned+0x22>
 80071f4:	e7ef      	b.n	80071d6 <sbrk_aligned+0x1e>
 80071f6:	bf00      	nop
 80071f8:	20011a68 	.word	0x20011a68

080071fc <_malloc_r>:
 80071fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007200:	1ccd      	adds	r5, r1, #3
 8007202:	f025 0503 	bic.w	r5, r5, #3
 8007206:	3508      	adds	r5, #8
 8007208:	2d0c      	cmp	r5, #12
 800720a:	bf38      	it	cc
 800720c:	250c      	movcc	r5, #12
 800720e:	2d00      	cmp	r5, #0
 8007210:	4606      	mov	r6, r0
 8007212:	db01      	blt.n	8007218 <_malloc_r+0x1c>
 8007214:	42a9      	cmp	r1, r5
 8007216:	d904      	bls.n	8007222 <_malloc_r+0x26>
 8007218:	230c      	movs	r3, #12
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	2000      	movs	r0, #0
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007222:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072f8 <_malloc_r+0xfc>
 8007226:	f000 f869 	bl	80072fc <__malloc_lock>
 800722a:	f8d8 3000 	ldr.w	r3, [r8]
 800722e:	461c      	mov	r4, r3
 8007230:	bb44      	cbnz	r4, 8007284 <_malloc_r+0x88>
 8007232:	4629      	mov	r1, r5
 8007234:	4630      	mov	r0, r6
 8007236:	f7ff ffbf 	bl	80071b8 <sbrk_aligned>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	4604      	mov	r4, r0
 800723e:	d158      	bne.n	80072f2 <_malloc_r+0xf6>
 8007240:	f8d8 4000 	ldr.w	r4, [r8]
 8007244:	4627      	mov	r7, r4
 8007246:	2f00      	cmp	r7, #0
 8007248:	d143      	bne.n	80072d2 <_malloc_r+0xd6>
 800724a:	2c00      	cmp	r4, #0
 800724c:	d04b      	beq.n	80072e6 <_malloc_r+0xea>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	4639      	mov	r1, r7
 8007252:	4630      	mov	r0, r6
 8007254:	eb04 0903 	add.w	r9, r4, r3
 8007258:	f000 fb5c 	bl	8007914 <_sbrk_r>
 800725c:	4581      	cmp	r9, r0
 800725e:	d142      	bne.n	80072e6 <_malloc_r+0xea>
 8007260:	6821      	ldr	r1, [r4, #0]
 8007262:	1a6d      	subs	r5, r5, r1
 8007264:	4629      	mov	r1, r5
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff ffa6 	bl	80071b8 <sbrk_aligned>
 800726c:	3001      	adds	r0, #1
 800726e:	d03a      	beq.n	80072e6 <_malloc_r+0xea>
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	442b      	add	r3, r5
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	f8d8 3000 	ldr.w	r3, [r8]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	bb62      	cbnz	r2, 80072d8 <_malloc_r+0xdc>
 800727e:	f8c8 7000 	str.w	r7, [r8]
 8007282:	e00f      	b.n	80072a4 <_malloc_r+0xa8>
 8007284:	6822      	ldr	r2, [r4, #0]
 8007286:	1b52      	subs	r2, r2, r5
 8007288:	d420      	bmi.n	80072cc <_malloc_r+0xd0>
 800728a:	2a0b      	cmp	r2, #11
 800728c:	d917      	bls.n	80072be <_malloc_r+0xc2>
 800728e:	1961      	adds	r1, r4, r5
 8007290:	42a3      	cmp	r3, r4
 8007292:	6025      	str	r5, [r4, #0]
 8007294:	bf18      	it	ne
 8007296:	6059      	strne	r1, [r3, #4]
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	bf08      	it	eq
 800729c:	f8c8 1000 	streq.w	r1, [r8]
 80072a0:	5162      	str	r2, [r4, r5]
 80072a2:	604b      	str	r3, [r1, #4]
 80072a4:	4630      	mov	r0, r6
 80072a6:	f000 f82f 	bl	8007308 <__malloc_unlock>
 80072aa:	f104 000b 	add.w	r0, r4, #11
 80072ae:	1d23      	adds	r3, r4, #4
 80072b0:	f020 0007 	bic.w	r0, r0, #7
 80072b4:	1ac2      	subs	r2, r0, r3
 80072b6:	bf1c      	itt	ne
 80072b8:	1a1b      	subne	r3, r3, r0
 80072ba:	50a3      	strne	r3, [r4, r2]
 80072bc:	e7af      	b.n	800721e <_malloc_r+0x22>
 80072be:	6862      	ldr	r2, [r4, #4]
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	bf0c      	ite	eq
 80072c4:	f8c8 2000 	streq.w	r2, [r8]
 80072c8:	605a      	strne	r2, [r3, #4]
 80072ca:	e7eb      	b.n	80072a4 <_malloc_r+0xa8>
 80072cc:	4623      	mov	r3, r4
 80072ce:	6864      	ldr	r4, [r4, #4]
 80072d0:	e7ae      	b.n	8007230 <_malloc_r+0x34>
 80072d2:	463c      	mov	r4, r7
 80072d4:	687f      	ldr	r7, [r7, #4]
 80072d6:	e7b6      	b.n	8007246 <_malloc_r+0x4a>
 80072d8:	461a      	mov	r2, r3
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	42a3      	cmp	r3, r4
 80072de:	d1fb      	bne.n	80072d8 <_malloc_r+0xdc>
 80072e0:	2300      	movs	r3, #0
 80072e2:	6053      	str	r3, [r2, #4]
 80072e4:	e7de      	b.n	80072a4 <_malloc_r+0xa8>
 80072e6:	230c      	movs	r3, #12
 80072e8:	6033      	str	r3, [r6, #0]
 80072ea:	4630      	mov	r0, r6
 80072ec:	f000 f80c 	bl	8007308 <__malloc_unlock>
 80072f0:	e794      	b.n	800721c <_malloc_r+0x20>
 80072f2:	6005      	str	r5, [r0, #0]
 80072f4:	e7d6      	b.n	80072a4 <_malloc_r+0xa8>
 80072f6:	bf00      	nop
 80072f8:	20011a6c 	.word	0x20011a6c

080072fc <__malloc_lock>:
 80072fc:	4801      	ldr	r0, [pc, #4]	@ (8007304 <__malloc_lock+0x8>)
 80072fe:	f7ff bf0f 	b.w	8007120 <__retarget_lock_acquire_recursive>
 8007302:	bf00      	nop
 8007304:	20011a64 	.word	0x20011a64

08007308 <__malloc_unlock>:
 8007308:	4801      	ldr	r0, [pc, #4]	@ (8007310 <__malloc_unlock+0x8>)
 800730a:	f7ff bf0a 	b.w	8007122 <__retarget_lock_release_recursive>
 800730e:	bf00      	nop
 8007310:	20011a64 	.word	0x20011a64

08007314 <__ssputs_r>:
 8007314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	688e      	ldr	r6, [r1, #8]
 800731a:	461f      	mov	r7, r3
 800731c:	42be      	cmp	r6, r7
 800731e:	680b      	ldr	r3, [r1, #0]
 8007320:	4682      	mov	sl, r0
 8007322:	460c      	mov	r4, r1
 8007324:	4690      	mov	r8, r2
 8007326:	d82d      	bhi.n	8007384 <__ssputs_r+0x70>
 8007328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800732c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007330:	d026      	beq.n	8007380 <__ssputs_r+0x6c>
 8007332:	6965      	ldr	r5, [r4, #20]
 8007334:	6909      	ldr	r1, [r1, #16]
 8007336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800733a:	eba3 0901 	sub.w	r9, r3, r1
 800733e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007342:	1c7b      	adds	r3, r7, #1
 8007344:	444b      	add	r3, r9
 8007346:	106d      	asrs	r5, r5, #1
 8007348:	429d      	cmp	r5, r3
 800734a:	bf38      	it	cc
 800734c:	461d      	movcc	r5, r3
 800734e:	0553      	lsls	r3, r2, #21
 8007350:	d527      	bpl.n	80073a2 <__ssputs_r+0x8e>
 8007352:	4629      	mov	r1, r5
 8007354:	f7ff ff52 	bl	80071fc <_malloc_r>
 8007358:	4606      	mov	r6, r0
 800735a:	b360      	cbz	r0, 80073b6 <__ssputs_r+0xa2>
 800735c:	6921      	ldr	r1, [r4, #16]
 800735e:	464a      	mov	r2, r9
 8007360:	f000 fae8 	bl	8007934 <memcpy>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800736a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800736e:	81a3      	strh	r3, [r4, #12]
 8007370:	6126      	str	r6, [r4, #16]
 8007372:	6165      	str	r5, [r4, #20]
 8007374:	444e      	add	r6, r9
 8007376:	eba5 0509 	sub.w	r5, r5, r9
 800737a:	6026      	str	r6, [r4, #0]
 800737c:	60a5      	str	r5, [r4, #8]
 800737e:	463e      	mov	r6, r7
 8007380:	42be      	cmp	r6, r7
 8007382:	d900      	bls.n	8007386 <__ssputs_r+0x72>
 8007384:	463e      	mov	r6, r7
 8007386:	6820      	ldr	r0, [r4, #0]
 8007388:	4632      	mov	r2, r6
 800738a:	4641      	mov	r1, r8
 800738c:	f000 faa8 	bl	80078e0 <memmove>
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	1b9b      	subs	r3, r3, r6
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	4433      	add	r3, r6
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	2000      	movs	r0, #0
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	462a      	mov	r2, r5
 80073a4:	f000 fad4 	bl	8007950 <_realloc_r>
 80073a8:	4606      	mov	r6, r0
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d1e0      	bne.n	8007370 <__ssputs_r+0x5c>
 80073ae:	6921      	ldr	r1, [r4, #16]
 80073b0:	4650      	mov	r0, sl
 80073b2:	f7ff feb7 	bl	8007124 <_free_r>
 80073b6:	230c      	movs	r3, #12
 80073b8:	f8ca 3000 	str.w	r3, [sl]
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	e7e9      	b.n	800739e <__ssputs_r+0x8a>
	...

080073cc <_svfiprintf_r>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	4698      	mov	r8, r3
 80073d2:	898b      	ldrh	r3, [r1, #12]
 80073d4:	061b      	lsls	r3, r3, #24
 80073d6:	b09d      	sub	sp, #116	@ 0x74
 80073d8:	4607      	mov	r7, r0
 80073da:	460d      	mov	r5, r1
 80073dc:	4614      	mov	r4, r2
 80073de:	d510      	bpl.n	8007402 <_svfiprintf_r+0x36>
 80073e0:	690b      	ldr	r3, [r1, #16]
 80073e2:	b973      	cbnz	r3, 8007402 <_svfiprintf_r+0x36>
 80073e4:	2140      	movs	r1, #64	@ 0x40
 80073e6:	f7ff ff09 	bl	80071fc <_malloc_r>
 80073ea:	6028      	str	r0, [r5, #0]
 80073ec:	6128      	str	r0, [r5, #16]
 80073ee:	b930      	cbnz	r0, 80073fe <_svfiprintf_r+0x32>
 80073f0:	230c      	movs	r3, #12
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	b01d      	add	sp, #116	@ 0x74
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	2340      	movs	r3, #64	@ 0x40
 8007400:	616b      	str	r3, [r5, #20]
 8007402:	2300      	movs	r3, #0
 8007404:	9309      	str	r3, [sp, #36]	@ 0x24
 8007406:	2320      	movs	r3, #32
 8007408:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800740c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007410:	2330      	movs	r3, #48	@ 0x30
 8007412:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075b0 <_svfiprintf_r+0x1e4>
 8007416:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800741a:	f04f 0901 	mov.w	r9, #1
 800741e:	4623      	mov	r3, r4
 8007420:	469a      	mov	sl, r3
 8007422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007426:	b10a      	cbz	r2, 800742c <_svfiprintf_r+0x60>
 8007428:	2a25      	cmp	r2, #37	@ 0x25
 800742a:	d1f9      	bne.n	8007420 <_svfiprintf_r+0x54>
 800742c:	ebba 0b04 	subs.w	fp, sl, r4
 8007430:	d00b      	beq.n	800744a <_svfiprintf_r+0x7e>
 8007432:	465b      	mov	r3, fp
 8007434:	4622      	mov	r2, r4
 8007436:	4629      	mov	r1, r5
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff ff6b 	bl	8007314 <__ssputs_r>
 800743e:	3001      	adds	r0, #1
 8007440:	f000 80a7 	beq.w	8007592 <_svfiprintf_r+0x1c6>
 8007444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007446:	445a      	add	r2, fp
 8007448:	9209      	str	r2, [sp, #36]	@ 0x24
 800744a:	f89a 3000 	ldrb.w	r3, [sl]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 809f 	beq.w	8007592 <_svfiprintf_r+0x1c6>
 8007454:	2300      	movs	r3, #0
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800745e:	f10a 0a01 	add.w	sl, sl, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800746a:	931a      	str	r3, [sp, #104]	@ 0x68
 800746c:	4654      	mov	r4, sl
 800746e:	2205      	movs	r2, #5
 8007470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007474:	484e      	ldr	r0, [pc, #312]	@ (80075b0 <_svfiprintf_r+0x1e4>)
 8007476:	f7f8 feb3 	bl	80001e0 <memchr>
 800747a:	9a04      	ldr	r2, [sp, #16]
 800747c:	b9d8      	cbnz	r0, 80074b6 <_svfiprintf_r+0xea>
 800747e:	06d0      	lsls	r0, r2, #27
 8007480:	bf44      	itt	mi
 8007482:	2320      	movmi	r3, #32
 8007484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007488:	0711      	lsls	r1, r2, #28
 800748a:	bf44      	itt	mi
 800748c:	232b      	movmi	r3, #43	@ 0x2b
 800748e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007492:	f89a 3000 	ldrb.w	r3, [sl]
 8007496:	2b2a      	cmp	r3, #42	@ 0x2a
 8007498:	d015      	beq.n	80074c6 <_svfiprintf_r+0xfa>
 800749a:	9a07      	ldr	r2, [sp, #28]
 800749c:	4654      	mov	r4, sl
 800749e:	2000      	movs	r0, #0
 80074a0:	f04f 0c0a 	mov.w	ip, #10
 80074a4:	4621      	mov	r1, r4
 80074a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074aa:	3b30      	subs	r3, #48	@ 0x30
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	d94b      	bls.n	8007548 <_svfiprintf_r+0x17c>
 80074b0:	b1b0      	cbz	r0, 80074e0 <_svfiprintf_r+0x114>
 80074b2:	9207      	str	r2, [sp, #28]
 80074b4:	e014      	b.n	80074e0 <_svfiprintf_r+0x114>
 80074b6:	eba0 0308 	sub.w	r3, r0, r8
 80074ba:	fa09 f303 	lsl.w	r3, r9, r3
 80074be:	4313      	orrs	r3, r2
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	46a2      	mov	sl, r4
 80074c4:	e7d2      	b.n	800746c <_svfiprintf_r+0xa0>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	9103      	str	r1, [sp, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfbb      	ittet	lt
 80074d2:	425b      	neglt	r3, r3
 80074d4:	f042 0202 	orrlt.w	r2, r2, #2
 80074d8:	9307      	strge	r3, [sp, #28]
 80074da:	9307      	strlt	r3, [sp, #28]
 80074dc:	bfb8      	it	lt
 80074de:	9204      	strlt	r2, [sp, #16]
 80074e0:	7823      	ldrb	r3, [r4, #0]
 80074e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074e4:	d10a      	bne.n	80074fc <_svfiprintf_r+0x130>
 80074e6:	7863      	ldrb	r3, [r4, #1]
 80074e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ea:	d132      	bne.n	8007552 <_svfiprintf_r+0x186>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d1a      	adds	r2, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9203      	str	r2, [sp, #12]
 80074f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074f8:	3402      	adds	r4, #2
 80074fa:	9305      	str	r3, [sp, #20]
 80074fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075c0 <_svfiprintf_r+0x1f4>
 8007500:	7821      	ldrb	r1, [r4, #0]
 8007502:	2203      	movs	r2, #3
 8007504:	4650      	mov	r0, sl
 8007506:	f7f8 fe6b 	bl	80001e0 <memchr>
 800750a:	b138      	cbz	r0, 800751c <_svfiprintf_r+0x150>
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	eba0 000a 	sub.w	r0, r0, sl
 8007512:	2240      	movs	r2, #64	@ 0x40
 8007514:	4082      	lsls	r2, r0
 8007516:	4313      	orrs	r3, r2
 8007518:	3401      	adds	r4, #1
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007520:	4824      	ldr	r0, [pc, #144]	@ (80075b4 <_svfiprintf_r+0x1e8>)
 8007522:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007526:	2206      	movs	r2, #6
 8007528:	f7f8 fe5a 	bl	80001e0 <memchr>
 800752c:	2800      	cmp	r0, #0
 800752e:	d036      	beq.n	800759e <_svfiprintf_r+0x1d2>
 8007530:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <_svfiprintf_r+0x1ec>)
 8007532:	bb1b      	cbnz	r3, 800757c <_svfiprintf_r+0x1b0>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	3307      	adds	r3, #7
 8007538:	f023 0307 	bic.w	r3, r3, #7
 800753c:	3308      	adds	r3, #8
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007542:	4433      	add	r3, r6
 8007544:	9309      	str	r3, [sp, #36]	@ 0x24
 8007546:	e76a      	b.n	800741e <_svfiprintf_r+0x52>
 8007548:	fb0c 3202 	mla	r2, ip, r2, r3
 800754c:	460c      	mov	r4, r1
 800754e:	2001      	movs	r0, #1
 8007550:	e7a8      	b.n	80074a4 <_svfiprintf_r+0xd8>
 8007552:	2300      	movs	r3, #0
 8007554:	3401      	adds	r4, #1
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	4619      	mov	r1, r3
 800755a:	f04f 0c0a 	mov.w	ip, #10
 800755e:	4620      	mov	r0, r4
 8007560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007564:	3a30      	subs	r2, #48	@ 0x30
 8007566:	2a09      	cmp	r2, #9
 8007568:	d903      	bls.n	8007572 <_svfiprintf_r+0x1a6>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0c6      	beq.n	80074fc <_svfiprintf_r+0x130>
 800756e:	9105      	str	r1, [sp, #20]
 8007570:	e7c4      	b.n	80074fc <_svfiprintf_r+0x130>
 8007572:	fb0c 2101 	mla	r1, ip, r1, r2
 8007576:	4604      	mov	r4, r0
 8007578:	2301      	movs	r3, #1
 800757a:	e7f0      	b.n	800755e <_svfiprintf_r+0x192>
 800757c:	ab03      	add	r3, sp, #12
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	462a      	mov	r2, r5
 8007582:	4b0e      	ldr	r3, [pc, #56]	@ (80075bc <_svfiprintf_r+0x1f0>)
 8007584:	a904      	add	r1, sp, #16
 8007586:	4638      	mov	r0, r7
 8007588:	f3af 8000 	nop.w
 800758c:	1c42      	adds	r2, r0, #1
 800758e:	4606      	mov	r6, r0
 8007590:	d1d6      	bne.n	8007540 <_svfiprintf_r+0x174>
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	065b      	lsls	r3, r3, #25
 8007596:	f53f af2d 	bmi.w	80073f4 <_svfiprintf_r+0x28>
 800759a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800759c:	e72c      	b.n	80073f8 <_svfiprintf_r+0x2c>
 800759e:	ab03      	add	r3, sp, #12
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	462a      	mov	r2, r5
 80075a4:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <_svfiprintf_r+0x1f0>)
 80075a6:	a904      	add	r1, sp, #16
 80075a8:	4638      	mov	r0, r7
 80075aa:	f000 f879 	bl	80076a0 <_printf_i>
 80075ae:	e7ed      	b.n	800758c <_svfiprintf_r+0x1c0>
 80075b0:	08007aac 	.word	0x08007aac
 80075b4:	08007ab6 	.word	0x08007ab6
 80075b8:	00000000 	.word	0x00000000
 80075bc:	08007315 	.word	0x08007315
 80075c0:	08007ab2 	.word	0x08007ab2

080075c4 <_printf_common>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	4616      	mov	r6, r2
 80075ca:	4698      	mov	r8, r3
 80075cc:	688a      	ldr	r2, [r1, #8]
 80075ce:	690b      	ldr	r3, [r1, #16]
 80075d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	bfb8      	it	lt
 80075d8:	4613      	movlt	r3, r2
 80075da:	6033      	str	r3, [r6, #0]
 80075dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075e0:	4607      	mov	r7, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	b10a      	cbz	r2, 80075ea <_printf_common+0x26>
 80075e6:	3301      	adds	r3, #1
 80075e8:	6033      	str	r3, [r6, #0]
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	0699      	lsls	r1, r3, #26
 80075ee:	bf42      	ittt	mi
 80075f0:	6833      	ldrmi	r3, [r6, #0]
 80075f2:	3302      	addmi	r3, #2
 80075f4:	6033      	strmi	r3, [r6, #0]
 80075f6:	6825      	ldr	r5, [r4, #0]
 80075f8:	f015 0506 	ands.w	r5, r5, #6
 80075fc:	d106      	bne.n	800760c <_printf_common+0x48>
 80075fe:	f104 0a19 	add.w	sl, r4, #25
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	6832      	ldr	r2, [r6, #0]
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	42ab      	cmp	r3, r5
 800760a:	dc26      	bgt.n	800765a <_printf_common+0x96>
 800760c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	3b00      	subs	r3, #0
 8007614:	bf18      	it	ne
 8007616:	2301      	movne	r3, #1
 8007618:	0692      	lsls	r2, r2, #26
 800761a:	d42b      	bmi.n	8007674 <_printf_common+0xb0>
 800761c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007620:	4641      	mov	r1, r8
 8007622:	4638      	mov	r0, r7
 8007624:	47c8      	blx	r9
 8007626:	3001      	adds	r0, #1
 8007628:	d01e      	beq.n	8007668 <_printf_common+0xa4>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	6922      	ldr	r2, [r4, #16]
 800762e:	f003 0306 	and.w	r3, r3, #6
 8007632:	2b04      	cmp	r3, #4
 8007634:	bf02      	ittt	eq
 8007636:	68e5      	ldreq	r5, [r4, #12]
 8007638:	6833      	ldreq	r3, [r6, #0]
 800763a:	1aed      	subeq	r5, r5, r3
 800763c:	68a3      	ldr	r3, [r4, #8]
 800763e:	bf0c      	ite	eq
 8007640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007644:	2500      	movne	r5, #0
 8007646:	4293      	cmp	r3, r2
 8007648:	bfc4      	itt	gt
 800764a:	1a9b      	subgt	r3, r3, r2
 800764c:	18ed      	addgt	r5, r5, r3
 800764e:	2600      	movs	r6, #0
 8007650:	341a      	adds	r4, #26
 8007652:	42b5      	cmp	r5, r6
 8007654:	d11a      	bne.n	800768c <_printf_common+0xc8>
 8007656:	2000      	movs	r0, #0
 8007658:	e008      	b.n	800766c <_printf_common+0xa8>
 800765a:	2301      	movs	r3, #1
 800765c:	4652      	mov	r2, sl
 800765e:	4641      	mov	r1, r8
 8007660:	4638      	mov	r0, r7
 8007662:	47c8      	blx	r9
 8007664:	3001      	adds	r0, #1
 8007666:	d103      	bne.n	8007670 <_printf_common+0xac>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007670:	3501      	adds	r5, #1
 8007672:	e7c6      	b.n	8007602 <_printf_common+0x3e>
 8007674:	18e1      	adds	r1, r4, r3
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	2030      	movs	r0, #48	@ 0x30
 800767a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800767e:	4422      	add	r2, r4
 8007680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007688:	3302      	adds	r3, #2
 800768a:	e7c7      	b.n	800761c <_printf_common+0x58>
 800768c:	2301      	movs	r3, #1
 800768e:	4622      	mov	r2, r4
 8007690:	4641      	mov	r1, r8
 8007692:	4638      	mov	r0, r7
 8007694:	47c8      	blx	r9
 8007696:	3001      	adds	r0, #1
 8007698:	d0e6      	beq.n	8007668 <_printf_common+0xa4>
 800769a:	3601      	adds	r6, #1
 800769c:	e7d9      	b.n	8007652 <_printf_common+0x8e>
	...

080076a0 <_printf_i>:
 80076a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a4:	7e0f      	ldrb	r7, [r1, #24]
 80076a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076a8:	2f78      	cmp	r7, #120	@ 0x78
 80076aa:	4691      	mov	r9, r2
 80076ac:	4680      	mov	r8, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	469a      	mov	sl, r3
 80076b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076b6:	d807      	bhi.n	80076c8 <_printf_i+0x28>
 80076b8:	2f62      	cmp	r7, #98	@ 0x62
 80076ba:	d80a      	bhi.n	80076d2 <_printf_i+0x32>
 80076bc:	2f00      	cmp	r7, #0
 80076be:	f000 80d2 	beq.w	8007866 <_printf_i+0x1c6>
 80076c2:	2f58      	cmp	r7, #88	@ 0x58
 80076c4:	f000 80b9 	beq.w	800783a <_printf_i+0x19a>
 80076c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076d0:	e03a      	b.n	8007748 <_printf_i+0xa8>
 80076d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076d6:	2b15      	cmp	r3, #21
 80076d8:	d8f6      	bhi.n	80076c8 <_printf_i+0x28>
 80076da:	a101      	add	r1, pc, #4	@ (adr r1, 80076e0 <_printf_i+0x40>)
 80076dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e0:	08007739 	.word	0x08007739
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	080076c9 	.word	0x080076c9
 80076ec:	080076c9 	.word	0x080076c9
 80076f0:	080076c9 	.word	0x080076c9
 80076f4:	080076c9 	.word	0x080076c9
 80076f8:	0800774d 	.word	0x0800774d
 80076fc:	080076c9 	.word	0x080076c9
 8007700:	080076c9 	.word	0x080076c9
 8007704:	080076c9 	.word	0x080076c9
 8007708:	080076c9 	.word	0x080076c9
 800770c:	0800784d 	.word	0x0800784d
 8007710:	08007777 	.word	0x08007777
 8007714:	08007807 	.word	0x08007807
 8007718:	080076c9 	.word	0x080076c9
 800771c:	080076c9 	.word	0x080076c9
 8007720:	0800786f 	.word	0x0800786f
 8007724:	080076c9 	.word	0x080076c9
 8007728:	08007777 	.word	0x08007777
 800772c:	080076c9 	.word	0x080076c9
 8007730:	080076c9 	.word	0x080076c9
 8007734:	0800780f 	.word	0x0800780f
 8007738:	6833      	ldr	r3, [r6, #0]
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6032      	str	r2, [r6, #0]
 8007740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007748:	2301      	movs	r3, #1
 800774a:	e09d      	b.n	8007888 <_printf_i+0x1e8>
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	1d19      	adds	r1, r3, #4
 8007752:	6031      	str	r1, [r6, #0]
 8007754:	0606      	lsls	r6, r0, #24
 8007756:	d501      	bpl.n	800775c <_printf_i+0xbc>
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	e003      	b.n	8007764 <_printf_i+0xc4>
 800775c:	0645      	lsls	r5, r0, #25
 800775e:	d5fb      	bpl.n	8007758 <_printf_i+0xb8>
 8007760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007764:	2d00      	cmp	r5, #0
 8007766:	da03      	bge.n	8007770 <_printf_i+0xd0>
 8007768:	232d      	movs	r3, #45	@ 0x2d
 800776a:	426d      	negs	r5, r5
 800776c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007770:	4859      	ldr	r0, [pc, #356]	@ (80078d8 <_printf_i+0x238>)
 8007772:	230a      	movs	r3, #10
 8007774:	e011      	b.n	800779a <_printf_i+0xfa>
 8007776:	6821      	ldr	r1, [r4, #0]
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	0608      	lsls	r0, r1, #24
 800777c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007780:	d402      	bmi.n	8007788 <_printf_i+0xe8>
 8007782:	0649      	lsls	r1, r1, #25
 8007784:	bf48      	it	mi
 8007786:	b2ad      	uxthmi	r5, r5
 8007788:	2f6f      	cmp	r7, #111	@ 0x6f
 800778a:	4853      	ldr	r0, [pc, #332]	@ (80078d8 <_printf_i+0x238>)
 800778c:	6033      	str	r3, [r6, #0]
 800778e:	bf14      	ite	ne
 8007790:	230a      	movne	r3, #10
 8007792:	2308      	moveq	r3, #8
 8007794:	2100      	movs	r1, #0
 8007796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800779a:	6866      	ldr	r6, [r4, #4]
 800779c:	60a6      	str	r6, [r4, #8]
 800779e:	2e00      	cmp	r6, #0
 80077a0:	bfa2      	ittt	ge
 80077a2:	6821      	ldrge	r1, [r4, #0]
 80077a4:	f021 0104 	bicge.w	r1, r1, #4
 80077a8:	6021      	strge	r1, [r4, #0]
 80077aa:	b90d      	cbnz	r5, 80077b0 <_printf_i+0x110>
 80077ac:	2e00      	cmp	r6, #0
 80077ae:	d04b      	beq.n	8007848 <_printf_i+0x1a8>
 80077b0:	4616      	mov	r6, r2
 80077b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80077b6:	fb03 5711 	mls	r7, r3, r1, r5
 80077ba:	5dc7      	ldrb	r7, [r0, r7]
 80077bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077c0:	462f      	mov	r7, r5
 80077c2:	42bb      	cmp	r3, r7
 80077c4:	460d      	mov	r5, r1
 80077c6:	d9f4      	bls.n	80077b2 <_printf_i+0x112>
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d10b      	bne.n	80077e4 <_printf_i+0x144>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	07df      	lsls	r7, r3, #31
 80077d0:	d508      	bpl.n	80077e4 <_printf_i+0x144>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	6861      	ldr	r1, [r4, #4]
 80077d6:	4299      	cmp	r1, r3
 80077d8:	bfde      	ittt	le
 80077da:	2330      	movle	r3, #48	@ 0x30
 80077dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077e4:	1b92      	subs	r2, r2, r6
 80077e6:	6122      	str	r2, [r4, #16]
 80077e8:	f8cd a000 	str.w	sl, [sp]
 80077ec:	464b      	mov	r3, r9
 80077ee:	aa03      	add	r2, sp, #12
 80077f0:	4621      	mov	r1, r4
 80077f2:	4640      	mov	r0, r8
 80077f4:	f7ff fee6 	bl	80075c4 <_printf_common>
 80077f8:	3001      	adds	r0, #1
 80077fa:	d14a      	bne.n	8007892 <_printf_i+0x1f2>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	b004      	add	sp, #16
 8007802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	f043 0320 	orr.w	r3, r3, #32
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	4833      	ldr	r0, [pc, #204]	@ (80078dc <_printf_i+0x23c>)
 8007810:	2778      	movs	r7, #120	@ 0x78
 8007812:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	6831      	ldr	r1, [r6, #0]
 800781a:	061f      	lsls	r7, r3, #24
 800781c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007820:	d402      	bmi.n	8007828 <_printf_i+0x188>
 8007822:	065f      	lsls	r7, r3, #25
 8007824:	bf48      	it	mi
 8007826:	b2ad      	uxthmi	r5, r5
 8007828:	6031      	str	r1, [r6, #0]
 800782a:	07d9      	lsls	r1, r3, #31
 800782c:	bf44      	itt	mi
 800782e:	f043 0320 	orrmi.w	r3, r3, #32
 8007832:	6023      	strmi	r3, [r4, #0]
 8007834:	b11d      	cbz	r5, 800783e <_printf_i+0x19e>
 8007836:	2310      	movs	r3, #16
 8007838:	e7ac      	b.n	8007794 <_printf_i+0xf4>
 800783a:	4827      	ldr	r0, [pc, #156]	@ (80078d8 <_printf_i+0x238>)
 800783c:	e7e9      	b.n	8007812 <_printf_i+0x172>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	f023 0320 	bic.w	r3, r3, #32
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	e7f6      	b.n	8007836 <_printf_i+0x196>
 8007848:	4616      	mov	r6, r2
 800784a:	e7bd      	b.n	80077c8 <_printf_i+0x128>
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	6825      	ldr	r5, [r4, #0]
 8007850:	6961      	ldr	r1, [r4, #20]
 8007852:	1d18      	adds	r0, r3, #4
 8007854:	6030      	str	r0, [r6, #0]
 8007856:	062e      	lsls	r6, r5, #24
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	d501      	bpl.n	8007860 <_printf_i+0x1c0>
 800785c:	6019      	str	r1, [r3, #0]
 800785e:	e002      	b.n	8007866 <_printf_i+0x1c6>
 8007860:	0668      	lsls	r0, r5, #25
 8007862:	d5fb      	bpl.n	800785c <_printf_i+0x1bc>
 8007864:	8019      	strh	r1, [r3, #0]
 8007866:	2300      	movs	r3, #0
 8007868:	6123      	str	r3, [r4, #16]
 800786a:	4616      	mov	r6, r2
 800786c:	e7bc      	b.n	80077e8 <_printf_i+0x148>
 800786e:	6833      	ldr	r3, [r6, #0]
 8007870:	1d1a      	adds	r2, r3, #4
 8007872:	6032      	str	r2, [r6, #0]
 8007874:	681e      	ldr	r6, [r3, #0]
 8007876:	6862      	ldr	r2, [r4, #4]
 8007878:	2100      	movs	r1, #0
 800787a:	4630      	mov	r0, r6
 800787c:	f7f8 fcb0 	bl	80001e0 <memchr>
 8007880:	b108      	cbz	r0, 8007886 <_printf_i+0x1e6>
 8007882:	1b80      	subs	r0, r0, r6
 8007884:	6060      	str	r0, [r4, #4]
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	2300      	movs	r3, #0
 800788c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007890:	e7aa      	b.n	80077e8 <_printf_i+0x148>
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	4632      	mov	r2, r6
 8007896:	4649      	mov	r1, r9
 8007898:	4640      	mov	r0, r8
 800789a:	47d0      	blx	sl
 800789c:	3001      	adds	r0, #1
 800789e:	d0ad      	beq.n	80077fc <_printf_i+0x15c>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	079b      	lsls	r3, r3, #30
 80078a4:	d413      	bmi.n	80078ce <_printf_i+0x22e>
 80078a6:	68e0      	ldr	r0, [r4, #12]
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	4298      	cmp	r0, r3
 80078ac:	bfb8      	it	lt
 80078ae:	4618      	movlt	r0, r3
 80078b0:	e7a6      	b.n	8007800 <_printf_i+0x160>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4632      	mov	r2, r6
 80078b6:	4649      	mov	r1, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	47d0      	blx	sl
 80078bc:	3001      	adds	r0, #1
 80078be:	d09d      	beq.n	80077fc <_printf_i+0x15c>
 80078c0:	3501      	adds	r5, #1
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	9903      	ldr	r1, [sp, #12]
 80078c6:	1a5b      	subs	r3, r3, r1
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	dcf2      	bgt.n	80078b2 <_printf_i+0x212>
 80078cc:	e7eb      	b.n	80078a6 <_printf_i+0x206>
 80078ce:	2500      	movs	r5, #0
 80078d0:	f104 0619 	add.w	r6, r4, #25
 80078d4:	e7f5      	b.n	80078c2 <_printf_i+0x222>
 80078d6:	bf00      	nop
 80078d8:	08007abd 	.word	0x08007abd
 80078dc:	08007ace 	.word	0x08007ace

080078e0 <memmove>:
 80078e0:	4288      	cmp	r0, r1
 80078e2:	b510      	push	{r4, lr}
 80078e4:	eb01 0402 	add.w	r4, r1, r2
 80078e8:	d902      	bls.n	80078f0 <memmove+0x10>
 80078ea:	4284      	cmp	r4, r0
 80078ec:	4623      	mov	r3, r4
 80078ee:	d807      	bhi.n	8007900 <memmove+0x20>
 80078f0:	1e43      	subs	r3, r0, #1
 80078f2:	42a1      	cmp	r1, r4
 80078f4:	d008      	beq.n	8007908 <memmove+0x28>
 80078f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078fe:	e7f8      	b.n	80078f2 <memmove+0x12>
 8007900:	4402      	add	r2, r0
 8007902:	4601      	mov	r1, r0
 8007904:	428a      	cmp	r2, r1
 8007906:	d100      	bne.n	800790a <memmove+0x2a>
 8007908:	bd10      	pop	{r4, pc}
 800790a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800790e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007912:	e7f7      	b.n	8007904 <memmove+0x24>

08007914 <_sbrk_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d06      	ldr	r5, [pc, #24]	@ (8007930 <_sbrk_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7f9 ffda 	bl	80018d8 <_sbrk>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_sbrk_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_sbrk_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	20011a60 	.word	0x20011a60

08007934 <memcpy>:
 8007934:	440a      	add	r2, r1
 8007936:	4291      	cmp	r1, r2
 8007938:	f100 33ff 	add.w	r3, r0, #4294967295
 800793c:	d100      	bne.n	8007940 <memcpy+0xc>
 800793e:	4770      	bx	lr
 8007940:	b510      	push	{r4, lr}
 8007942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800794a:	4291      	cmp	r1, r2
 800794c:	d1f9      	bne.n	8007942 <memcpy+0xe>
 800794e:	bd10      	pop	{r4, pc}

08007950 <_realloc_r>:
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	4680      	mov	r8, r0
 8007956:	4615      	mov	r5, r2
 8007958:	460c      	mov	r4, r1
 800795a:	b921      	cbnz	r1, 8007966 <_realloc_r+0x16>
 800795c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007960:	4611      	mov	r1, r2
 8007962:	f7ff bc4b 	b.w	80071fc <_malloc_r>
 8007966:	b92a      	cbnz	r2, 8007974 <_realloc_r+0x24>
 8007968:	f7ff fbdc 	bl	8007124 <_free_r>
 800796c:	2400      	movs	r4, #0
 800796e:	4620      	mov	r0, r4
 8007970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007974:	f000 f81a 	bl	80079ac <_malloc_usable_size_r>
 8007978:	4285      	cmp	r5, r0
 800797a:	4606      	mov	r6, r0
 800797c:	d802      	bhi.n	8007984 <_realloc_r+0x34>
 800797e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007982:	d8f4      	bhi.n	800796e <_realloc_r+0x1e>
 8007984:	4629      	mov	r1, r5
 8007986:	4640      	mov	r0, r8
 8007988:	f7ff fc38 	bl	80071fc <_malloc_r>
 800798c:	4607      	mov	r7, r0
 800798e:	2800      	cmp	r0, #0
 8007990:	d0ec      	beq.n	800796c <_realloc_r+0x1c>
 8007992:	42b5      	cmp	r5, r6
 8007994:	462a      	mov	r2, r5
 8007996:	4621      	mov	r1, r4
 8007998:	bf28      	it	cs
 800799a:	4632      	movcs	r2, r6
 800799c:	f7ff ffca 	bl	8007934 <memcpy>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4640      	mov	r0, r8
 80079a4:	f7ff fbbe 	bl	8007124 <_free_r>
 80079a8:	463c      	mov	r4, r7
 80079aa:	e7e0      	b.n	800796e <_realloc_r+0x1e>

080079ac <_malloc_usable_size_r>:
 80079ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b0:	1f18      	subs	r0, r3, #4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bfbc      	itt	lt
 80079b6:	580b      	ldrlt	r3, [r1, r0]
 80079b8:	18c0      	addlt	r0, r0, r3
 80079ba:	4770      	bx	lr

080079bc <_init>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr

080079c8 <_fini>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr
