
Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007834  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b14  08007b14  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007b14  08007b14  00008b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b1c  08007b1c  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b1c  08007b1c  00008b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b20  08007b20  00008b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007b24  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000119fc  20000074  08007b98  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011a70  08007b98  00009a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c63  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1f  00000000  00000000  00020d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00023c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b5  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029be0  00000000  00000000  0002624d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ec6  00000000  00000000  0004fe2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109280  00000000  00000000  00068cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060fc  00000000  00000000  00171fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001780b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079ac 	.word	0x080079ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080079ac 	.word	0x080079ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <writeAnalog>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void writeAnalog(uint16_t value, int channel){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	80fb      	strh	r3, [r7, #6]
	HAL_DAC_SetValue(&hdac1, channel, DAC_ALIGN_12B_R, value);
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	88fb      	ldrh	r3, [r7, #6]
 8000580:	2200      	movs	r2, #0
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <writeAnalog+0x20>)
 8000584:	f003 f86a 	bl	800365c <HAL_DAC_SetValue>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000204 	.word	0x20000204

08000594 <sendMessageToComputer>:
void writeAudio(uint16_t value){
	writeAnalog(value, DAC_CHANNEL_1);
}

char stringBuffer[1024];
void sendMessageToComputer(char* message){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff fe17 	bl	80001d0 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <sendMessageToComputer+0x28>)
 80005ae:	f005 ffff 	bl	80065b0 <HAL_UART_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200002e0 	.word	0x200002e0

080005c0 <recordCurrentSampleForDelayEffects>:
	uint16_t* buffer;
	uint16_t nextElementIndex;
	uint16_t bufferSize;
};

void recordCurrentSampleForDelayEffects(struct CircularBuffer* buffer, uint16_t currentSample) {
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
	buffer->buffer[buffer->nextElementIndex] = currentSample;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	889b      	ldrh	r3, [r3, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	887a      	ldrh	r2, [r7, #2]
 80005da:	801a      	strh	r2, [r3, #0]
	buffer->nextElementIndex = (buffer->nextElementIndex + 1) % buffer->bufferSize;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	88d2      	ldrh	r2, [r2, #6]
 80005e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80005ea:	fb01 f202 	mul.w	r2, r1, r2
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	809a      	strh	r2, [r3, #4]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <getDelaySample>:

uint16_t getDelaySample(struct CircularBuffer* buffer, uint16_t delay) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
	if (delay < 0 || delay > buffer->bufferSize) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	88db      	ldrh	r3, [r3, #6]
 8000614:	887a      	ldrh	r2, [r7, #2]
 8000616:	429a      	cmp	r2, r3
 8000618:	d902      	bls.n	8000620 <getDelaySample+0x1c>
		sendMessageToComputer("Error in the delay calculation\r\n");
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <getDelaySample+0x48>)
 800061c:	f7ff ffba 	bl	8000594 <sendMessageToComputer>
	}
	return buffer->buffer[(buffer->nextElementIndex - 1u - delay) % buffer->bufferSize];
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	889b      	ldrh	r3, [r3, #4]
 8000628:	461a      	mov	r2, r3
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	3b01      	subs	r3, #1
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	88d2      	ldrh	r2, [r2, #6]
 8000634:	fbb3 f0f2 	udiv	r0, r3, r2
 8000638:	fb00 f202 	mul.w	r2, r0, r2
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	440b      	add	r3, r1
 8000642:	881b      	ldrh	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	080079cc 	.word	0x080079cc

08000650 <delay>:
struct CircularBuffer delayCircularBuffer = {
		delayBuffer,
		0,
		DELAY_BUFFER_LENGTH
};
uint16_t delay(uint16_t currentSample, uint16_t delayAmount) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	80fb      	strh	r3, [r7, #6]
 800065c:	4613      	mov	r3, r2
 800065e:	80bb      	strh	r3, [r7, #4]
	uint16_t delaySample = getDelaySample(&delayCircularBuffer, delayAmount);
 8000660:	88bb      	ldrh	r3, [r7, #4]
 8000662:	4619      	mov	r1, r3
 8000664:	480a      	ldr	r0, [pc, #40]	@ (8000690 <delay+0x40>)
 8000666:	f7ff ffcd 	bl	8000604 <getDelaySample>
 800066a:	4603      	mov	r3, r0
 800066c:	81fb      	strh	r3, [r7, #14]
	uint16_t currentOutput = (currentSample + delaySample) / 2;
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	89fb      	ldrh	r3, [r7, #14]
 8000672:	4413      	add	r3, r2
 8000674:	0fda      	lsrs	r2, r3, #31
 8000676:	4413      	add	r3, r2
 8000678:	105b      	asrs	r3, r3, #1
 800067a:	81bb      	strh	r3, [r7, #12]
	recordCurrentSampleForDelayEffects(&delayCircularBuffer, currentOutput);
 800067c:	89bb      	ldrh	r3, [r7, #12]
 800067e:	4619      	mov	r1, r3
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <delay+0x40>)
 8000682:	f7ff ff9d 	bl	80005c0 <recordCurrentSampleForDelayEffects>
	return currentOutput;
 8000686:	89bb      	ldrh	r3, [r7, #12]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000

08000694 <crossfade>:
	OCTAVE_BUFFER_LENGTH
};
#define OCTAVE_UP_SAMPLE_LENGTH (OCTAVE_BUFFER_LENGTH/2)
#define OCTAVE_DOWN_SAMPLE_LENGTH (OCTAVE_UP_SAMPLE_LENGTH/2)
#define CROSSFADE_LENGTH 256
uint16_t crossfade(uint16_t input1, uint16_t input2, uint16_t time) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
 800069e:	460b      	mov	r3, r1
 80006a0:	80bb      	strh	r3, [r7, #4]
 80006a2:	4613      	mov	r3, r2
 80006a4:	807b      	strh	r3, [r7, #2]
	if (time <= 0 || time >= CROSSFADE_LENGTH){
 80006a6:	887b      	ldrh	r3, [r7, #2]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <crossfade+0x1e>
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	2bff      	cmp	r3, #255	@ 0xff
 80006b0:	d902      	bls.n	80006b8 <crossfade+0x24>
		sendMessageToComputer("Error in the crossfade time\r\n");
 80006b2:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <crossfade+0x4c>)
 80006b4:	f7ff ff6e 	bl	8000594 <sendMessageToComputer>
	}
	return (input1*(CROSSFADE_LENGTH-time) + input2*time) / CROSSFADE_LENGTH;
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	887a      	ldrh	r2, [r7, #2]
 80006bc:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80006c0:	fb03 f202 	mul.w	r2, r3, r2
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	8879      	ldrh	r1, [r7, #2]
 80006c8:	fb01 f303 	mul.w	r3, r1, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da00      	bge.n	80006d4 <crossfade+0x40>
 80006d2:	33ff      	adds	r3, #255	@ 0xff
 80006d4:	121b      	asrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	080079f0 	.word	0x080079f0

080006e4 <octaveUp>:

uint16_t t_octave_up = 0;
uint16_t octaveUp(uint16_t currentInput) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
	uint16_t delayInput = getDelaySample(&octaveCircularBuffer, OCTAVE_UP_SAMPLE_LENGTH - t_octave_up);
 80006ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <octaveUp+0x7c>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	481a      	ldr	r0, [pc, #104]	@ (8000764 <octaveUp+0x80>)
 80006fc:	f7ff ff82 	bl	8000604 <getDelaySample>
 8000700:	4603      	mov	r3, r0
 8000702:	81fb      	strh	r3, [r7, #14]
	if (t_octave_up > OCTAVE_UP_SAMPLE_LENGTH - CROSSFADE_LENGTH) {
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <octaveUp+0x7c>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800070c:	d916      	bls.n	800073c <octaveUp+0x58>
		uint16_t crossfadeInput = getDelaySample(&octaveCircularBuffer, 2*OCTAVE_UP_SAMPLE_LENGTH - t_octave_up);
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <octaveUp+0x7c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000716:	b29b      	uxth	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	4812      	ldr	r0, [pc, #72]	@ (8000764 <octaveUp+0x80>)
 800071c:	f7ff ff72 	bl	8000604 <getDelaySample>
 8000720:	4603      	mov	r3, r0
 8000722:	81bb      	strh	r3, [r7, #12]
		delayInput = crossfade(delayInput, crossfadeInput, t_octave_up + CROSSFADE_LENGTH - OCTAVE_UP_SAMPLE_LENGTH);
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <octaveUp+0x7c>)
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800072c:	b29a      	uxth	r2, r3
 800072e:	89b9      	ldrh	r1, [r7, #12]
 8000730:	89fb      	ldrh	r3, [r7, #14]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffae 	bl	8000694 <crossfade>
 8000738:	4603      	mov	r3, r0
 800073a:	81fb      	strh	r3, [r7, #14]
	}
	t_octave_up = (t_octave_up + 1) % OCTAVE_UP_SAMPLE_LENGTH;
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <octaveUp+0x7c>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	425a      	negs	r2, r3
 8000744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000748:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800074c:	bf58      	it	pl
 800074e:	4253      	negpl	r3, r2
 8000750:	b29a      	uxth	r2, r3
 8000752:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <octaveUp+0x7c>)
 8000754:	801a      	strh	r2, [r3, #0]
	return delayInput;
 8000756:	89fb      	ldrh	r3, [r7, #14]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200118c8 	.word	0x200118c8
 8000764:	20000008 	.word	0x20000008

08000768 <octaveDown>:

uint16_t t_octave_down = 0;
uint16_t octaveDown(uint16_t currentInput) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
	uint16_t delayInput = getDelaySample(&octaveCircularBuffer, (t_octave_down/2)+CROSSFADE_LENGTH);
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <octaveDown+0x84>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	085b      	lsrs	r3, r3, #1
 8000778:	b29b      	uxth	r3, r3
 800077a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800077e:	b29b      	uxth	r3, r3
 8000780:	4619      	mov	r1, r3
 8000782:	481b      	ldr	r0, [pc, #108]	@ (80007f0 <octaveDown+0x88>)
 8000784:	f7ff ff3e 	bl	8000604 <getDelaySample>
 8000788:	4603      	mov	r3, r0
 800078a:	81fb      	strh	r3, [r7, #14]
	if (t_octave_down > 2*OCTAVE_DOWN_SAMPLE_LENGTH - CROSSFADE_LENGTH) {
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <octaveDown+0x84>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000794:	d918      	bls.n	80007c8 <octaveDown+0x60>
		uint16_t crossfadeInput = getDelaySample(&octaveCircularBuffer, (t_octave_down/2) - OCTAVE_DOWN_SAMPLE_LENGTH + CROSSFADE_LENGTH);
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <octaveDown+0x84>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	085b      	lsrs	r3, r3, #1
 800079c:	b29b      	uxth	r3, r3
 800079e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4619      	mov	r1, r3
 80007a6:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <octaveDown+0x88>)
 80007a8:	f7ff ff2c 	bl	8000604 <getDelaySample>
 80007ac:	4603      	mov	r3, r0
 80007ae:	81bb      	strh	r3, [r7, #12]
		delayInput = crossfade(delayInput, crossfadeInput, t_octave_down + CROSSFADE_LENGTH - 2*OCTAVE_DOWN_SAMPLE_LENGTH);
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <octaveDown+0x84>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	89b9      	ldrh	r1, [r7, #12]
 80007bc:	89fb      	ldrh	r3, [r7, #14]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff68 	bl	8000694 <crossfade>
 80007c4:	4603      	mov	r3, r0
 80007c6:	81fb      	strh	r3, [r7, #14]
	}
	t_octave_down = (t_octave_down+1)%(2*OCTAVE_DOWN_SAMPLE_LENGTH);
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <octaveDown+0x84>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	425a      	negs	r2, r3
 80007d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80007d8:	bf58      	it	pl
 80007da:	4253      	negpl	r3, r2
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4b03      	ldr	r3, [pc, #12]	@ (80007ec <octaveDown+0x84>)
 80007e0:	801a      	strh	r2, [r3, #0]
	return delayInput;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200118ca 	.word	0x200118ca
 80007f0:	20000008 	.word	0x20000008

080007f4 <distortion>:

uint16_t distortion(uint32_t input, uint16_t gain){
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
	uint16_t distortedInput;
	if (input < 2048u*gain/(gain+1u)){ // bottom saturation zone
 8000800:	887b      	ldrh	r3, [r7, #2]
 8000802:	02da      	lsls	r2, r3, #11
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	fbb2 f3f3 	udiv	r3, r2, r3
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d205      	bcs.n	800081e <distortion+0x2a>
		distortedInput = input/gain;
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	81fb      	strh	r3, [r7, #14]
 800081c:	e020      	b.n	8000860 <distortion+0x6c>
	} else if (input < 2048u*(gain+2u)/(gain+1u)) { // linear region
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	3302      	adds	r3, #2
 8000822:	02da      	lsls	r2, r3, #11
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	3301      	adds	r3, #1
 8000828:	fbb2 f3f3 	udiv	r3, r2, r3
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d20d      	bcs.n	800084e <distortion+0x5a>
		distortedInput = input*gain - 2048u*(gain-1u);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	b29b      	uxth	r3, r3
 8000836:	887a      	ldrh	r2, [r7, #2]
 8000838:	fb12 f303 	smulbb	r3, r2, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	887b      	ldrh	r3, [r7, #2]
 8000840:	3b01      	subs	r3, #1
 8000842:	b29b      	uxth	r3, r3
 8000844:	02db      	lsls	r3, r3, #11
 8000846:	b29b      	uxth	r3, r3
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	81fb      	strh	r3, [r7, #14]
 800084c:	e008      	b.n	8000860 <distortion+0x6c>
	} else { // top saturation zone
		distortedInput = (input+4096u*(gain-1u))/gain;
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	3b01      	subs	r3, #1
 8000852:	031a      	lsls	r2, r3, #12
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	441a      	add	r2, r3
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	81fb      	strh	r3, [r7, #14]
	}
	return (distortedInput*(gain+1u) + 2048u*(gain-1u))/(2u*gain);
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	887a      	ldrh	r2, [r7, #2]
 8000864:	3201      	adds	r2, #1
 8000866:	fb03 f202 	mul.w	r2, r3, r2
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	3b01      	subs	r3, #1
 800086e:	02db      	lsls	r3, r3, #11
 8000870:	441a      	add	r2, r3
 8000872:	887b      	ldrh	r3, [r7, #2]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	b29b      	uxth	r3, r3
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <processSample>:
bool octaveDownActive = 0;
bool delayActive = 0;
bool distortionActive = 0;
uint16_t gain = 8;
uint16_t delayAmount = 4400;
uint16_t processSample(uint16_t sample) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
	if (sample > 3500) {
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000898:	4293      	cmp	r3, r2
 800089a:	d904      	bls.n	80008a6 <processSample+0x1e>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800089c:	2101      	movs	r1, #1
 800089e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a2:	f003 fcb5 	bl	8004210 <HAL_GPIO_TogglePin>
	}

	// Octave logic
	recordCurrentSampleForDelayEffects(&octaveCircularBuffer, sample);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	4829      	ldr	r0, [pc, #164]	@ (8000950 <processSample+0xc8>)
 80008ac:	f7ff fe88 	bl	80005c0 <recordCurrentSampleForDelayEffects>
	uint16_t octaveUpSample = octaveUp(sample);
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff16 	bl	80006e4 <octaveUp>
 80008b8:	4603      	mov	r3, r0
 80008ba:	81fb      	strh	r3, [r7, #14]
	uint16_t octaveDownSample = octaveDown(sample);
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff52 	bl	8000768 <octaveDown>
 80008c4:	4603      	mov	r3, r0
 80008c6:	81bb      	strh	r3, [r7, #12]
	int numOfSignalsToMix = octaveUpActive + cleanSignalActive + octaveDownActive;
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <processSample+0xcc>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <processSample+0xd0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a21      	ldr	r2, [pc, #132]	@ (800095c <processSample+0xd4>)
 80008d6:	7812      	ldrb	r2, [r2, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
	if (numOfSignalsToMix != 0){
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d017      	beq.n	8000912 <processSample+0x8a>
		sample = (octaveUpActive*octaveUpSample +
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <processSample+0xcc>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	89fb      	ldrh	r3, [r7, #14]
 80008ea:	fb03 f202 	mul.w	r2, r3, r2
				cleanSignalActive*sample +
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <processSample+0xd0>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	fb01 f303 	mul.w	r3, r1, r3
		sample = (octaveUpActive*octaveUpSample +
 80008fa:	441a      	add	r2, r3
				octaveDownActive*octaveDownSample)
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <processSample+0xd4>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	89bb      	ldrh	r3, [r7, #12]
 8000904:	fb01 f303 	mul.w	r3, r1, r3
				cleanSignalActive*sample +
 8000908:	441a      	add	r2, r3
				/numOfSignalsToMix;
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	fb92 f3f3 	sdiv	r3, r2, r3
		sample = (octaveUpActive*octaveUpSample +
 8000910:	80fb      	strh	r3, [r7, #6]
	}

	if (distortionActive) {
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <processSample+0xd8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <processSample+0xa4>
		sample = distortion(sample, gain);
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <processSample+0xdc>)
 800091e:	8812      	ldrh	r2, [r2, #0]
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff66 	bl	80007f4 <distortion>
 8000928:	4603      	mov	r3, r0
 800092a:	80fb      	strh	r3, [r7, #6]
	}

	if (delayActive) {
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <processSample+0xe0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d008      	beq.n	8000946 <processSample+0xbe>
		sample = delay(sample, delayAmount);
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <processSample+0xe4>)
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe87 	bl	8000650 <delay>
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	}

	return sample;
 8000946:	88fb      	ldrh	r3, [r7, #6]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000008 	.word	0x20000008
 8000954:	200118cc 	.word	0x200118cc
 8000958:	20000010 	.word	0x20000010
 800095c:	200118cd 	.word	0x200118cd
 8000960:	200118cf 	.word	0x200118cf
 8000964:	20000012 	.word	0x20000012
 8000968:	200118ce 	.word	0x200118ce
 800096c:	20000014 	.word	0x20000014

08000970 <processHalfBuffer>:

void processHalfBuffer(uint16_t* inputBuffer, uint16_t* outputBuffer) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	for (int i=0; i<INPUT_BUFFER_LENGTH/2; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e010      	b.n	80009a2 <processHalfBuffer+0x32>
		outputBuffer[i] = processSample(inputBuffer[i]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	8819      	ldrh	r1, [r3, #0]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	18d4      	adds	r4, r2, r3
 8000992:	4608      	mov	r0, r1
 8000994:	f7ff ff78 	bl	8000888 <processSample>
 8000998:	4603      	mov	r3, r0
 800099a:	8023      	strh	r3, [r4, #0]
	for (int i=0; i<INPUT_BUFFER_LENGTH/2; i++) {
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b2b      	cmp	r3, #43	@ 0x2b
 80009a6:	ddeb      	ble.n	8000980 <processHalfBuffer+0x10>
	}
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd90      	pop	{r4, r7, pc}
	...

080009b4 <HAL_ADC_ConvHalfCpltCallback>:

// Called when the input buffer is half filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if (DAC_DMA_ACTIVE){
		processHalfBuffer(inputBuffer, outputBuffer);
 80009bc:	4903      	ldr	r1, [pc, #12]	@ (80009cc <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80009be:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80009c0:	f7ff ffd6 	bl	8000970 <processHalfBuffer>
	} else {
		writeAudio(processSample(inputBuffer[0]));
	}
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000418 	.word	0x20000418
 80009d0:	20000368 	.word	0x20000368

080009d4 <HAL_ADC_ConvCpltCallback>:

// Called when the input buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	if (DAC_DMA_ACTIVE){
		processHalfBuffer(inputBuffer+(INPUT_BUFFER_LENGTH/2), outputBuffer+(INPUT_BUFFER_LENGTH/2));
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <HAL_ADC_ConvCpltCallback+0x20>)
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffc4 	bl	8000970 <processHalfBuffer>
	} else {
		writeAudio(processSample(inputBuffer[1]));
	}
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200003c0 	.word	0x200003c0
 80009f4:	20000470 	.word	0x20000470

080009f8 <readAnalog>:

uint16_t readAnalog(ADC_HandleTypeDef* hadc1){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc1);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f001 fb6b 	bl	80020dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 8000a06:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f001 fc20 	bl	8002250 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(hadc1);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f001 fdb1 	bl	8002578 <HAL_ADC_GetValue>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29b      	uxth	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2a:	f000 ffbf 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2e:	f000 f8d9 	bl	8000be4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a32:	f000 f928 	bl	8000c86 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 fb9d 	bl	8001174 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a3a:	f000 fb75 	bl	8001128 <MX_DMA_Init>
  MX_DAC1_Init();
 8000a3e:	f000 fa8d 	bl	8000f5c <MX_DAC1_Init>
  MX_ADC1_Init();
 8000a42:	f000 f94b 	bl	8000cdc <MX_ADC1_Init>
  MX_OPAMP2_Init();
 8000a46:	f000 fac7 	bl	8000fd8 <MX_OPAMP2_Init>
  MX_USART2_UART_Init();
 8000a4a:	f000 fb3d 	bl	80010c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a4e:	f000 faed 	bl	800102c <MX_TIM2_Init>
  MX_ADC2_Init();
 8000a52:	f000 f9bb 	bl	8000dcc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000a56:	f000 fa1d 	bl	8000e94 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)inputBuffer, INPUT_BUFFER_LENGTH);
 8000a5a:	2258      	movs	r2, #88	@ 0x58
 8000a5c:	494f      	ldr	r1, [pc, #316]	@ (8000b9c <main+0x178>)
 8000a5e:	4850      	ldr	r0, [pc, #320]	@ (8000ba0 <main+0x17c>)
 8000a60:	f001 fcce 	bl	8002400 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000a64:	2110      	movs	r1, #16
 8000a66:	484f      	ldr	r0, [pc, #316]	@ (8000ba4 <main+0x180>)
 8000a68:	f002 fc84 	bl	8003374 <HAL_DAC_Start>
  if (LINE_INPUT) {
	  writeAnalog(2048, DAC_CHANNEL_2);
  } else {
	  writeAnalog(256, DAC_CHANNEL_2);
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000a72:	f7ff fd7d 	bl	8000570 <writeAnalog>
	  HAL_OPAMP_Start(&hopamp2);
 8000a76:	484c      	ldr	r0, [pc, #304]	@ (8000ba8 <main+0x184>)
 8000a78:	f003 fcba 	bl	80043f0 <HAL_OPAMP_Start>
  }
  if (DAC_DMA_ACTIVE){
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)outputBuffer, INPUT_BUFFER_LENGTH, DAC_ALIGN_12B_R);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2358      	movs	r3, #88	@ 0x58
 8000a82:	4a4a      	ldr	r2, [pc, #296]	@ (8000bac <main+0x188>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4847      	ldr	r0, [pc, #284]	@ (8000ba4 <main+0x180>)
 8000a88:	f002 fcc2 	bl	8003410 <HAL_DAC_Start_DMA>
  } else {
	  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  }
  HAL_TIM_Base_Start(&htim2);
 8000a8c:	4848      	ldr	r0, [pc, #288]	@ (8000bb0 <main+0x18c>)
 8000a8e:	f005 f88b 	bl	8005ba8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  distortionActive = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000a92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f003 fb89 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b42      	ldr	r3, [pc, #264]	@ (8000bb4 <main+0x190>)
 8000aac:	701a      	strb	r2, [r3, #0]
	  octaveDownActive = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000aae:	2120      	movs	r1, #32
 8000ab0:	4841      	ldr	r0, [pc, #260]	@ (8000bb8 <main+0x194>)
 8000ab2:	f003 fb7d 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bbc <main+0x198>)
 8000ac4:	701a      	strb	r2, [r3, #0]
	  cleanSignalActive = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	483b      	ldr	r0, [pc, #236]	@ (8000bb8 <main+0x194>)
 8000aca:	f003 fb71 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b39      	ldr	r3, [pc, #228]	@ (8000bc0 <main+0x19c>)
 8000adc:	701a      	strb	r2, [r3, #0]
	  octaveUpActive = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae2:	4835      	ldr	r0, [pc, #212]	@ (8000bb8 <main+0x194>)
 8000ae4:	f003 fb64 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <main+0x1a0>)
 8000af6:	701a      	strb	r2, [r3, #0]
	  delayActive = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b00:	f003 fb56 	bl	80041b0 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <main+0x1a4>)
 8000b12:	701a      	strb	r2, [r3, #0]
	  if (distortionActive) {
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <main+0x190>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00d      	beq.n	8000b38 <main+0x114>
		  gain = readAnalog(&hadc2)*15u/4096u + 1u;
 8000b1c:	482b      	ldr	r0, [pc, #172]	@ (8000bcc <main+0x1a8>)
 8000b1e:	f7ff ff6b 	bl	80009f8 <readAnalog>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4613      	mov	r3, r2
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	0b1b      	lsrs	r3, r3, #12
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	3301      	adds	r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <main+0x1ac>)
 8000b36:	801a      	strh	r2, [r3, #0]
	  }
	  if (delayActive) {
 8000b38:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <main+0x1a4>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <main+0x12c>
		  delayAmount = readAnalog(&hadc3)*DELAY_BUFFER_LENGTH/4096;
 8000b40:	4824      	ldr	r0, [pc, #144]	@ (8000bd4 <main+0x1b0>)
 8000b42:	f7ff ff59 	bl	80009f8 <readAnalog>
 8000b46:	4603      	mov	r3, r0
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <main+0x1b4>)
 8000b4e:	801a      	strh	r2, [r3, #0]
	  }
	  sprintf(stringBuffer, "distortionActive: %d, octaveDownActive: %d, cleanSignalActive: %d, octaveUpActive: %d, delayActive: %d\r\ngain: %d, delay: %d samples\r\n",
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <main+0x190>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461d      	mov	r5, r3
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <main+0x198>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461e      	mov	r6, r3
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <main+0x19c>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <main+0x1a0>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <main+0x1a4>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <main+0x1ac>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	461c      	mov	r4, r3
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <main+0x1b4>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	9403      	str	r4, [sp, #12]
 8000b7c:	9002      	str	r0, [sp, #8]
 8000b7e:	9101      	str	r1, [sp, #4]
 8000b80:	9200      	str	r2, [sp, #0]
 8000b82:	4633      	mov	r3, r6
 8000b84:	462a      	mov	r2, r5
 8000b86:	4915      	ldr	r1, [pc, #84]	@ (8000bdc <main+0x1b8>)
 8000b88:	4815      	ldr	r0, [pc, #84]	@ (8000be0 <main+0x1bc>)
 8000b8a:	f006 fa6f 	bl	800706c <siprintf>
			  distortionActive, octaveDownActive, cleanSignalActive, octaveUpActive, delayActive, gain, delayAmount);
	  sendMessageToComputer(stringBuffer);
 8000b8e:	4814      	ldr	r0, [pc, #80]	@ (8000be0 <main+0x1bc>)
 8000b90:	f7ff fd00 	bl	8000594 <sendMessageToComputer>
	  HAL_Delay(17);
 8000b94:	2011      	movs	r0, #17
 8000b96:	f000 ff49 	bl	8001a2c <HAL_Delay>
	  distortionActive = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000b9a:	e77a      	b.n	8000a92 <main+0x6e>
 8000b9c:	20000368 	.word	0x20000368
 8000ba0:	20000090 	.word	0x20000090
 8000ba4:	20000204 	.word	0x20000204
 8000ba8:	20000260 	.word	0x20000260
 8000bac:	20000418 	.word	0x20000418
 8000bb0:	20000294 	.word	0x20000294
 8000bb4:	200118cf 	.word	0x200118cf
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	200118cd 	.word	0x200118cd
 8000bc0:	20000010 	.word	0x20000010
 8000bc4:	200118cc 	.word	0x200118cc
 8000bc8:	200118ce 	.word	0x200118ce
 8000bcc:	200000f4 	.word	0x200000f4
 8000bd0:	20000012 	.word	0x20000012
 8000bd4:	20000158 	.word	0x20000158
 8000bd8:	20000014 	.word	0x20000014
 8000bdc:	08007a10 	.word	0x08007a10
 8000be0:	200004c8 	.word	0x200004c8

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b096      	sub	sp, #88	@ 0x58
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2244      	movs	r2, #68	@ 0x44
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f006 fa5a 	bl	80070ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c06:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c0a:	f003 fc31 	bl	8004470 <HAL_PWREx_ControlVoltageScaling>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c14:	f000 fb34 	bl	8001280 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c22:	2310      	movs	r3, #16
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c32:	230a      	movs	r3, #10
 8000c34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c36:	2307      	movs	r3, #7
 8000c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fc68 	bl	800451c <HAL_RCC_OscConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c52:	f000 fb15 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	230f      	movs	r3, #15
 8000c58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 f830 	bl	8004cd4 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c7a:	f000 fb01 	bl	8001280 <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3758      	adds	r7, #88	@ 0x58
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b0a2      	sub	sp, #136	@ 0x88
 8000c8a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2288      	movs	r2, #136	@ 0x88
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f006 fa0a 	bl	80070ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c9c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cc0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 fa5b 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000cd0:	f000 fad6 	bl	8001280 <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3788      	adds	r7, #136	@ 0x88
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cfe:	4b30      	ldr	r3, [pc, #192]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d00:	4a30      	ldr	r2, [pc, #192]	@ (8000dc4 <MX_ADC1_Init+0xe8>)
 8000d02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d04:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d16:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1c:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d22:	4b27      	ldr	r3, [pc, #156]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d28:	4b25      	ldr	r3, [pc, #148]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d2e:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d3e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d62:	4817      	ldr	r0, [pc, #92]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d64:	f001 f86a 	bl	8001e3c <HAL_ADC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000d6e:	f000 fa87 	bl	8001280 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4810      	ldr	r0, [pc, #64]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000d7e:	f002 f945 	bl	800300c <HAL_ADCEx_MultiModeConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d88:	f000 fa7a 	bl	8001280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <MX_ADC1_Init+0xec>)
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d90:	2306      	movs	r3, #6
 8000d92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d98:	237f      	movs	r3, #127	@ 0x7f
 8000d9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_ADC1_Init+0xe4>)
 8000daa:	f001 fbfd 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000db4:	f000 fa64 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	@ 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000090 	.word	0x20000090
 8000dc4:	50040000 	.word	0x50040000
 8000dc8:	3ef08000 	.word	0x3ef08000

08000dcc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000de4:	4a29      	ldr	r2, [pc, #164]	@ (8000e8c <MX_ADC2_Init+0xc0>)
 8000de6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dee:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e02:	2204      	movs	r2, #4
 8000e04:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e06:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e42:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e44:	f000 fffa 	bl	8001e3c <HAL_ADC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000e4e:	f000 fa17 	bl	8001280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_ADC2_Init+0xc4>)
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2306      	movs	r3, #6
 8000e58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5e:	237f      	movs	r3, #127	@ 0x7f
 8000e60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2304      	movs	r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <MX_ADC2_Init+0xbc>)
 8000e70:	f001 fb9a 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000e7a:	f000 fa01 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000f4 	.word	0x200000f4
 8000e8c:	50040100 	.word	0x50040100
 8000e90:	04300002 	.word	0x04300002

08000e94 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000eac:	4a29      	ldr	r2, [pc, #164]	@ (8000f54 <MX_ADC3_Init+0xc0>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f0a:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000f0c:	f000 ff96 	bl	8001e3c <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000f16:	f000 f9b3 	bl	8001280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_ADC3_Init+0xc4>)
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f26:	237f      	movs	r3, #127	@ 0x7f
 8000f28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_ADC3_Init+0xbc>)
 8000f38:	f001 fb36 	bl	80025a8 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f000 f99d 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000158 	.word	0x20000158
 8000f54:	50040200 	.word	0x50040200
 8000f58:	08600004 	.word	0x08600004

08000f5c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2224      	movs	r2, #36	@ 0x24
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 f89f 	bl	80070ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <MX_DAC1_Init+0x74>)
 8000f70:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <MX_DAC1_Init+0x78>)
 8000f72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f74:	4816      	ldr	r0, [pc, #88]	@ (8000fd0 <MX_DAC1_Init+0x74>)
 8000f76:	f002 f9db 	bl	8003330 <HAL_DAC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f80:	f000 f97e 	bl	8001280 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f88:	2324      	movs	r3, #36	@ 0x24
 8000f8a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <MX_DAC1_Init+0x74>)
 8000fa0:	f002 fba9 	bl	80036f6 <HAL_DAC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 f969 	bl	8001280 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_DAC1_Init+0x74>)
 8000fba:	f002 fb9c 	bl	80036f6 <HAL_DAC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000fc4:	f000 f95c 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	@ 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000204 	.word	0x20000204
 8000fd4:	40007400 	.word	0x40007400

08000fd8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <MX_OPAMP2_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_HIGH;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8000fe4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000fe8:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8000fec:	2208      	movs	r2, #8
 8000fee:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_CONNECT_NO;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ffc:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_8;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8001000:	2220      	movs	r2, #32
 8001002:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_OPAMP2_Init+0x4c>)
 8001012:	f003 f917 	bl	8004244 <HAL_OPAMP_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_OPAMP2_Init+0x48>
  {
    Error_Handler();
 800101c:	f000 f930 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000260 	.word	0x20000260
 8001028:	40007810 	.word	0x40007810

0800102c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <MX_TIM2_Init+0x98>)
 800104c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001050:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <MX_TIM2_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_TIM2_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1761;
 800105e:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <MX_TIM2_Init+0x98>)
 8001060:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 8001064:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <MX_TIM2_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_TIM2_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001072:	4814      	ldr	r0, [pc, #80]	@ (80010c4 <MX_TIM2_Init+0x98>)
 8001074:	f004 fd40 	bl	8005af8 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800107e:	f000 f8ff 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001086:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <MX_TIM2_Init+0x98>)
 8001090:	f004 ff69 	bl	8005f66 <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800109a:	f000 f8f1 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800109e:	2320      	movs	r3, #32
 80010a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <MX_TIM2_Init+0x98>)
 80010ac:	f005 f98c 	bl	80063c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010b6:	f000 f8e3 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000294 	.word	0x20000294

080010c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010ce:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <MX_USART2_UART_Init+0x5c>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_USART2_UART_Init+0x58>)
 800110c:	f005 fa02 	bl	8006514 <HAL_UART_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001116:	f000 f8b3 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200002e0 	.word	0x200002e0
 8001124:	40004400 	.word	0x40004400

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <MX_DMA_Init+0x48>)
 8001130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001132:	4a0f      	ldr	r2, [pc, #60]	@ (8001170 <MX_DMA_Init+0x48>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6493      	str	r3, [r2, #72]	@ 0x48
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <MX_DMA_Init+0x48>)
 800113c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	200b      	movs	r0, #11
 800114c:	f002 f8c6 	bl	80032dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001150:	200b      	movs	r0, #11
 8001152:	f002 f8df 	bl	8003314 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	200d      	movs	r0, #13
 800115c:	f002 f8be 	bl	80032dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001160:	200d      	movs	r0, #13
 8001162:	f002 f8d7 	bl	8003314 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b32      	ldr	r3, [pc, #200]	@ (8001254 <MX_GPIO_Init+0xe0>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a31      	ldr	r2, [pc, #196]	@ (8001254 <MX_GPIO_Init+0xe0>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <MX_GPIO_Init+0xe0>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	4a25      	ldr	r2, [pc, #148]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011de:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <MX_GPIO_Init+0xe0>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2101      	movs	r1, #1
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f2:	f002 fff5 	bl	80041e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001210:	f002 fe24 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001214:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800121e:	2302      	movs	r3, #2
 8001220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	480b      	ldr	r0, [pc, #44]	@ (8001258 <MX_GPIO_Init+0xe4>)
 800122a:	f002 fe17 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800122e:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001246:	f002 fe09 	bl	8003e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000
 8001258:	48000400 	.word	0x48000400

0800125c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800126e:	f000 fbbd 	bl	80019ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001000 	.word	0x40001000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <HAL_MspInit+0x44>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6613      	str	r3, [r2, #96]	@ 0x60
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_MspInit+0x44>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <HAL_MspInit+0x44>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_MspInit+0x44>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	@ 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a62      	ldr	r2, [pc, #392]	@ (800147c <HAL_ADC_MspInit+0x1a8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d158      	bne.n	80013a8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80012f6:	4b62      	ldr	r3, [pc, #392]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a60      	ldr	r2, [pc, #384]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 80012fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001300:	4b5f      	ldr	r3, [pc, #380]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10b      	bne.n	8001320 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001308:	4b5e      	ldr	r3, [pc, #376]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130c:	4a5d      	ldr	r2, [pc, #372]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 800130e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001314:	4b5b      	ldr	r3, [pc, #364]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b58      	ldr	r3, [pc, #352]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	4a57      	ldr	r2, [pc, #348]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132c:	4b55      	ldr	r3, [pc, #340]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001338:	2301      	movs	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800133c:	230b      	movs	r3, #11
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	484f      	ldr	r0, [pc, #316]	@ (8001488 <HAL_ADC_MspInit+0x1b4>)
 800134c:	f002 fd86 	bl	8003e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001350:	4b4e      	ldr	r3, [pc, #312]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 8001352:	4a4f      	ldr	r2, [pc, #316]	@ (8001490 <HAL_ADC_MspInit+0x1bc>)
 8001354:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001356:	4b4d      	ldr	r3, [pc, #308]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135c:	4b4b      	ldr	r3, [pc, #300]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001362:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001368:	4b48      	ldr	r3, [pc, #288]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 800136a:	2280      	movs	r2, #128	@ 0x80
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136e:	4b47      	ldr	r3, [pc, #284]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 8001370:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001376:	4b45      	ldr	r3, [pc, #276]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 8001378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b43      	ldr	r3, [pc, #268]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 8001380:	2220      	movs	r2, #32
 8001382:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001384:	4b41      	ldr	r3, [pc, #260]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800138a:	4840      	ldr	r0, [pc, #256]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 800138c:	f002 fb6e 	bl	8003a6c <HAL_DMA_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001396:	f7ff ff73 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a3b      	ldr	r2, [pc, #236]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 800139e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013a0:	4a3a      	ldr	r2, [pc, #232]	@ (800148c <HAL_ADC_MspInit+0x1b8>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013a6:	e064      	b.n	8001472 <HAL_ADC_MspInit+0x19e>
  else if(hadc->Instance==ADC2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a39      	ldr	r2, [pc, #228]	@ (8001494 <HAL_ADC_MspInit+0x1c0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d12d      	bne.n	800140e <HAL_ADC_MspInit+0x13a>
    HAL_RCC_ADC_CLK_ENABLED++;
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a31      	ldr	r2, [pc, #196]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 80013ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80013bc:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d10b      	bne.n	80013dc <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC_CLK_ENABLE();
 80013c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 80013ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	4a28      	ldr	r2, [pc, #160]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e8:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f4:	2301      	movs	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013f8:	230b      	movs	r3, #11
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4824      	ldr	r0, [pc, #144]	@ (8001498 <HAL_ADC_MspInit+0x1c4>)
 8001408:	f002 fd28 	bl	8003e5c <HAL_GPIO_Init>
}
 800140c:	e031      	b.n	8001472 <HAL_ADC_MspInit+0x19e>
  else if(hadc->Instance==ADC3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a22      	ldr	r2, [pc, #136]	@ (800149c <HAL_ADC_MspInit+0x1c8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d12c      	bne.n	8001472 <HAL_ADC_MspInit+0x19e>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a18      	ldr	r2, [pc, #96]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 8001420:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001422:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <HAL_ADC_MspInit+0x1ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d10b      	bne.n	8001442 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC_CLK_ENABLE();
 800142a:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a15      	ldr	r2, [pc, #84]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001430:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <HAL_ADC_MspInit+0x1b0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145a:	2302      	movs	r3, #2
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800145e:	230b      	movs	r3, #11
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	480a      	ldr	r0, [pc, #40]	@ (8001498 <HAL_ADC_MspInit+0x1c4>)
 800146e:	f002 fcf5 	bl	8003e5c <HAL_GPIO_Init>
}
 8001472:	bf00      	nop
 8001474:	3738      	adds	r7, #56	@ 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	50040000 	.word	0x50040000
 8001480:	200118d0 	.word	0x200118d0
 8001484:	40021000 	.word	0x40021000
 8001488:	48000400 	.word	0x48000400
 800148c:	200001bc 	.word	0x200001bc
 8001490:	40020008 	.word	0x40020008
 8001494:	50040100 	.word	0x50040100
 8001498:	48000800 	.word	0x48000800
 800149c:	50040200 	.word	0x50040200

080014a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <HAL_DAC_MspInit+0xdc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d157      	bne.n	8001572 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <HAL_DAC_MspInit+0xe0>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001580 <HAL_DAC_MspInit+0xe0>)
 80014c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <HAL_DAC_MspInit+0xe0>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b29      	ldr	r3, [pc, #164]	@ (8001580 <HAL_DAC_MspInit+0xe0>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <HAL_DAC_MspInit+0xe0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b26      	ldr	r3, [pc, #152]	@ (8001580 <HAL_DAC_MspInit+0xe0>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014f2:	2330      	movs	r3, #48	@ 0x30
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001508:	f002 fca8 	bl	8003e5c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 800150e:	4a1e      	ldr	r2, [pc, #120]	@ (8001588 <HAL_DAC_MspInit+0xe8>)
 8001510:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 8001514:	2206      	movs	r2, #6
 8001516:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 800151a:	2210      	movs	r2, #16
 800151c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152a:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 800152c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001530:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 8001534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001538:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 800153c:	2220      	movs	r2, #32
 800153e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001546:	480f      	ldr	r0, [pc, #60]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 8001548:	f002 fa90 	bl	8003a6c <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001552:	f7ff fe95 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_DAC_MspInit+0xe4>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	210f      	movs	r1, #15
 8001566:	2036      	movs	r0, #54	@ 0x36
 8001568:	f001 feb8 	bl	80032dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	@ 0x36
 800156e:	f001 fed1 	bl	8003314 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40007400 	.word	0x40007400
 8001580:	40021000 	.word	0x40021000
 8001584:	20000218 	.word	0x20000218
 8001588:	40020030 	.word	0x40020030

0800158c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_OPAMP_MspInit+0xa4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d13c      	bne.n	8001628 <HAL_OPAMP_MspInit+0x9c>
  {
  /* USER CODE BEGIN OPAMP2_MspInit 0 */

  /* USER CODE END OPAMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	4a20      	ldr	r2, [pc, #128]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_OPAMP_MspInit+0xa8>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP2 GPIO Configuration
    PA6     ------> OPAMP2_VINP
    PB0     ------> OPAMP2_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f6:	2340      	movs	r3, #64	@ 0x40
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160c:	f002 fc26 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001610:	2301      	movs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001614:	230b      	movs	r3, #11
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_OPAMP_MspInit+0xac>)
 8001624:	f002 fc1a 	bl	8003e5c <HAL_GPIO_Init>

  /* USER CODE END OPAMP2_MspInit 1 */

  }

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40007810 	.word	0x40007810
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400

0800163c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800164c:	d10b      	bne.n	8001666 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_TIM_Base_MspInit+0x38>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001652:	4a08      	ldr	r2, [pc, #32]	@ (8001674 <HAL_TIM_Base_MspInit+0x38>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6593      	str	r3, [r2, #88]	@ 0x58
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_TIM_Base_MspInit+0x38>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0ac      	sub	sp, #176	@ 0xb0
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2288      	movs	r2, #136	@ 0x88
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f005 fd07 	bl	80070ac <memset>
  if(huart->Instance==USART2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <HAL_UART_MspInit+0xb0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d13b      	bne.n	8001720 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fd63 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016c0:	f7ff fdde 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_UART_MspInit+0xb4>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	4a18      	ldr	r2, [pc, #96]	@ (800172c <HAL_UART_MspInit+0xb4>)
 80016ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <HAL_UART_MspInit+0xb4>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <HAL_UART_MspInit+0xb4>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <HAL_UART_MspInit+0xb4>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e8:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_UART_MspInit+0xb4>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f4:	230c      	movs	r3, #12
 80016f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170c:	2307      	movs	r3, #7
 800170e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171c:	f002 fb9e 	bl	8003e5c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001720:	bf00      	nop
 8001722:	37b0      	adds	r7, #176	@ 0xb0
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40004400 	.word	0x40004400
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	@ 0x38
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800173e:	4b34      	ldr	r3, [pc, #208]	@ (8001810 <HAL_InitTick+0xe0>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a33      	ldr	r2, [pc, #204]	@ (8001810 <HAL_InitTick+0xe0>)
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <HAL_InitTick+0xe0>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001756:	f107 0210 	add.w	r2, r7, #16
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fc7b 	bl	800505c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800176a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001770:	f003 fc48 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 8001774:	6378      	str	r0, [r7, #52]	@ 0x34
 8001776:	e004      	b.n	8001782 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001778:	f003 fc44 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 800177c:	4603      	mov	r3, r0
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001784:	4a23      	ldr	r2, [pc, #140]	@ (8001814 <HAL_InitTick+0xe4>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9b      	lsrs	r3, r3, #18
 800178c:	3b01      	subs	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_InitTick+0xe8>)
 8001792:	4a22      	ldr	r2, [pc, #136]	@ (800181c <HAL_InitTick+0xec>)
 8001794:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_InitTick+0xe8>)
 8001798:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800179c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800179e:	4a1e      	ldr	r2, [pc, #120]	@ (8001818 <HAL_InitTick+0xe8>)
 80017a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <HAL_InitTick+0xe8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <HAL_InitTick+0xe8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_InitTick+0xe8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017b6:	4818      	ldr	r0, [pc, #96]	@ (8001818 <HAL_InitTick+0xe8>)
 80017b8:	f004 f99e 	bl	8005af8 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d11b      	bne.n	8001802 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017ca:	4813      	ldr	r0, [pc, #76]	@ (8001818 <HAL_InitTick+0xe8>)
 80017cc:	f004 fa54 	bl	8005c78 <HAL_TIM_Base_Start_IT>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d111      	bne.n	8001802 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017de:	2036      	movs	r0, #54	@ 0x36
 80017e0:	f001 fd98 	bl	8003314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	d808      	bhi.n	80017fc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017ea:	2200      	movs	r2, #0
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	2036      	movs	r0, #54	@ 0x36
 80017f0:	f001 fd74 	bl	80032dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_InitTick+0xf0>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e002      	b.n	8001802 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001802:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001806:	4618      	mov	r0, r3
 8001808:	3738      	adds	r7, #56	@ 0x38
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	431bde83 	.word	0x431bde83
 8001818:	200118d4 	.word	0x200118d4
 800181c:	40001000 	.word	0x40001000
 8001820:	2000001c 	.word	0x2000001c

08001824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <NMI_Handler+0x4>

0800182c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <MemManage_Handler+0x4>

0800183c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <UsageFault_Handler+0x4>

0800184c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <DMA1_Channel1_IRQHandler+0x10>)
 800188a:	f002 fa07 	bl	8003c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200001bc 	.word	0x200001bc

08001898 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <DMA1_Channel3_IRQHandler+0x10>)
 800189e:	f002 f9fd 	bl	8003c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000218 	.word	0x20000218

080018ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b0:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <TIM6_DAC_IRQHandler+0x14>)
 80018b2:	f004 fa51 	bl	8005d58 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80018b6:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <TIM6_DAC_IRQHandler+0x18>)
 80018b8:	f001 fe76 	bl	80035a8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200118d4 	.word	0x200118d4
 80018c4:	20000204 	.word	0x20000204

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f005 fbe0 	bl	80070bc <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20018000 	.word	0x20018000
 8001928:	00000400 	.word	0x00000400
 800192c:	20011920 	.word	0x20011920
 8001930:	20011a70 	.word	0x20011a70

08001934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001990 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800195c:	f7ff ffea 	bl	8001934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <LoopForever+0x6>)
  ldr r1, =_edata
 8001962:	490d      	ldr	r1, [pc, #52]	@ (8001998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <LoopForever+0xe>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001968:	e002      	b.n	8001970 <LoopCopyDataInit>

0800196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196e:	3304      	adds	r3, #4

08001970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001974:	d3f9      	bcc.n	800196a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001978:	4c0a      	ldr	r4, [pc, #40]	@ (80019a4 <LoopForever+0x16>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197c:	e001      	b.n	8001982 <LoopFillZerobss>

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001980:	3204      	adds	r2, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001986:	f005 fb9f 	bl	80070c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198a:	f7ff f84b 	bl	8000a24 <main>

0800198e <LoopForever>:

LoopForever:
    b LoopForever
 800198e:	e7fe      	b.n	800198e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001990:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800199c:	08007b24 	.word	0x08007b24
  ldr r2, =_sbss
 80019a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019a4:	20011a70 	.word	0x20011a70

080019a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_2_IRQHandler>
	...

080019ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <HAL_Init+0x3c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <HAL_Init+0x3c>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f001 fc7f 	bl	80032c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c8:	200f      	movs	r0, #15
 80019ca:	f7ff feb1 	bl	8001730 <HAL_InitTick>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	71fb      	strb	r3, [r7, #7]
 80019d8:	e001      	b.n	80019de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019da:	f7ff fc57 	bl	800128c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019de:	79fb      	ldrb	r3, [r7, #7]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40022000 	.word	0x40022000

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000020 	.word	0x20000020
 8001a10:	20011924 	.word	0x20011924

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20011924 	.word	0x20011924

08001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff ffee 	bl	8001a14 <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d005      	beq.n	8001a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_Delay+0x44>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a52:	bf00      	nop
 8001a54:	f7ff ffde 	bl	8001a14 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f7      	bhi.n	8001a54 <HAL_Delay+0x28>
  {
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000020 	.word	0x20000020

08001a74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3360      	adds	r3, #96	@ 0x60
 8001aee:	461a      	mov	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <LL_ADC_SetOffset+0x44>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	03fff000 	.word	0x03fff000

08001b24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3360      	adds	r3, #96	@ 0x60
 8001b32:	461a      	mov	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3360      	adds	r3, #96	@ 0x60
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3330      	adds	r3, #48	@ 0x30
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 031f 	and.w	r3, r3, #31
 8001bd6:	211f      	movs	r1, #31
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 011f 	and.w	r1, r3, #31
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3314      	adds	r3, #20
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	0e5b      	lsrs	r3, r3, #25
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	0d1b      	lsrs	r3, r3, #20
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2107      	movs	r1, #7
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	401a      	ands	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0d1b      	lsrs	r3, r3, #20
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c4e:	bf00      	nop
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0318 	and.w	r3, r3, #24
 8001c7e:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c80:	40d9      	lsrs	r1, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	400b      	ands	r3, r1
 8001c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	0007ffff 	.word	0x0007ffff

08001ca4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6093      	str	r3, [r2, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d14:	d101      	bne.n	8001d1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d64:	d101      	bne.n	8001d6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <LL_ADC_IsEnabled+0x18>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <LL_ADC_IsEnabled+0x1a>
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dd6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dda:	f043 0204 	orr.w	r2, r3, #4
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d101      	bne.n	8001e2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b089      	sub	sp, #36	@ 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e130      	b.n	80020b8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fa35 	bl	80012d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff3f 	bl	8001d00 <LL_ADC_IsDeepPowerDownEnabled>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff25 	bl	8001cdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff5a 	bl	8001d50 <LL_ADC_IsInternalRegulatorEnabled>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff3e 	bl	8001d28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eac:	4b84      	ldr	r3, [pc, #528]	@ (80020c0 <HAL_ADC_Init+0x284>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	4a84      	ldr	r2, [pc, #528]	@ (80020c4 <HAL_ADC_Init+0x288>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ec0:	e002      	b.n	8001ec8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff3c 	bl	8001d50 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10d      	bne.n	8001efa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff75 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 8001f04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 80c9 	bne.w	80020a6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80c5 	bne.w	80020a6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff35 	bl	8001da0 <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d115      	bne.n	8001f68 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f3c:	4862      	ldr	r0, [pc, #392]	@ (80020c8 <HAL_ADC_Init+0x28c>)
 8001f3e:	f7ff ff2f 	bl	8001da0 <LL_ADC_IsEnabled>
 8001f42:	4604      	mov	r4, r0
 8001f44:	4861      	ldr	r0, [pc, #388]	@ (80020cc <HAL_ADC_Init+0x290>)
 8001f46:	f7ff ff2b 	bl	8001da0 <LL_ADC_IsEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	431c      	orrs	r4, r3
 8001f4e:	4860      	ldr	r0, [pc, #384]	@ (80020d0 <HAL_ADC_Init+0x294>)
 8001f50:	f7ff ff26 	bl	8001da0 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4323      	orrs	r3, r4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	485c      	ldr	r0, [pc, #368]	@ (80020d4 <HAL_ADC_Init+0x298>)
 8001f64:	f7ff fd86 	bl	8001a74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7e5b      	ldrb	r3, [r3, #25]
 8001f6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	045b      	lsls	r3, r3, #17
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <HAL_ADC_Init+0x29c>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff1b 	bl	8001e14 <LL_ADC_INJ_IsConversionOngoing>
 8001fde:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d13d      	bne.n	8002062 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d13a      	bne.n	8002062 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ff8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002008:	f023 0302 	bic.w	r3, r3, #2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	69b9      	ldr	r1, [r7, #24]
 8002012:	430b      	orrs	r3, r1
 8002014:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800201c:	2b01      	cmp	r3, #1
 800201e:	d118      	bne.n	8002052 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800202a:	f023 0304 	bic.w	r3, r3, #4
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002042:	430a      	orrs	r2, r1
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	e007      	b.n	8002062 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d10c      	bne.n	8002084 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	f023 010f 	bic.w	r1, r3, #15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
 8002082:	e007      	b.n	8002094 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 020f 	bic.w	r2, r2, #15
 8002092:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	f023 0303 	bic.w	r3, r3, #3
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80020a4:	e007      	b.n	80020b6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3724      	adds	r7, #36	@ 0x24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	20000018 	.word	0x20000018
 80020c4:	053e2d63 	.word	0x053e2d63
 80020c8:	50040000 	.word	0x50040000
 80020cc:	50040100 	.word	0x50040100
 80020d0:	50040200 	.word	0x50040200
 80020d4:	50040300 	.word	0x50040300
 80020d8:	fff0c007 	.word	0xfff0c007

080020dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e4:	4857      	ldr	r0, [pc, #348]	@ (8002244 <HAL_ADC_Start+0x168>)
 80020e6:	f7ff fddd 	bl	8001ca4 <LL_ADC_GetMultimode>
 80020ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe7c 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 809c 	bne.w	8002236 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_Start+0x30>
 8002108:	2302      	movs	r3, #2
 800210a:	e097      	b.n	800223c <HAL_ADC_Start+0x160>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fe39 	bl	8002d8c <ADC_Enable>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 8083 	bne.w	800222c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a42      	ldr	r2, [pc, #264]	@ (8002248 <HAL_ADC_Start+0x16c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d002      	beq.n	800214a <HAL_ADC_Start+0x6e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	e000      	b.n	800214c <HAL_ADC_Start+0x70>
 800214a:	4b40      	ldr	r3, [pc, #256]	@ (800224c <HAL_ADC_Start+0x170>)
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	4293      	cmp	r3, r2
 8002152:	d002      	beq.n	800215a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d105      	bne.n	8002166 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002172:	d106      	bne.n	8002182 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	f023 0206 	bic.w	r2, r3, #6
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002180:	e002      	b.n	8002188 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	221c      	movs	r2, #28
 800218e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2a      	ldr	r2, [pc, #168]	@ (8002248 <HAL_ADC_Start+0x16c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d002      	beq.n	80021a8 <HAL_ADC_Start+0xcc>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	e000      	b.n	80021aa <HAL_ADC_Start+0xce>
 80021a8:	4b28      	ldr	r3, [pc, #160]	@ (800224c <HAL_ADC_Start+0x170>)
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d008      	beq.n	80021c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b05      	cmp	r3, #5
 80021bc:	d002      	beq.n	80021c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	d114      	bne.n	80021ee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fded 	bl	8001dc6 <LL_ADC_REG_StartConversion>
 80021ec:	e025      	b.n	800223a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a12      	ldr	r2, [pc, #72]	@ (8002248 <HAL_ADC_Start+0x16c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d002      	beq.n	800220a <HAL_ADC_Start+0x12e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e000      	b.n	800220c <HAL_ADC_Start+0x130>
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_ADC_Start+0x170>)
 800220c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00f      	beq.n	800223a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002222:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54
 800222a:	e006      	b.n	800223a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002234:	e001      	b.n	800223a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800223a:	7dfb      	ldrb	r3, [r7, #23]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	50040300 	.word	0x50040300
 8002248:	50040100 	.word	0x50040100
 800224c:	50040000 	.word	0x50040000

08002250 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800225a:	4866      	ldr	r0, [pc, #408]	@ (80023f4 <HAL_ADC_PollForConversion+0x1a4>)
 800225c:	f7ff fd22 	bl	8001ca4 <LL_ADC_GetMultimode>
 8002260:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	2b08      	cmp	r3, #8
 8002268:	d102      	bne.n	8002270 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800226a:	2308      	movs	r3, #8
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e02a      	b.n	80022c6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d002      	beq.n	8002282 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b09      	cmp	r3, #9
 8002280:	d111      	bne.n	80022a6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0a4      	b.n	80023ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022a0:	2304      	movs	r3, #4
 80022a2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80022a4:	e00f      	b.n	80022c6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022a6:	4853      	ldr	r0, [pc, #332]	@ (80023f4 <HAL_ADC_PollForConversion+0x1a4>)
 80022a8:	f7ff fd0a 	bl	8001cc0 <LL_ADC_GetMultiDMATransfer>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	f043 0220 	orr.w	r2, r3, #32
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e093      	b.n	80023ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022c2:	2304      	movs	r3, #4
 80022c4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022c6:	f7ff fba5 	bl	8001a14 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022cc:	e021      	b.n	8002312 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d01d      	beq.n	8002312 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022d6:	f7ff fb9d 	bl	8001a14 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <HAL_ADC_PollForConversion+0x9c>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d112      	bne.n	8002312 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	f043 0204 	orr.w	r2, r3, #4
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e06b      	b.n	80023ea <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0d6      	beq.n	80022ce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fc28 	bl	8001b86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01c      	beq.n	8002376 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e5b      	ldrb	r3, [r3, #25]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d118      	bne.n	8002376 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b08      	cmp	r3, #8
 8002350:	d111      	bne.n	8002376 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002356:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d105      	bne.n	8002376 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1f      	ldr	r2, [pc, #124]	@ (80023f8 <HAL_ADC_PollForConversion+0x1a8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d002      	beq.n	8002386 <HAL_ADC_PollForConversion+0x136>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	e000      	b.n	8002388 <HAL_ADC_PollForConversion+0x138>
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <HAL_ADC_PollForConversion+0x1ac>)
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4293      	cmp	r3, r2
 800238e:	d008      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d002      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d104      	bne.n	80023ac <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e00c      	b.n	80023c6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <HAL_ADC_PollForConversion+0x1a8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d002      	beq.n	80023bc <HAL_ADC_PollForConversion+0x16c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e000      	b.n	80023be <HAL_ADC_PollForConversion+0x16e>
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_ADC_PollForConversion+0x1ac>)
 80023be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d104      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2208      	movs	r2, #8
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e008      	b.n	80023e8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	220c      	movs	r2, #12
 80023e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	50040300 	.word	0x50040300
 80023f8:	50040100 	.word	0x50040100
 80023fc:	50040000 	.word	0x50040000

08002400 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800240c:	4853      	ldr	r0, [pc, #332]	@ (800255c <HAL_ADC_Start_DMA+0x15c>)
 800240e:	f7ff fc49 	bl	8001ca4 <LL_ADC_GetMultimode>
 8002412:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fce8 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 8093 	bne.w	800254c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_ADC_Start_DMA+0x34>
 8002430:	2302      	movs	r3, #2
 8002432:	e08e      	b.n	8002552 <HAL_ADC_Start_DMA+0x152>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a47      	ldr	r2, [pc, #284]	@ (8002560 <HAL_ADC_Start_DMA+0x160>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d008      	beq.n	8002458 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d002      	beq.n	8002458 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b09      	cmp	r3, #9
 8002456:	d172      	bne.n	800253e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fc97 	bl	8002d8c <ADC_Enable>
 800245e:	4603      	mov	r3, r0
 8002460:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d165      	bne.n	8002534 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002470:	f023 0301 	bic.w	r3, r3, #1
 8002474:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a38      	ldr	r2, [pc, #224]	@ (8002564 <HAL_ADC_Start_DMA+0x164>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d002      	beq.n	800248c <HAL_ADC_Start_DMA+0x8c>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	e000      	b.n	800248e <HAL_ADC_Start_DMA+0x8e>
 800248c:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <HAL_ADC_Start_DMA+0x168>)
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4293      	cmp	r3, r2
 8002494:	d002      	beq.n	800249c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d105      	bne.n	80024a8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f023 0206 	bic.w	r2, r3, #6
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	659a      	str	r2, [r3, #88]	@ 0x58
 80024c0:	e002      	b.n	80024c8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024cc:	4a27      	ldr	r2, [pc, #156]	@ (800256c <HAL_ADC_Start_DMA+0x16c>)
 80024ce:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d4:	4a26      	ldr	r2, [pc, #152]	@ (8002570 <HAL_ADC_Start_DMA+0x170>)
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024dc:	4a25      	ldr	r2, [pc, #148]	@ (8002574 <HAL_ADC_Start_DMA+0x174>)
 80024de:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	221c      	movs	r2, #28
 80024e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0210 	orr.w	r2, r2, #16
 80024fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	3340      	adds	r3, #64	@ 0x40
 800251a:	4619      	mov	r1, r3
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f001 fb5c 	bl	8003bdc <HAL_DMA_Start_IT>
 8002524:	4603      	mov	r3, r0
 8002526:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc4a 	bl	8001dc6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002532:	e00d      	b.n	8002550 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800253c:	e008      	b.n	8002550 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800254a:	e001      	b.n	8002550 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800254c:	2302      	movs	r3, #2
 800254e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002550:	7dfb      	ldrb	r3, [r7, #23]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	50040300 	.word	0x50040300
 8002560:	50040200 	.word	0x50040200
 8002564:	50040100 	.word	0x50040100
 8002568:	50040000 	.word	0x50040000
 800256c:	08002e99 	.word	0x08002e99
 8002570:	08002f71 	.word	0x08002f71
 8002574:	08002f8d 	.word	0x08002f8d

08002578 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0b6      	sub	sp, #216	@ 0xd8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x22>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e3c9      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x7b6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fc09 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 83aa 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d824      	bhi.n	800263e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	3b02      	subs	r3, #2
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d81b      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x8e>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <HAL_ADC_ConfigChannel+0x5c>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	0800261d 	.word	0x0800261d
 800260c:	08002625 	.word	0x08002625
 8002610:	0800262d 	.word	0x0800262d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002614:	230c      	movs	r3, #12
 8002616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800261a:	e010      	b.n	800263e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800261c:	2312      	movs	r3, #18
 800261e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002622:	e00c      	b.n	800263e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002624:	2318      	movs	r3, #24
 8002626:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800262a:	e008      	b.n	800263e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800262c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002634:	e003      	b.n	800263e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002636:	2306      	movs	r3, #6
 8002638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800263c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800264c:	f7ff faae 	bl	8001bac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fbca 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 800265a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fbd6 	bl	8001e14 <LL_ADC_INJ_IsConversionOngoing>
 8002668:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800266c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 81a4 	bne.w	80029be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 819f 	bne.w	80029be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	461a      	mov	r2, r3
 800268e:	f7ff fab9 	bl	8001c04 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	08db      	lsrs	r3, r3, #3
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d00a      	beq.n	80026ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6919      	ldr	r1, [r3, #16]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026c4:	f7ff fa0a 	bl	8001adc <LL_ADC_SetOffset>
 80026c8:	e179      	b.n	80029be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fa27 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x14e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fa1c 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	e01e      	b.n	8002734 <HAL_ADC_ConfigChannel+0x18c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fa11 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002718:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800271c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002724:	2320      	movs	r3, #32
 8002726:	e004      	b.n	8002732 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1a4>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	e018      	b.n	800277e <HAL_ADC_ConfigChannel+0x1d6>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002768:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002770:	2320      	movs	r3, #32
 8002772:	e004      	b.n	800277e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800277e:	429a      	cmp	r2, r3
 8002780:	d106      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f9e0 	bl	8001b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f9c4 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x214>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f9b9 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	f003 021f 	and.w	r2, r3, #31
 80027ba:	e01e      	b.n	80027fa <HAL_ADC_ConfigChannel+0x252>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f9ae 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80027ea:	2320      	movs	r3, #32
 80027ec:	e004      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80027ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x26a>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	e018      	b.n	8002844 <HAL_ADC_ConfigChannel+0x29c>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002826:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800282a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800282e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e004      	b.n	8002844 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800283a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002844:	429a      	cmp	r2, r3
 8002846:	d106      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2200      	movs	r2, #0
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f97d 	bl	8001b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f961 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x2da>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2102      	movs	r1, #2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f956 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	e01e      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x318>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f94b 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80028a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80028a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e004      	b.n	80028be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x330>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	e014      	b.n	8002902 <HAL_ADC_ConfigChannel+0x35a>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e004      	b.n	8002902 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80028f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002902:	429a      	cmp	r2, r3
 8002904:	d106      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f91e 	bl	8001b50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2103      	movs	r1, #3
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f902 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x398>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2103      	movs	r1, #3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff f8f7 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	e017      	b.n	8002970 <HAL_ADC_ConfigChannel+0x3c8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2103      	movs	r1, #3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f8ec 	bl	8001b24 <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800295a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800295c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x3e0>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	e011      	b.n	80029ac <HAL_ADC_ConfigChannel+0x404>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002998:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800299a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e003      	b.n	80029ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f8c9 	bl	8001b50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f9ec 	bl	8001da0 <LL_ADC_IsEnabled>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 8140 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6819      	ldr	r1, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	461a      	mov	r2, r3
 80029de:	f7ff f93d 	bl	8001c5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002c24 <HAL_ADC_ConfigChannel+0x67c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	f040 8131 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x46e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	bf94      	ite	ls
 8002a0e:	2301      	movls	r3, #1
 8002a10:	2300      	movhi	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	e019      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x4a2>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d079      	beq.n	8002b42 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x4c2>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	3301      	adds	r3, #1
 8002a62:	069b      	lsls	r3, r3, #26
 8002a64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a68:	e015      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x4ee>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a7a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e003      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	069b      	lsls	r3, r3, #26
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x50e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	e017      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x53e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	ea42 0103 	orr.w	r1, r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x564>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 021f 	and.w	r2, r3, #31
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	051b      	lsls	r3, r3, #20
 8002b0a:	e018      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x596>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 021f 	and.w	r2, r3, #31
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	e081      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x5b6>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	3301      	adds	r3, #1
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b5c:	e015      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x5e2>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e003      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	069b      	lsls	r3, r3, #26
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x602>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	e017      	b.n	8002bda <HAL_ADC_ConfigChannel+0x632>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	61bb      	str	r3, [r7, #24]
  return result;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	ea42 0103 	orr.w	r1, r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x65e>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 021f 	and.w	r2, r3, #31
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1e      	subs	r3, #30
 8002bfe:	051b      	lsls	r3, r3, #20
 8002c00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c04:	e01e      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x69c>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	60fb      	str	r3, [r7, #12]
  return result;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e006      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x688>
 8002c22:	bf00      	nop
 8002c24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 021f 	and.w	r2, r3, #31
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	051b      	lsls	r3, r3, #20
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fe ffda 	bl	8001c04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b44      	ldr	r3, [pc, #272]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d07a      	beq.n	8002d52 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5c:	4843      	ldr	r0, [pc, #268]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c5e:	f7fe ff2f 	bl	8001ac0 <LL_ADC_GetCommonPathInternalCh>
 8002c62:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a41      	ldr	r2, [pc, #260]	@ (8002d70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d12c      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d126      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3c      	ldr	r2, [pc, #240]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_ADC_ConfigChannel+0x6e8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d15d      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4834      	ldr	r0, [pc, #208]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c9c:	f7fe fefd 	bl	8001a9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca0:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	099b      	lsrs	r3, r3, #6
 8002ca6:	4a36      	ldr	r2, [pc, #216]	@ (8002d80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cba:	e002      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc8:	e040      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a2d      	ldr	r2, [pc, #180]	@ (8002d84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d118      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d112      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a23      	ldr	r2, [pc, #140]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x74c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a22      	ldr	r2, [pc, #136]	@ (8002d78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d12d      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	481b      	ldr	r0, [pc, #108]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d00:	f7fe fecb 	bl	8001a9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d04:	e024      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d88 <HAL_ADC_ConfigChannel+0x7e0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d120      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d11a      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a14      	ldr	r2, [pc, #80]	@ (8002d74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d115      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480e      	ldr	r0, [pc, #56]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002d32:	f7fe feb2 	bl	8001a9a <LL_ADC_SetCommonPathInternalCh>
 8002d36:	e00c      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d4a:	e002      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	37d8      	adds	r7, #216	@ 0xd8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	80080000 	.word	0x80080000
 8002d6c:	50040300 	.word	0x50040300
 8002d70:	c7520000 	.word	0xc7520000
 8002d74:	50040000 	.word	0x50040000
 8002d78:	50040200 	.word	0x50040200
 8002d7c:	20000018 	.word	0x20000018
 8002d80:	053e2d63 	.word	0x053e2d63
 8002d84:	cb840000 	.word	0xcb840000
 8002d88:	80000001 	.word	0x80000001

08002d8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe ffff 	bl	8001da0 <LL_ADC_IsEnabled>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d169      	bne.n	8002e7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <ADC_Enable+0xfc>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e055      	b.n	8002e7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe ffce 	bl	8001d78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ddc:	482b      	ldr	r0, [pc, #172]	@ (8002e8c <ADC_Enable+0x100>)
 8002dde:	f7fe fe6f 	bl	8001ac0 <LL_ADC_GetCommonPathInternalCh>
 8002de2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002de4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <ADC_Enable+0x104>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	4a28      	ldr	r2, [pc, #160]	@ (8002e94 <ADC_Enable+0x108>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e06:	e002      	b.n	8002e0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e14:	f7fe fdfe 	bl	8001a14 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e1a:	e028      	b.n	8002e6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe ffbd 	bl	8001da0 <LL_ADC_IsEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe ffa1 	bl	8001d78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e36:	f7fe fded 	bl	8001a14 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d914      	bls.n	8002e6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00d      	beq.n	8002e6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e007      	b.n	8002e7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d1cf      	bne.n	8002e1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	8000003f 	.word	0x8000003f
 8002e8c:	50040300 	.word	0x50040300
 8002e90:	20000018 	.word	0x20000018
 8002e94:	053e2d63 	.word	0x053e2d63

08002e98 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eaa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d14b      	bne.n	8002f4a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d021      	beq.n	8002f10 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe fe58 	bl	8001b86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d032      	beq.n	8002f42 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d12b      	bne.n	8002f42 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11f      	bne.n	8002f42 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f0e:	e018      	b.n	8002f42 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d111      	bne.n	8002f42 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d105      	bne.n	8002f42 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7fd fd46 	bl	80009d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f48:	e00e      	b.n	8002f68 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fb1b 	bl	8002592 <HAL_ADC_ErrorCallback>
}
 8002f5c:	e004      	b.n	8002f68 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7fd fd18 	bl	80009b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	f043 0204 	orr.w	r2, r3, #4
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff faed 	bl	8002592 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <LL_ADC_IsEnabled>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <LL_ADC_IsEnabled+0x18>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <LL_ADC_IsEnabled+0x1a>
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d101      	bne.n	8002ffe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b09f      	sub	sp, #124	@ 0x7c
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003026:	2302      	movs	r3, #2
 8003028:	e093      	b.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003032:	2300      	movs	r3, #0
 8003034:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003036:	2300      	movs	r3, #0
 8003038:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a47      	ldr	r2, [pc, #284]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d102      	bne.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003044:	4b46      	ldr	r3, [pc, #280]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	e001      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e072      	b.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ffb9 	bl	8002fe6 <LL_ADC_REG_IsConversionOngoing>
 8003074:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ffb3 	bl	8002fe6 <LL_ADC_REG_IsConversionOngoing>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d154      	bne.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003088:	2b00      	cmp	r3, #0
 800308a:	d151      	bne.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800308c:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800308e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02c      	beq.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030aa:	035b      	lsls	r3, r3, #13
 80030ac:	430b      	orrs	r3, r1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030b4:	4829      	ldr	r0, [pc, #164]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030b6:	f7ff ff83 	bl	8002fc0 <LL_ADC_IsEnabled>
 80030ba:	4604      	mov	r4, r0
 80030bc:	4828      	ldr	r0, [pc, #160]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030be:	f7ff ff7f 	bl	8002fc0 <LL_ADC_IsEnabled>
 80030c2:	4603      	mov	r3, r0
 80030c4:	431c      	orrs	r4, r3
 80030c6:	4828      	ldr	r0, [pc, #160]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030c8:	f7ff ff7a 	bl	8002fc0 <LL_ADC_IsEnabled>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4323      	orrs	r3, r4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d137      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030dc:	f023 030f 	bic.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	6811      	ldr	r1, [r2, #0]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030f0:	e028      	b.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030fe:	4817      	ldr	r0, [pc, #92]	@ (800315c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003100:	f7ff ff5e 	bl	8002fc0 <LL_ADC_IsEnabled>
 8003104:	4604      	mov	r4, r0
 8003106:	4816      	ldr	r0, [pc, #88]	@ (8003160 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003108:	f7ff ff5a 	bl	8002fc0 <LL_ADC_IsEnabled>
 800310c:	4603      	mov	r3, r0
 800310e:	431c      	orrs	r4, r3
 8003110:	4815      	ldr	r0, [pc, #84]	@ (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003112:	f7ff ff55 	bl	8002fc0 <LL_ADC_IsEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	4323      	orrs	r3, r4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d112      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800311e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003126:	f023 030f 	bic.w	r3, r3, #15
 800312a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800312c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800312e:	e009      	b.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003142:	e000      	b.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003144:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800314e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003152:	4618      	mov	r0, r3
 8003154:	377c      	adds	r7, #124	@ 0x7c
 8003156:	46bd      	mov	sp, r7
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	bf00      	nop
 800315c:	50040000 	.word	0x50040000
 8003160:	50040100 	.word	0x50040100
 8003164:	50040300 	.word	0x50040300
 8003168:	50040200 	.word	0x50040200

0800316c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003188:	4013      	ands	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319e:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <__NVIC_SetPriorityGrouping+0x44>)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	60d3      	str	r3, [r2, #12]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <__NVIC_GetPriorityGrouping+0x18>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	f003 0307 	and.w	r3, r3, #7
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db0b      	blt.n	80031fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4907      	ldr	r1, [pc, #28]	@ (8003208 <__NVIC_EnableIRQ+0x38>)
 80031ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2001      	movs	r0, #1
 80031f2:	fa00 f202 	lsl.w	r2, r0, r2
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000e100 	.word	0xe000e100

0800320c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db0a      	blt.n	8003236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	490c      	ldr	r1, [pc, #48]	@ (8003258 <__NVIC_SetPriority+0x4c>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	0112      	lsls	r2, r2, #4
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	440b      	add	r3, r1
 8003230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003234:	e00a      	b.n	800324c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4908      	ldr	r1, [pc, #32]	@ (800325c <__NVIC_SetPriority+0x50>)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	3b04      	subs	r3, #4
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	440b      	add	r3, r1
 800324a:	761a      	strb	r2, [r3, #24]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000e100 	.word	0xe000e100
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b480      	push	{r7}
 8003262:	b089      	sub	sp, #36	@ 0x24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f1c3 0307 	rsb	r3, r3, #7
 800327a:	2b04      	cmp	r3, #4
 800327c:	bf28      	it	cs
 800327e:	2304      	movcs	r3, #4
 8003280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3304      	adds	r3, #4
 8003286:	2b06      	cmp	r3, #6
 8003288:	d902      	bls.n	8003290 <NVIC_EncodePriority+0x30>
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3b03      	subs	r3, #3
 800328e:	e000      	b.n	8003292 <NVIC_EncodePriority+0x32>
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	401a      	ands	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	43d9      	mvns	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	4313      	orrs	r3, r2
         );
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	@ 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff4c 	bl	800316c <__NVIC_SetPriorityGrouping>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032ee:	f7ff ff61 	bl	80031b4 <__NVIC_GetPriorityGrouping>
 80032f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	6978      	ldr	r0, [r7, #20]
 80032fa:	f7ff ffb1 	bl	8003260 <NVIC_EncodePriority>
 80032fe:	4602      	mov	r2, r0
 8003300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff80 	bl	800320c <__NVIC_SetPriority>
}
 800330c:	bf00      	nop
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff54 	bl	80031d0 <__NVIC_EnableIRQ>
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e014      	b.n	800336c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	791b      	ldrb	r3, [r3, #4]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe f8a4 	bl	80014a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	795b      	ldrb	r3, [r3, #5]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_DAC_Start+0x16>
 8003386:	2302      	movs	r3, #2
 8003388:	e03b      	b.n	8003402 <HAL_DAC_Start+0x8e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2201      	movs	r2, #1
 80033a4:	409a      	lsls	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10f      	bne.n	80033d4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d118      	bne.n	80033f4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e00f      	b.n	80033f4 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80033de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033e2:	d107      	bne.n	80033f4 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0202 	orr.w	r2, r2, #2
 80033f2:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	795b      	ldrb	r3, [r3, #5]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_DAC_Start_DMA+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e0ab      	b.n	8003586 <HAL_DAC_Start_DMA+0x176>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2202      	movs	r2, #2
 8003438:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d12f      	bne.n	80034a0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a52      	ldr	r2, [pc, #328]	@ (8003590 <HAL_DAC_Start_DMA+0x180>)
 8003446:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a51      	ldr	r2, [pc, #324]	@ (8003594 <HAL_DAC_Start_DMA+0x184>)
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a50      	ldr	r2, [pc, #320]	@ (8003598 <HAL_DAC_Start_DMA+0x188>)
 8003456:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003466:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2b08      	cmp	r3, #8
 800346c:	d013      	beq.n	8003496 <HAL_DAC_Start_DMA+0x86>
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d845      	bhi.n	8003500 <HAL_DAC_Start_DMA+0xf0>
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_DAC_Start_DMA+0x72>
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d005      	beq.n	800348c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003480:	e03e      	b.n	8003500 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3308      	adds	r3, #8
 8003488:	613b      	str	r3, [r7, #16]
        break;
 800348a:	e03c      	b.n	8003506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	613b      	str	r3, [r7, #16]
        break;
 8003494:	e037      	b.n	8003506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3310      	adds	r3, #16
 800349c:	613b      	str	r3, [r7, #16]
        break;
 800349e:	e032      	b.n	8003506 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a3d      	ldr	r2, [pc, #244]	@ (800359c <HAL_DAC_Start_DMA+0x18c>)
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a3c      	ldr	r2, [pc, #240]	@ (80035a0 <HAL_DAC_Start_DMA+0x190>)
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a3b      	ldr	r2, [pc, #236]	@ (80035a4 <HAL_DAC_Start_DMA+0x194>)
 80034b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d013      	beq.n	80034f6 <HAL_DAC_Start_DMA+0xe6>
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d817      	bhi.n	8003504 <HAL_DAC_Start_DMA+0xf4>
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_DAC_Start_DMA+0xd2>
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d005      	beq.n	80034ec <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80034e0:	e010      	b.n	8003504 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	613b      	str	r3, [r7, #16]
        break;
 80034ea:	e00c      	b.n	8003506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3318      	adds	r3, #24
 80034f2:	613b      	str	r3, [r7, #16]
        break;
 80034f4:	e007      	b.n	8003506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	331c      	adds	r3, #28
 80034fc:	613b      	str	r3, [r7, #16]
        break;
 80034fe:	e002      	b.n	8003506 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003504:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d111      	bne.n	8003530 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6898      	ldr	r0, [r3, #8]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	f000 fb59 	bl	8003bdc <HAL_DMA_Start_IT>
 800352a:	4603      	mov	r3, r0
 800352c:	75fb      	strb	r3, [r7, #23]
 800352e:	e010      	b.n	8003552 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800353e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68d8      	ldr	r0, [r3, #12]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	f000 fb47 	bl	8003bdc <HAL_DMA_Start_IT>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2201      	movs	r2, #1
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e005      	b.n	8003584 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	08003945 	.word	0x08003945
 8003594:	08003967 	.word	0x08003967
 8003598:	08003983 	.word	0x08003983
 800359c:	08003a01 	.word	0x08003a01
 80035a0:	08003a23 	.word	0x08003a23
 80035a4:	08003a3f 	.word	0x08003a3f

080035a8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035be:	d120      	bne.n	8003602 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ce:	d118      	bne.n	8003602 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2204      	movs	r2, #4
 80035d4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035fa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f870 	bl	80036e2 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800360c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003610:	d120      	bne.n	8003654 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800361c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003620:	d118      	bne.n	8003654 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800363c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800364c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9cc 	bl	80039ec <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3308      	adds	r3, #8
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e004      	b.n	8003690 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	3314      	adds	r3, #20
 800368e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	461a      	mov	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b088      	sub	sp, #32
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	795b      	ldrb	r3, [r3, #5]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_DAC_ConfigChannel+0x1c>
 800370e:	2302      	movs	r3, #2
 8003710:	e114      	b.n	800393c <HAL_DAC_ConfigChannel+0x246>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2202      	movs	r2, #2
 800371c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b04      	cmp	r3, #4
 8003724:	f040 8081 	bne.w	800382a <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003728:	f7fe f974 	bl	8001a14 <HAL_GetTick>
 800372c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d140      	bne.n	80037b6 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003734:	e018      	b.n	8003768 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003736:	f7fe f96d 	bl	8001a14 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d911      	bls.n	8003768 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f043 0208 	orr.w	r2, r3, #8
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2203      	movs	r2, #3
 8003762:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0e9      	b.n	800393c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1df      	bne.n	8003736 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003776:	2001      	movs	r0, #1
 8003778:	f7fe f958 	bl	8001a2c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	6992      	ldr	r2, [r2, #24]
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40
 8003786:	e023      	b.n	80037d0 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003788:	f7fe f944 	bl	8001a14 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d90f      	bls.n	80037b6 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379c:	2b00      	cmp	r3, #0
 800379e:	da0a      	bge.n	80037b6 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f043 0208 	orr.w	r2, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2203      	movs	r2, #3
 80037b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0c2      	b.n	800393c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	dbe3      	blt.n	8003788 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80037c0:	2001      	movs	r0, #1
 80037c2:	f7fe f933 	bl	8001a2c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	6992      	ldr	r2, [r2, #24]
 80037ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	ea02 0103 	and.w	r1, r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	409a      	lsls	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	21ff      	movs	r1, #255	@ 0xff
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	ea02 0103 	and.w	r1, r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	409a      	lsls	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d11d      	bne.n	800386e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003838:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	221f      	movs	r2, #31
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003874:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2207      	movs	r2, #7
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	431a      	orrs	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6819      	ldr	r1, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	400a      	ands	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	22c0      	movs	r2, #192	@ 0xc0
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43da      	mvns	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	400a      	ands	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fea7 	bl	80036a6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	711a      	strb	r2, [r3, #4]
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff fea0 	bl	80036ba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fe96 	bl	80036ce <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	711a      	strb	r2, [r3, #4]
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff ffce 	bl	80039b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	711a      	strb	r2, [r3, #4]
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff ffc7 	bl	80039c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f043 0204 	orr.w	r2, r3, #4
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff ffbd 	bl	80039d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	711a      	strb	r2, [r3, #4]
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e098      	b.n	8003bb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	4b4d      	ldr	r3, [pc, #308]	@ (8003bbc <HAL_DMA_Init+0x150>)
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d80f      	bhi.n	8003aaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b4b      	ldr	r3, [pc, #300]	@ (8003bc0 <HAL_DMA_Init+0x154>)
 8003a92:	4413      	add	r3, r2
 8003a94:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc4 <HAL_DMA_Init+0x158>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	009a      	lsls	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a48      	ldr	r2, [pc, #288]	@ (8003bc8 <HAL_DMA_Init+0x15c>)
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003aa8:	e00e      	b.n	8003ac8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b46      	ldr	r3, [pc, #280]	@ (8003bcc <HAL_DMA_Init+0x160>)
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a43      	ldr	r2, [pc, #268]	@ (8003bc4 <HAL_DMA_Init+0x158>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	009a      	lsls	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a42      	ldr	r2, [pc, #264]	@ (8003bd0 <HAL_DMA_Init+0x164>)
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b22:	d039      	beq.n	8003b98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <HAL_DMA_Init+0x15c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d11a      	bne.n	8003b64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b2e:	4b29      	ldr	r3, [pc, #164]	@ (8003bd4 <HAL_DMA_Init+0x168>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	f003 031c 	and.w	r3, r3, #28
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	4924      	ldr	r1, [pc, #144]	@ (8003bd4 <HAL_DMA_Init+0x168>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b48:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <HAL_DMA_Init+0x168>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b54:	f003 031c 	and.w	r3, r3, #28
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	491d      	ldr	r1, [pc, #116]	@ (8003bd4 <HAL_DMA_Init+0x168>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
 8003b62:	e019      	b.n	8003b98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b64:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <HAL_DMA_Init+0x16c>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	f003 031c 	and.w	r3, r3, #28
 8003b70:	210f      	movs	r1, #15
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	4917      	ldr	r1, [pc, #92]	@ (8003bd8 <HAL_DMA_Init+0x16c>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b7e:	4b16      	ldr	r3, [pc, #88]	@ (8003bd8 <HAL_DMA_Init+0x16c>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	f003 031c 	and.w	r3, r3, #28
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	4911      	ldr	r1, [pc, #68]	@ (8003bd8 <HAL_DMA_Init+0x16c>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40020407 	.word	0x40020407
 8003bc0:	bffdfff8 	.word	0xbffdfff8
 8003bc4:	cccccccd 	.word	0xcccccccd
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	bffdfbf8 	.word	0xbffdfbf8
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	400200a8 	.word	0x400200a8
 8003bd8:	400204a8 	.word	0x400204a8

08003bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_DMA_Start_IT+0x20>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e04b      	b.n	8003c94 <HAL_DMA_Start_IT+0xb8>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d13a      	bne.n	8003c86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8e0 	bl	8003dfa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 020e 	orr.w	r2, r2, #14
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e00f      	b.n	8003c74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 020a 	orr.w	r2, r2, #10
 8003c72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e005      	b.n	8003c92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	f003 031c 	and.w	r3, r3, #28
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d026      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x7a>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d021      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf4:	f003 021c 	and.w	r2, r3, #28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	2104      	movs	r1, #4
 8003cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003d02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d071      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d14:	e06c      	b.n	8003df0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f003 031c 	and.w	r3, r3, #28
 8003d1e:	2202      	movs	r2, #2
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d02e      	beq.n	8003d88 <HAL_DMA_IRQHandler+0xec>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d029      	beq.n	8003d88 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 020a 	bic.w	r2, r2, #10
 8003d50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f003 021c 	and.w	r2, r3, #28
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2102      	movs	r1, #2
 8003d68:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d038      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d86:	e033      	b.n	8003df0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8c:	f003 031c 	and.w	r3, r3, #28
 8003d90:	2208      	movs	r2, #8
 8003d92:	409a      	lsls	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d02a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x156>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d025      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 020e 	bic.w	r2, r2, #14
 8003db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f003 021c 	and.w	r2, r3, #28
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
}
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0c:	f003 021c 	and.w	r2, r3, #28
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d108      	bne.n	8003e3e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e3c:	e007      	b.n	8003e4e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	60da      	str	r2, [r3, #12]
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6a:	e17f      	b.n	800416c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8171 	beq.w	8004166 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d005      	beq.n	8003e9c <HAL_GPIO_Init+0x40>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d130      	bne.n	8003efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 0201 	and.w	r2, r3, #1
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d118      	bne.n	8003f3c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f10:	2201      	movs	r2, #1
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	f003 0201 	and.w	r2, r3, #1
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d017      	beq.n	8003f78 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d123      	bne.n	8003fcc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3208      	adds	r2, #8
 8003f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	08da      	lsrs	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3208      	adds	r2, #8
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0203 	and.w	r2, r3, #3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80ac 	beq.w	8004166 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400e:	4b5f      	ldr	r3, [pc, #380]	@ (800418c <HAL_GPIO_Init+0x330>)
 8004010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004012:	4a5e      	ldr	r2, [pc, #376]	@ (800418c <HAL_GPIO_Init+0x330>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6613      	str	r3, [r2, #96]	@ 0x60
 800401a:	4b5c      	ldr	r3, [pc, #368]	@ (800418c <HAL_GPIO_Init+0x330>)
 800401c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004026:	4a5a      	ldr	r2, [pc, #360]	@ (8004190 <HAL_GPIO_Init+0x334>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004050:	d025      	beq.n	800409e <HAL_GPIO_Init+0x242>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	@ (8004194 <HAL_GPIO_Init+0x338>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01f      	beq.n	800409a <HAL_GPIO_Init+0x23e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4e      	ldr	r2, [pc, #312]	@ (8004198 <HAL_GPIO_Init+0x33c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x23a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4d      	ldr	r2, [pc, #308]	@ (800419c <HAL_GPIO_Init+0x340>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x236>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4c      	ldr	r2, [pc, #304]	@ (80041a0 <HAL_GPIO_Init+0x344>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x232>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <HAL_GPIO_Init+0x348>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x22e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4a      	ldr	r2, [pc, #296]	@ (80041a8 <HAL_GPIO_Init+0x34c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x22a>
 8004082:	2306      	movs	r3, #6
 8004084:	e00c      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 8004086:	2307      	movs	r3, #7
 8004088:	e00a      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800408a:	2305      	movs	r3, #5
 800408c:	e008      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800408e:	2304      	movs	r3, #4
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 8004092:	2303      	movs	r3, #3
 8004094:	e004      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 8004096:	2302      	movs	r3, #2
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800409e:	2300      	movs	r3, #0
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	f002 0203 	and.w	r2, r2, #3
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4093      	lsls	r3, r2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040b0:	4937      	ldr	r1, [pc, #220]	@ (8004190 <HAL_GPIO_Init+0x334>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040be:	4b3b      	ldr	r3, [pc, #236]	@ (80041ac <HAL_GPIO_Init+0x350>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e2:	4a32      	ldr	r2, [pc, #200]	@ (80041ac <HAL_GPIO_Init+0x350>)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040e8:	4b30      	ldr	r3, [pc, #192]	@ (80041ac <HAL_GPIO_Init+0x350>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800410c:	4a27      	ldr	r2, [pc, #156]	@ (80041ac <HAL_GPIO_Init+0x350>)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004112:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <HAL_GPIO_Init+0x350>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004136:	4a1d      	ldr	r2, [pc, #116]	@ (80041ac <HAL_GPIO_Init+0x350>)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800413c:	4b1b      	ldr	r3, [pc, #108]	@ (80041ac <HAL_GPIO_Init+0x350>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004160:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <HAL_GPIO_Init+0x350>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3301      	adds	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	f47f ae78 	bne.w	8003e6c <HAL_GPIO_Init+0x10>
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	40010000 	.word	0x40010000
 8004194:	48000400 	.word	0x48000400
 8004198:	48000800 	.word	0x48000800
 800419c:	48000c00 	.word	0x48000c00
 80041a0:	48001000 	.word	0x48001000
 80041a4:	48001400 	.word	0x48001400
 80041a8:	48001800 	.word	0x48001800
 80041ac:	40010400 	.word	0x40010400

080041b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e001      	b.n	80041d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
 80041ec:	4613      	mov	r3, r2
 80041ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f0:	787b      	ldrb	r3, [r7, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041fc:	e002      	b.n	8004204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	041a      	lsls	r2, r3, #16
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	43d9      	mvns	r1, r3
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	400b      	ands	r3, r1
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	619a      	str	r2, [r3, #24]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0c3      	b.n	80043e2 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b05      	cmp	r3, #5
 8004264:	d101      	bne.n	800426a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0bb      	b.n	80043e2 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d101      	bne.n	800427a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0b3      	b.n	80043e2 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f978 	bl	800158c <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042aa:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d11b      	bne.n	80042ec <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 80042be:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6891      	ldr	r1, [r2, #8]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68d2      	ldr	r2, [r2, #12]
 80042ca:	4311      	orrs	r1, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6992      	ldr	r2, [r2, #24]
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6912      	ldr	r2, [r2, #16]
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6952      	ldr	r2, [r2, #20]
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	69d2      	ldr	r2, [r2, #28]
 80042e2:	4311      	orrs	r1, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d115      	bne.n	8004320 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 80042fe:	f023 030e 	bic.w	r3, r3, #14
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6891      	ldr	r1, [r2, #8]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6952      	ldr	r2, [r2, #20]
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	69d2      	ldr	r2, [r2, #28]
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	430b      	orrs	r3, r1
 800431e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d118      	bne.n	800435a <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f423 438e 	bic.w	r3, r3, #18176	@ 0x4700
 8004332:	f023 030e 	bic.w	r3, r3, #14
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6891      	ldr	r1, [r2, #8]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68d2      	ldr	r2, [r2, #12]
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6912      	ldr	r2, [r2, #16]
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6952      	ldr	r2, [r2, #20]
 800434a:	4311      	orrs	r1, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	69d2      	ldr	r2, [r2, #28]
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	430b      	orrs	r3, r1
 8004358:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004362:	d12a      	bne.n	80043ba <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d013      	beq.n	8004394 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8004376:	4313      	orrs	r3, r2
 8004378:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004384:	f023 031f 	bic.w	r3, r3, #31
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	430b      	orrs	r3, r1
 8004390:	6053      	str	r3, [r2, #4]
 8004392:	e012      	b.n	80043ba <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 800439e:	4313      	orrs	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80043ac:	f023 031f 	bic.w	r3, r3, #31
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 80043ba:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <HAL_OPAMP_Init+0x1a8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4909      	ldr	r1, [pc, #36]	@ (80043ec <HAL_OPAMP_Init+0x1a8>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40007800 	.word	0x40007800

080043f0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d102      	bne.n	8004408 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	e01d      	b.n	8004444 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b05      	cmp	r3, #5
 8004412:	d102      	bne.n	800441a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e014      	b.n	8004444 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d10c      	bne.n	8004440 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2204      	movs	r2, #4
 800443a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800443e:	e001      	b.n	8004444 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004458:	4b04      	ldr	r3, [pc, #16]	@ (800446c <HAL_PWREx_GetVoltageRange+0x18>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40007000 	.word	0x40007000

08004470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447e:	d130      	bne.n	80044e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004480:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448c:	d038      	beq.n	8004500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800448e:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004496:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800449e:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2232      	movs	r2, #50	@ 0x32
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	0c9b      	lsrs	r3, r3, #18
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b4:	e002      	b.n	80044bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044bc:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c8:	d102      	bne.n	80044d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f2      	bne.n	80044b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044dc:	d110      	bne.n	8004500 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e00f      	b.n	8004502 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ee:	d007      	beq.n	8004500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044f0:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044f8:	4a05      	ldr	r2, [pc, #20]	@ (8004510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40007000 	.word	0x40007000
 8004514:	20000018 	.word	0x20000018
 8004518:	431bde83 	.word	0x431bde83

0800451c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e3ca      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452e:	4b97      	ldr	r3, [pc, #604]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004538:	4b94      	ldr	r3, [pc, #592]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80e4 	beq.w	8004718 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <HAL_RCC_OscConfig+0x4a>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	f040 808b 	bne.w	8004674 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b01      	cmp	r3, #1
 8004562:	f040 8087 	bne.w	8004674 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004566:	4b89      	ldr	r3, [pc, #548]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x62>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e3a2      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	4b82      	ldr	r3, [pc, #520]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <HAL_RCC_OscConfig+0x7c>
 800458e:	4b7f      	ldr	r3, [pc, #508]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004596:	e005      	b.n	80045a4 <HAL_RCC_OscConfig+0x88>
 8004598:	4b7c      	ldr	r3, [pc, #496]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d223      	bcs.n	80045f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fd87 	bl	80050c0 <RCC_SetFlashLatencyFromMSIRange>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e383      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045bc:	4b73      	ldr	r3, [pc, #460]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a72      	ldr	r2, [pc, #456]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045c2:	f043 0308 	orr.w	r3, r3, #8
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b70      	ldr	r3, [pc, #448]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	496d      	ldr	r1, [pc, #436]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045da:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	4968      	ldr	r1, [pc, #416]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]
 80045ee:	e025      	b.n	800463c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f0:	4b66      	ldr	r3, [pc, #408]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a65      	ldr	r2, [pc, #404]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b63      	ldr	r3, [pc, #396]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4960      	ldr	r1, [pc, #384]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460e:	4b5f      	ldr	r3, [pc, #380]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	495b      	ldr	r1, [pc, #364]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fd47 	bl	80050c0 <RCC_SetFlashLatencyFromMSIRange>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e343      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800463c:	f000 fc4a 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b52      	ldr	r3, [pc, #328]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	4950      	ldr	r1, [pc, #320]	@ (8004790 <HAL_RCC_OscConfig+0x274>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
 8004658:	4a4e      	ldr	r2, [pc, #312]	@ (8004794 <HAL_RCC_OscConfig+0x278>)
 800465a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800465c:	4b4e      	ldr	r3, [pc, #312]	@ (8004798 <HAL_RCC_OscConfig+0x27c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fd f865 	bl	8001730 <HAL_InitTick>
 8004666:	4603      	mov	r3, r0
 8004668:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d052      	beq.n	8004716 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	e327      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d032      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800467c:	4b43      	ldr	r3, [pc, #268]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a42      	ldr	r2, [pc, #264]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004688:	f7fd f9c4 	bl	8001a14 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004690:	f7fd f9c0 	bl	8001a14 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e310      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a2:	4b3a      	ldr	r3, [pc, #232]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ae:	4b37      	ldr	r3, [pc, #220]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a36      	ldr	r2, [pc, #216]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046b4:	f043 0308 	orr.w	r3, r3, #8
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	4b34      	ldr	r3, [pc, #208]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4931      	ldr	r1, [pc, #196]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046cc:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	492c      	ldr	r1, [pc, #176]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
 80046e0:	e01a      	b.n	8004718 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046e2:	4b2a      	ldr	r3, [pc, #168]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a29      	ldr	r2, [pc, #164]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046ee:	f7fd f991 	bl	8001a14 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046f6:	f7fd f98d 	bl	8001a14 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e2dd      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004708:	4b20      	ldr	r3, [pc, #128]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCC_OscConfig+0x1da>
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004716:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d074      	beq.n	800480e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b08      	cmp	r3, #8
 8004728:	d005      	beq.n	8004736 <HAL_RCC_OscConfig+0x21a>
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b0c      	cmp	r3, #12
 800472e:	d10e      	bne.n	800474e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d10b      	bne.n	800474e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d064      	beq.n	800480c <HAL_RCC_OscConfig+0x2f0>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d160      	bne.n	800480c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e2ba      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x24a>
 8004758:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0b      	ldr	r2, [pc, #44]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800475e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e026      	b.n	80047b4 <HAL_RCC_OscConfig+0x298>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800476e:	d115      	bne.n	800479c <HAL_RCC_OscConfig+0x280>
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a05      	ldr	r2, [pc, #20]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004776:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b03      	ldr	r3, [pc, #12]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a02      	ldr	r2, [pc, #8]	@ (800478c <HAL_RCC_OscConfig+0x270>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e014      	b.n	80047b4 <HAL_RCC_OscConfig+0x298>
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
 8004790:	08007a98 	.word	0x08007a98
 8004794:	20000018 	.word	0x20000018
 8004798:	2000001c 	.word	0x2000001c
 800479c:	4ba0      	ldr	r3, [pc, #640]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a9f      	ldr	r2, [pc, #636]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	4b9d      	ldr	r3, [pc, #628]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a9c      	ldr	r2, [pc, #624]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80047ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd f92a 	bl	8001a14 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fd f926 	bl	8001a14 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e276      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d6:	4b92      	ldr	r3, [pc, #584]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x2a8>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd f916 	bl	8001a14 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fd f912 	bl	8001a14 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e262      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047fe:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x2d0>
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d060      	beq.n	80048dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x310>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b0c      	cmp	r3, #12
 8004824:	d119      	bne.n	800485a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d116      	bne.n	800485a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800482c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_OscConfig+0x328>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e23f      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004844:	4b76      	ldr	r3, [pc, #472]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	4973      	ldr	r1, [pc, #460]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004858:	e040      	b.n	80048dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d023      	beq.n	80048aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004862:	4b6f      	ldr	r3, [pc, #444]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a6e      	ldr	r2, [pc, #440]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800486c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fd f8d1 	bl	8001a14 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004876:	f7fd f8cd 	bl	8001a14 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e21d      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004888:	4b65      	ldr	r3, [pc, #404]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b62      	ldr	r3, [pc, #392]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	495f      	ldr	r1, [pc, #380]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
 80048a8:	e018      	b.n	80048dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80048b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fd f8ad 	bl	8001a14 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048be:	f7fd f8a9 	bl	8001a14 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e1f9      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d0:	4b53      	ldr	r3, [pc, #332]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d03c      	beq.n	8004962 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01c      	beq.n	800492a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fd f888 	bl	8001a14 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004908:	f7fd f884 	bl	8001a14 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e1d4      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800491a:	4b41      	ldr	r3, [pc, #260]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 800491c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ef      	beq.n	8004908 <HAL_RCC_OscConfig+0x3ec>
 8004928:	e01b      	b.n	8004962 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 800492c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004930:	4a3b      	ldr	r2, [pc, #236]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fd f86b 	bl	8001a14 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004942:	f7fd f867 	bl	8001a14 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e1b7      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004954:	4b32      	ldr	r3, [pc, #200]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ef      	bne.n	8004942 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80a6 	beq.w	8004abc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004970:	2300      	movs	r3, #0
 8004972:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004974:	4b2a      	ldr	r3, [pc, #168]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004980:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004984:	4a26      	ldr	r2, [pc, #152]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498a:	6593      	str	r3, [r2, #88]	@ 0x58
 800498c:	4b24      	ldr	r3, [pc, #144]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004998:	2301      	movs	r3, #1
 800499a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499c:	4b21      	ldr	r3, [pc, #132]	@ (8004a24 <HAL_RCC_OscConfig+0x508>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d118      	bne.n	80049da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <HAL_RCC_OscConfig+0x508>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <HAL_RCC_OscConfig+0x508>)
 80049ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b4:	f7fd f82e 	bl	8001a14 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049bc:	f7fd f82a 	bl	8001a14 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e17a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ce:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <HAL_RCC_OscConfig+0x508>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d108      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4d8>
 80049e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f2:	e029      	b.n	8004a48 <HAL_RCC_OscConfig+0x52c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d115      	bne.n	8004a28 <HAL_RCC_OscConfig+0x50c>
 80049fc:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	4a07      	ldr	r2, [pc, #28]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a0c:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	4a03      	ldr	r2, [pc, #12]	@ (8004a20 <HAL_RCC_OscConfig+0x504>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a1c:	e014      	b.n	8004a48 <HAL_RCC_OscConfig+0x52c>
 8004a1e:	bf00      	nop
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40007000 	.word	0x40007000
 8004a28:	4b9c      	ldr	r3, [pc, #624]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	4a9b      	ldr	r2, [pc, #620]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a38:	4b98      	ldr	r3, [pc, #608]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	4a97      	ldr	r2, [pc, #604]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d016      	beq.n	8004a7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a50:	f7fc ffe0 	bl	8001a14 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a58:	f7fc ffdc 	bl	8001a14 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e12a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a6e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0ed      	beq.n	8004a58 <HAL_RCC_OscConfig+0x53c>
 8004a7c:	e015      	b.n	8004aaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fc ffc9 	bl	8001a14 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a84:	e00a      	b.n	8004a9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fc ffc5 	bl	8001a14 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e113      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a9c:	4b7f      	ldr	r3, [pc, #508]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ed      	bne.n	8004a86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab4:	4a79      	ldr	r2, [pc, #484]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80fe 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	f040 80d0 	bne.w	8004c70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ad0:	4b72      	ldr	r3, [pc, #456]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d130      	bne.n	8004b46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	3b01      	subs	r3, #1
 8004af0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d127      	bne.n	8004b46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d11f      	bne.n	8004b46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b10:	2a07      	cmp	r2, #7
 8004b12:	bf14      	ite	ne
 8004b14:	2201      	movne	r2, #1
 8004b16:	2200      	moveq	r2, #0
 8004b18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d113      	bne.n	8004b46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d109      	bne.n	8004b46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d06e      	beq.n	8004c24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	d069      	beq.n	8004c20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b4c:	4b53      	ldr	r3, [pc, #332]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b58:	4b50      	ldr	r3, [pc, #320]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0ad      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b68:	4b4c      	ldr	r3, [pc, #304]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b74:	f7fc ff4e 	bl	8001a14 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fc ff4a 	bl	8001a14 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e09a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b8e:	4b43      	ldr	r3, [pc, #268]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b9a:	4b40      	ldr	r3, [pc, #256]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	4b40      	ldr	r3, [pc, #256]	@ (8004ca0 <HAL_RCC_OscConfig+0x784>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004baa:	3a01      	subs	r2, #1
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	4311      	orrs	r1, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bb4:	0212      	lsls	r2, r2, #8
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	3a01      	subs	r2, #1
 8004bc0:	0552      	lsls	r2, r2, #21
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bc8:	0852      	lsrs	r2, r2, #1
 8004bca:	3a01      	subs	r2, #1
 8004bcc:	0652      	lsls	r2, r2, #25
 8004bce:	4311      	orrs	r1, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bd4:	0912      	lsrs	r2, r2, #4
 8004bd6:	0452      	lsls	r2, r2, #17
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	4930      	ldr	r1, [pc, #192]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004be0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bec:	4b2b      	ldr	r3, [pc, #172]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bf8:	f7fc ff0c 	bl	8001a14 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fc ff08 	bl	8001a14 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e058      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c12:	4b22      	ldr	r3, [pc, #136]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c1e:	e050      	b.n	8004cc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e04f      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c24:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d148      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c30:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a19      	ldr	r2, [pc, #100]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c3c:	4b17      	ldr	r3, [pc, #92]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a16      	ldr	r2, [pc, #88]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c48:	f7fc fee4 	bl	8001a14 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fc fee0 	bl	8001a14 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e030      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c62:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x734>
 8004c6e:	e028      	b.n	8004cc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b0c      	cmp	r3, #12
 8004c74:	d023      	beq.n	8004cbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a08      	ldr	r2, [pc, #32]	@ (8004c9c <HAL_RCC_OscConfig+0x780>)
 8004c7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc fec7 	bl	8001a14 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c88:	e00c      	b.n	8004ca4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8a:	f7fc fec3 	bl	8001a14 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d905      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e013      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca4:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_RCC_OscConfig+0x7b0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1ec      	bne.n	8004c8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cb0:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <HAL_RCC_OscConfig+0x7b0>)
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	4905      	ldr	r1, [pc, #20]	@ (8004ccc <HAL_RCC_OscConfig+0x7b0>)
 8004cb6:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <HAL_RCC_OscConfig+0x7b4>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60cb      	str	r3, [r1, #12]
 8004cbc:	e001      	b.n	8004cc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	feeefffc 	.word	0xfeeefffc

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0e7      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b75      	ldr	r3, [pc, #468]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d910      	bls.n	8004d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b72      	ldr	r3, [pc, #456]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 0207 	bic.w	r2, r3, #7
 8004cfe:	4970      	ldr	r1, [pc, #448]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b6e      	ldr	r3, [pc, #440]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0cf      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d010      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	4b66      	ldr	r3, [pc, #408]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d908      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b63      	ldr	r3, [pc, #396]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4960      	ldr	r1, [pc, #384]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04c      	beq.n	8004dec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d121      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0a6      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d72:	4b54      	ldr	r3, [pc, #336]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d115      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e09a      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e08e      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e086      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004daa:	4b46      	ldr	r3, [pc, #280]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f023 0203 	bic.w	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4943      	ldr	r1, [pc, #268]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dbc:	f7fc fe2a 	bl	8001a14 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	e00a      	b.n	8004dda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc4:	f7fc fe26 	bl	8001a14 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e06e      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	4b3a      	ldr	r3, [pc, #232]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 020c 	and.w	r2, r3, #12
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d1eb      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d010      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	4b31      	ldr	r3, [pc, #196]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d208      	bcs.n	8004e1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e08:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	492b      	ldr	r1, [pc, #172]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d210      	bcs.n	8004e4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e28:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 0207 	bic.w	r2, r3, #7
 8004e30:	4923      	ldr	r1, [pc, #140]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e38:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e036      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e56:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4918      	ldr	r1, [pc, #96]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e74:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4910      	ldr	r1, [pc, #64]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e88:	f000 f824 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	490b      	ldr	r1, [pc, #44]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea4:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <HAL_RCC_ClockConfig+0x1f8>)
 8004ea6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ea8:	4b09      	ldr	r3, [pc, #36]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fc fc3f 	bl	8001730 <HAL_InitTick>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40022000 	.word	0x40022000
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	08007a98 	.word	0x08007a98
 8004ecc:	20000018 	.word	0x20000018
 8004ed0:	2000001c 	.word	0x2000001c

08004ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	@ 0x24
 8004ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eec:	4b3b      	ldr	r3, [pc, #236]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x34>
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d121      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d11e      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f08:	4b34      	ldr	r3, [pc, #208]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f14:	4b31      	ldr	r3, [pc, #196]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	e005      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f24:	4b2d      	ldr	r3, [pc, #180]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f30:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d102      	bne.n	8004f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f4c:	4b25      	ldr	r3, [pc, #148]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	e004      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f58:	4b23      	ldr	r3, [pc, #140]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d134      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f62:	4b1e      	ldr	r3, [pc, #120]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d003      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0xac>
 8004f78:	e005      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f7c:	617b      	str	r3, [r7, #20]
      break;
 8004f7e:	e005      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f80:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f82:	617b      	str	r3, [r7, #20]
      break;
 8004f84:	e002      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	617b      	str	r3, [r7, #20]
      break;
 8004f8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f8c:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	3301      	adds	r3, #1
 8004f98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f9a:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	fb03 f202 	mul.w	r2, r3, r2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	0e5b      	lsrs	r3, r3, #25
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3724      	adds	r7, #36	@ 0x24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	08007ab0 	.word	0x08007ab0
 8004fe4:	00f42400 	.word	0x00f42400
 8004fe8:	007a1200 	.word	0x007a1200

08004fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff0:	4b03      	ldr	r3, [pc, #12]	@ (8005000 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000018 	.word	0x20000018

08005004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005008:	f7ff fff0 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 800500c:	4602      	mov	r2, r0
 800500e:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	0a1b      	lsrs	r3, r3, #8
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	4904      	ldr	r1, [pc, #16]	@ (800502c <HAL_RCC_GetPCLK1Freq+0x28>)
 800501a:	5ccb      	ldrb	r3, [r1, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	08007aa8 	.word	0x08007aa8

08005030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005034:	f7ff ffda 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	0adb      	lsrs	r3, r3, #11
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	4904      	ldr	r1, [pc, #16]	@ (8005058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005046:	5ccb      	ldrb	r3, [r1, r3]
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40021000 	.word	0x40021000
 8005058:	08007aa8 	.word	0x08007aa8

0800505c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	220f      	movs	r2, #15
 800506a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0203 	and.w	r2, r3, #3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005078:	4b0f      	ldr	r3, [pc, #60]	@ (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005084:	4b0c      	ldr	r3, [pc, #48]	@ (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005090:	4b09      	ldr	r3, [pc, #36]	@ (80050b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800509e:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <HAL_RCC_GetClockConfig+0x60>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0207 	and.w	r2, r3, #7
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40022000 	.word	0x40022000

080050c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050d8:	f7ff f9bc 	bl	8004454 <HAL_PWREx_GetVoltageRange>
 80050dc:	6178      	str	r0, [r7, #20]
 80050de:	e014      	b.n	800510a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050e0:	4b25      	ldr	r3, [pc, #148]	@ (8005178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e4:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ec:	4b22      	ldr	r3, [pc, #136]	@ (8005178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050f8:	f7ff f9ac 	bl	8004454 <HAL_PWREx_GetVoltageRange>
 80050fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005102:	4a1d      	ldr	r2, [pc, #116]	@ (8005178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005108:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005110:	d10b      	bne.n	800512a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b80      	cmp	r3, #128	@ 0x80
 8005116:	d919      	bls.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2ba0      	cmp	r3, #160	@ 0xa0
 800511c:	d902      	bls.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800511e:	2302      	movs	r3, #2
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e013      	b.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005124:	2301      	movs	r3, #1
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e010      	b.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b80      	cmp	r3, #128	@ 0x80
 800512e:	d902      	bls.n	8005136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005130:	2303      	movs	r3, #3
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e00a      	b.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	d102      	bne.n	8005142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800513c:	2302      	movs	r3, #2
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	e004      	b.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b70      	cmp	r3, #112	@ 0x70
 8005146:	d101      	bne.n	800514c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005148:	2301      	movs	r3, #1
 800514a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f023 0207 	bic.w	r2, r3, #7
 8005154:	4909      	ldr	r1, [pc, #36]	@ (800517c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800515c:	4b07      	ldr	r3, [pc, #28]	@ (800517c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	d001      	beq.n	800516e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	40022000 	.word	0x40022000

08005180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005188:	2300      	movs	r3, #0
 800518a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800518c:	2300      	movs	r3, #0
 800518e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005198:	2b00      	cmp	r3, #0
 800519a:	d041      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051a4:	d02a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80051aa:	d824      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051b0:	d008      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051b6:	d81e      	bhi.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051c0:	d010      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051c2:	e018      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051c4:	4b86      	ldr	r3, [pc, #536]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4a85      	ldr	r2, [pc, #532]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051d0:	e015      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fabb 	bl	8005754 <RCCEx_PLLSAI1_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051e2:	e00c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3320      	adds	r3, #32
 80051e8:	2100      	movs	r1, #0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fba6 	bl	800593c <RCCEx_PLLSAI2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051f4:	e003      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	74fb      	strb	r3, [r7, #19]
      break;
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fe:	7cfb      	ldrb	r3, [r7, #19]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10b      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005204:	4b76      	ldr	r3, [pc, #472]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005212:	4973      	ldr	r1, [pc, #460]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800521a:	e001      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d041      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005230:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005234:	d02a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005236:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800523a:	d824      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800523c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005240:	d008      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005246:	d81e      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800524c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005250:	d010      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005252:	e018      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005254:	4b62      	ldr	r3, [pc, #392]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4a61      	ldr	r2, [pc, #388]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800525a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800525e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005260:	e015      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fa73 	bl	8005754 <RCCEx_PLLSAI1_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005272:	e00c      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3320      	adds	r3, #32
 8005278:	2100      	movs	r1, #0
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb5e 	bl	800593c <RCCEx_PLLSAI2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	74fb      	strb	r3, [r7, #19]
      break;
 800528a:	e000      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800528c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528e:	7cfb      	ldrb	r3, [r7, #19]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10b      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005294:	4b52      	ldr	r3, [pc, #328]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052a2:	494f      	ldr	r1, [pc, #316]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052aa:	e001      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80a0 	beq.w	80053fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052be:	2300      	movs	r3, #0
 80052c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052c2:	4b47      	ldr	r3, [pc, #284]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00d      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d8:	4b41      	ldr	r3, [pc, #260]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052dc:	4a40      	ldr	r2, [pc, #256]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052e4:	4b3e      	ldr	r3, [pc, #248]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052f0:	2301      	movs	r3, #1
 80052f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f4:	4b3b      	ldr	r3, [pc, #236]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3a      	ldr	r2, [pc, #232]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005300:	f7fc fb88 	bl	8001a14 <HAL_GetTick>
 8005304:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005306:	e009      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005308:	f7fc fb84 	bl	8001a14 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d902      	bls.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	74fb      	strb	r3, [r7, #19]
        break;
 800531a:	e005      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800531c:	4b31      	ldr	r3, [pc, #196]	@ (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ef      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d15c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800532e:	4b2c      	ldr	r3, [pc, #176]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005338:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01f      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	429a      	cmp	r2, r3
 800534a:	d019      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800534c:	4b24      	ldr	r3, [pc, #144]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005356:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005358:	4b21      	ldr	r3, [pc, #132]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535e:	4a20      	ldr	r2, [pc, #128]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005368:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536e:	4a1c      	ldr	r2, [pc, #112]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005378:	4a19      	ldr	r2, [pc, #100]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fc fb43 	bl	8001a14 <HAL_GetTick>
 800538e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005390:	e00b      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005392:	f7fc fb3f 	bl	8001a14 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d902      	bls.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	74fb      	strb	r3, [r7, #19]
            break;
 80053a8:	e006      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053aa:	4b0d      	ldr	r3, [pc, #52]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0ec      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10c      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053be:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ce:	4904      	ldr	r1, [pc, #16]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053d6:	e009      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
 80053dc:	e006      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ec:	7c7b      	ldrb	r3, [r7, #17]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d105      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f2:	4b9e      	ldr	r3, [pc, #632]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f6:	4a9d      	ldr	r2, [pc, #628]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800540a:	4b98      	ldr	r3, [pc, #608]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005410:	f023 0203 	bic.w	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	4994      	ldr	r1, [pc, #592]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800542c:	4b8f      	ldr	r3, [pc, #572]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005432:	f023 020c 	bic.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543a:	498c      	ldr	r1, [pc, #560]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800544e:	4b87      	ldr	r3, [pc, #540]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005454:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	4983      	ldr	r1, [pc, #524]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005470:	4b7e      	ldr	r3, [pc, #504]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	497b      	ldr	r1, [pc, #492]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005492:	4b76      	ldr	r3, [pc, #472]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a0:	4972      	ldr	r1, [pc, #456]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b4:	4b6d      	ldr	r3, [pc, #436]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c2:	496a      	ldr	r1, [pc, #424]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054d6:	4b65      	ldr	r3, [pc, #404]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e4:	4961      	ldr	r1, [pc, #388]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054f8:	4b5c      	ldr	r3, [pc, #368]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005506:	4959      	ldr	r1, [pc, #356]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800551a:	4b54      	ldr	r3, [pc, #336]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005528:	4950      	ldr	r1, [pc, #320]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800553c:	4b4b      	ldr	r3, [pc, #300]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005542:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554a:	4948      	ldr	r1, [pc, #288]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800555e:	4b43      	ldr	r3, [pc, #268]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005564:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	493f      	ldr	r1, [pc, #252]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d028      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005580:	4b3a      	ldr	r3, [pc, #232]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005586:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558e:	4937      	ldr	r1, [pc, #220]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800559e:	d106      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a0:	4b32      	ldr	r3, [pc, #200]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a31      	ldr	r2, [pc, #196]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055aa:	60d3      	str	r3, [r2, #12]
 80055ac:	e011      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055b6:	d10c      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f8c8 	bl	8005754 <RCCEx_PLLSAI1_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055c8:	7cfb      	ldrb	r3, [r7, #19]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d028      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ec:	491f      	ldr	r1, [pc, #124]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055fc:	d106      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055fe:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005608:	60d3      	str	r3, [r2, #12]
 800560a:	e011      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005614:	d10c      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3304      	adds	r3, #4
 800561a:	2101      	movs	r1, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f000 f899 	bl	8005754 <RCCEx_PLLSAI1_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02b      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800563c:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005642:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564a:	4908      	ldr	r1, [pc, #32]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800565a:	d109      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800565c:	4b03      	ldr	r3, [pc, #12]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a02      	ldr	r2, [pc, #8]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005666:	60d3      	str	r3, [r2, #12]
 8005668:	e014      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005674:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005678:	d10c      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3304      	adds	r3, #4
 800567e:	2101      	movs	r1, #1
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f867 	bl	8005754 <RCCEx_PLLSAI1_Config>
 8005686:	4603      	mov	r3, r0
 8005688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02f      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ae:	4928      	ldr	r1, [pc, #160]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056be:	d10d      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	2102      	movs	r1, #2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 f844 	bl	8005754 <RCCEx_PLLSAI1_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d014      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056d6:	7cfb      	ldrb	r3, [r7, #19]
 80056d8:	74bb      	strb	r3, [r7, #18]
 80056da:	e011      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056e4:	d10c      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3320      	adds	r3, #32
 80056ea:	2102      	movs	r1, #2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f925 	bl	800593c <RCCEx_PLLSAI2_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056f6:	7cfb      	ldrb	r3, [r7, #19]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800570c:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005712:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800571a:	490d      	ldr	r1, [pc, #52]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00b      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800572e:	4b08      	ldr	r3, [pc, #32]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005734:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800573e:	4904      	ldr	r1, [pc, #16]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005746:	7cbb      	ldrb	r3, [r7, #18]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40021000 	.word	0x40021000

08005754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005762:	4b75      	ldr	r3, [pc, #468]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d018      	beq.n	80057a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800576e:	4b72      	ldr	r3, [pc, #456]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0203 	and.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d10d      	bne.n	800579a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
       ||
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005786:	4b6c      	ldr	r3, [pc, #432]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
       ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d047      	beq.n	800582a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
 800579e:	e044      	b.n	800582a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d018      	beq.n	80057da <RCCEx_PLLSAI1_Config+0x86>
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d825      	bhi.n	80057f8 <RCCEx_PLLSAI1_Config+0xa4>
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d002      	beq.n	80057b6 <RCCEx_PLLSAI1_Config+0x62>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d009      	beq.n	80057c8 <RCCEx_PLLSAI1_Config+0x74>
 80057b4:	e020      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057b6:	4b60      	ldr	r3, [pc, #384]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11d      	bne.n	80057fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c6:	e01a      	b.n	80057fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d116      	bne.n	8005802 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d8:	e013      	b.n	8005802 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057da:	4b57      	ldr	r3, [pc, #348]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10f      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057e6:	4b54      	ldr	r3, [pc, #336]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057f6:	e006      	b.n	8005806 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
      break;
 80057fc:	e004      	b.n	8005808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005806:	bf00      	nop
    }

    if(status == HAL_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10d      	bne.n	800582a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800580e:	4b4a      	ldr	r3, [pc, #296]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	430b      	orrs	r3, r1
 8005824:	4944      	ldr	r1, [pc, #272]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d17d      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005830:	4b41      	ldr	r3, [pc, #260]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a40      	ldr	r2, [pc, #256]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800583a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583c:	f7fc f8ea 	bl	8001a14 <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005842:	e009      	b.n	8005858 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005844:	f7fc f8e6 	bl	8001a14 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
        break;
 8005856:	e005      	b.n	8005864 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005858:	4b37      	ldr	r3, [pc, #220]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1ef      	bne.n	8005844 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d160      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d111      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005870:	4b31      	ldr	r3, [pc, #196]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6892      	ldr	r2, [r2, #8]
 8005880:	0211      	lsls	r1, r2, #8
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68d2      	ldr	r2, [r2, #12]
 8005886:	0912      	lsrs	r2, r2, #4
 8005888:	0452      	lsls	r2, r2, #17
 800588a:	430a      	orrs	r2, r1
 800588c:	492a      	ldr	r1, [pc, #168]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	610b      	str	r3, [r1, #16]
 8005892:	e027      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d112      	bne.n	80058c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800589a:	4b27      	ldr	r3, [pc, #156]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80058a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6892      	ldr	r2, [r2, #8]
 80058aa:	0211      	lsls	r1, r2, #8
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6912      	ldr	r2, [r2, #16]
 80058b0:	0852      	lsrs	r2, r2, #1
 80058b2:	3a01      	subs	r2, #1
 80058b4:	0552      	lsls	r2, r2, #21
 80058b6:	430a      	orrs	r2, r1
 80058b8:	491f      	ldr	r1, [pc, #124]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	610b      	str	r3, [r1, #16]
 80058be:	e011      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80058c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6892      	ldr	r2, [r2, #8]
 80058d0:	0211      	lsls	r1, r2, #8
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6952      	ldr	r2, [r2, #20]
 80058d6:	0852      	lsrs	r2, r2, #1
 80058d8:	3a01      	subs	r2, #1
 80058da:	0652      	lsls	r2, r2, #25
 80058dc:	430a      	orrs	r2, r1
 80058de:	4916      	ldr	r1, [pc, #88]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058e4:	4b14      	ldr	r3, [pc, #80]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fc f890 	bl	8001a14 <HAL_GetTick>
 80058f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058f6:	e009      	b.n	800590c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058f8:	f7fc f88c 	bl	8001a14 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d902      	bls.n	800590c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	73fb      	strb	r3, [r7, #15]
          break;
 800590a:	e005      	b.n	8005918 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800590c:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ef      	beq.n	80058f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800591e:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	4904      	ldr	r1, [pc, #16]	@ (8005938 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005928:	4313      	orrs	r3, r2
 800592a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000

0800593c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800594a:	4b6a      	ldr	r3, [pc, #424]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d018      	beq.n	8005988 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005956:	4b67      	ldr	r3, [pc, #412]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0203 	and.w	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d10d      	bne.n	8005982 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
       ||
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800596e:	4b61      	ldr	r3, [pc, #388]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	091b      	lsrs	r3, r3, #4
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
       ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d047      	beq.n	8005a12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
 8005986:	e044      	b.n	8005a12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d018      	beq.n	80059c2 <RCCEx_PLLSAI2_Config+0x86>
 8005990:	2b03      	cmp	r3, #3
 8005992:	d825      	bhi.n	80059e0 <RCCEx_PLLSAI2_Config+0xa4>
 8005994:	2b01      	cmp	r3, #1
 8005996:	d002      	beq.n	800599e <RCCEx_PLLSAI2_Config+0x62>
 8005998:	2b02      	cmp	r3, #2
 800599a:	d009      	beq.n	80059b0 <RCCEx_PLLSAI2_Config+0x74>
 800599c:	e020      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800599e:	4b55      	ldr	r3, [pc, #340]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d11d      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ae:	e01a      	b.n	80059e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059b0:	4b50      	ldr	r3, [pc, #320]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d116      	bne.n	80059ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c0:	e013      	b.n	80059ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059c2:	4b4c      	ldr	r3, [pc, #304]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059ce:	4b49      	ldr	r3, [pc, #292]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d109      	bne.n	80059ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059de:	e006      	b.n	80059ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      break;
 80059e4:	e004      	b.n	80059f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059e6:	bf00      	nop
 80059e8:	e002      	b.n	80059f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ea:	bf00      	nop
 80059ec:	e000      	b.n	80059f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059f6:	4b3f      	ldr	r3, [pc, #252]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6819      	ldr	r1, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	4939      	ldr	r1, [pc, #228]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d167      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a18:	4b36      	ldr	r3, [pc, #216]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a35      	ldr	r2, [pc, #212]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a24:	f7fb fff6 	bl	8001a14 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a2a:	e009      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a2c:	f7fb fff2 	bl	8001a14 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d902      	bls.n	8005a40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a3e:	e005      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a40:	4b2c      	ldr	r3, [pc, #176]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ef      	bne.n	8005a2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d14a      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d111      	bne.n	8005a7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a58:	4b26      	ldr	r3, [pc, #152]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6892      	ldr	r2, [r2, #8]
 8005a68:	0211      	lsls	r1, r2, #8
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68d2      	ldr	r2, [r2, #12]
 8005a6e:	0912      	lsrs	r2, r2, #4
 8005a70:	0452      	lsls	r2, r2, #17
 8005a72:	430a      	orrs	r2, r1
 8005a74:	491f      	ldr	r1, [pc, #124]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	614b      	str	r3, [r1, #20]
 8005a7a:	e011      	b.n	8005aa0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6892      	ldr	r2, [r2, #8]
 8005a8c:	0211      	lsls	r1, r2, #8
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6912      	ldr	r2, [r2, #16]
 8005a92:	0852      	lsrs	r2, r2, #1
 8005a94:	3a01      	subs	r2, #1
 8005a96:	0652      	lsls	r2, r2, #25
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	4916      	ldr	r1, [pc, #88]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005aa0:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a13      	ldr	r2, [pc, #76]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fb ffb2 	bl	8001a14 <HAL_GetTick>
 8005ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ab2:	e009      	b.n	8005ac8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ab4:	f7fb ffae 	bl	8001a14 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d902      	bls.n	8005ac8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ac6:	e005      	b.n	8005ad4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0ef      	beq.n	8005ab4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ada:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	4904      	ldr	r1, [pc, #16]	@ (8005af4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40021000 	.word	0x40021000

08005af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e049      	b.n	8005b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb fd8c 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f000 fb06 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d001      	beq.n	8005bc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e047      	b.n	8005c50 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a23      	ldr	r2, [pc, #140]	@ (8005c5c <HAL_TIM_Base_Start+0xb4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01d      	beq.n	8005c0e <HAL_TIM_Base_Start+0x66>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bda:	d018      	beq.n	8005c0e <HAL_TIM_Base_Start+0x66>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c60 <HAL_TIM_Base_Start+0xb8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <HAL_TIM_Base_Start+0x66>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1e      	ldr	r2, [pc, #120]	@ (8005c64 <HAL_TIM_Base_Start+0xbc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00e      	beq.n	8005c0e <HAL_TIM_Base_Start+0x66>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c68 <HAL_TIM_Base_Start+0xc0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d009      	beq.n	8005c0e <HAL_TIM_Base_Start+0x66>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <HAL_TIM_Base_Start+0xc4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_TIM_Base_Start+0x66>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a19      	ldr	r2, [pc, #100]	@ (8005c70 <HAL_TIM_Base_Start+0xc8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d115      	bne.n	8005c3a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	4b17      	ldr	r3, [pc, #92]	@ (8005c74 <HAL_TIM_Base_Start+0xcc>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	d015      	beq.n	8005c4c <HAL_TIM_Base_Start+0xa4>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c26:	d011      	beq.n	8005c4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	e008      	b.n	8005c4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	e000      	b.n	8005c4e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40013400 	.word	0x40013400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	00010007 	.word	0x00010007

08005c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e04f      	b.n	8005d30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a23      	ldr	r2, [pc, #140]	@ (8005d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01d      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x76>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cba:	d018      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x76>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x76>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1e      	ldr	r2, [pc, #120]	@ (8005d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x76>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x76>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1b      	ldr	r2, [pc, #108]	@ (8005d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x76>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	@ (8005d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d115      	bne.n	8005d1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	4b17      	ldr	r3, [pc, #92]	@ (8005d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d015      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0xb4>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d06:	d011      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d18:	e008      	b.n	8005d2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e000      	b.n	8005d2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40013400 	.word	0x40013400
 8005d50:	40014000 	.word	0x40014000
 8005d54:	00010007 	.word	0x00010007

08005d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d020      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01b      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0202 	mvn.w	r2, #2
 8005d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9b2 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005da8:	e005      	b.n	8005db6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9a4 	bl	80060f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f9b5 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d020      	beq.n	8005e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01b      	beq.n	8005e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0204 	mvn.w	r2, #4
 8005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f98c 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f97e 	bl	80060f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f98f 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d020      	beq.n	8005e54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0208 	mvn.w	r2, #8
 8005e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f966 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005e40:	e005      	b.n	8005e4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f958 	bl	80060f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f969 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d020      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0210 	mvn.w	r2, #16
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2208      	movs	r2, #8
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f940 	bl	800610c <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f932 	bl	80060f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f943 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00c      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d007      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0201 	mvn.w	r2, #1
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fb f9cc 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00c      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fafd 	bl	80064ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00c      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 faf5 	bl	8006500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8fd 	bl	8006134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0220 	mvn.w	r2, #32
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fabd 	bl	80064d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_TIM_ConfigClockSource+0x1c>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e0b6      	b.n	80060f0 <HAL_TIM_ConfigClockSource+0x18a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fa4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fbe:	d03e      	beq.n	800603e <HAL_TIM_ConfigClockSource+0xd8>
 8005fc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc4:	f200 8087 	bhi.w	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fcc:	f000 8086 	beq.w	80060dc <HAL_TIM_ConfigClockSource+0x176>
 8005fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd4:	d87f      	bhi.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8005fd6:	2b70      	cmp	r3, #112	@ 0x70
 8005fd8:	d01a      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0xaa>
 8005fda:	2b70      	cmp	r3, #112	@ 0x70
 8005fdc:	d87b      	bhi.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8005fde:	2b60      	cmp	r3, #96	@ 0x60
 8005fe0:	d050      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x11e>
 8005fe2:	2b60      	cmp	r3, #96	@ 0x60
 8005fe4:	d877      	bhi.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8005fe6:	2b50      	cmp	r3, #80	@ 0x50
 8005fe8:	d03c      	beq.n	8006064 <HAL_TIM_ConfigClockSource+0xfe>
 8005fea:	2b50      	cmp	r3, #80	@ 0x50
 8005fec:	d873      	bhi.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8005fee:	2b40      	cmp	r3, #64	@ 0x40
 8005ff0:	d058      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x13e>
 8005ff2:	2b40      	cmp	r3, #64	@ 0x40
 8005ff4:	d86f      	bhi.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8005ff6:	2b30      	cmp	r3, #48	@ 0x30
 8005ff8:	d064      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0x15e>
 8005ffa:	2b30      	cmp	r3, #48	@ 0x30
 8005ffc:	d86b      	bhi.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d060      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0x15e>
 8006002:	2b20      	cmp	r3, #32
 8006004:	d867      	bhi.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d05c      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0x15e>
 800600a:	2b10      	cmp	r3, #16
 800600c:	d05a      	beq.n	80060c4 <HAL_TIM_ConfigClockSource+0x15e>
 800600e:	e062      	b.n	80060d6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	f000 f9b2 	bl	8006388 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006032:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	609a      	str	r2, [r3, #8]
      break;
 800603c:	e04f      	b.n	80060de <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800604e:	f000 f99b 	bl	8006388 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006060:	609a      	str	r2, [r3, #8]
      break;
 8006062:	e03c      	b.n	80060de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006070:	461a      	mov	r2, r3
 8006072:	f000 f90f 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2150      	movs	r1, #80	@ 0x50
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f968 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8006082:	e02c      	b.n	80060de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006090:	461a      	mov	r2, r3
 8006092:	f000 f92e 	bl	80062f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2160      	movs	r1, #96	@ 0x60
 800609c:	4618      	mov	r0, r3
 800609e:	f000 f958 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060a2:	e01c      	b.n	80060de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b0:	461a      	mov	r2, r3
 80060b2:	f000 f8ef 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2140      	movs	r1, #64	@ 0x40
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 f948 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060c2:	e00c      	b.n	80060de <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f000 f93f 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060d4:	e003      	b.n	80060de <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	73fb      	strb	r3, [r7, #15]
      break;
 80060da:	e000      	b.n	80060de <HAL_TIM_ConfigClockSource+0x178>
      break;
 80060dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a46      	ldr	r2, [pc, #280]	@ (8006274 <TIM_Base_SetConfig+0x12c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006166:	d00f      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a43      	ldr	r2, [pc, #268]	@ (8006278 <TIM_Base_SetConfig+0x130>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00b      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a42      	ldr	r2, [pc, #264]	@ (800627c <TIM_Base_SetConfig+0x134>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a41      	ldr	r2, [pc, #260]	@ (8006280 <TIM_Base_SetConfig+0x138>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a40      	ldr	r2, [pc, #256]	@ (8006284 <TIM_Base_SetConfig+0x13c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d108      	bne.n	800619a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a35      	ldr	r2, [pc, #212]	@ (8006274 <TIM_Base_SetConfig+0x12c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01f      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a8:	d01b      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a32      	ldr	r2, [pc, #200]	@ (8006278 <TIM_Base_SetConfig+0x130>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d017      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a31      	ldr	r2, [pc, #196]	@ (800627c <TIM_Base_SetConfig+0x134>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a30      	ldr	r2, [pc, #192]	@ (8006280 <TIM_Base_SetConfig+0x138>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00f      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006284 <TIM_Base_SetConfig+0x13c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00b      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006288 <TIM_Base_SetConfig+0x140>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d007      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a2d      	ldr	r2, [pc, #180]	@ (800628c <TIM_Base_SetConfig+0x144>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d003      	beq.n	80061e2 <TIM_Base_SetConfig+0x9a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006290 <TIM_Base_SetConfig+0x148>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d108      	bne.n	80061f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a16      	ldr	r2, [pc, #88]	@ (8006274 <TIM_Base_SetConfig+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_Base_SetConfig+0xf8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <TIM_Base_SetConfig+0x13c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_Base_SetConfig+0xf8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a17      	ldr	r2, [pc, #92]	@ (8006288 <TIM_Base_SetConfig+0x140>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_Base_SetConfig+0xf8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a16      	ldr	r2, [pc, #88]	@ (800628c <TIM_Base_SetConfig+0x144>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0xf8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a15      	ldr	r2, [pc, #84]	@ (8006290 <TIM_Base_SetConfig+0x148>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d103      	bne.n	8006248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b01      	cmp	r3, #1
 8006258:	d105      	bne.n	8006266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	611a      	str	r2, [r3, #16]
  }
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 030a 	bic.w	r3, r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f023 0210 	bic.w	r2, r3, #16
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800631c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800632e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	f043 0307 	orr.w	r3, r3, #7
 8006374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	021a      	lsls	r2, r3, #8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e068      	b.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2e      	ldr	r2, [pc, #184]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2d      	ldr	r2, [pc, #180]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800641a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1e      	ldr	r2, [pc, #120]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006452:	d018      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1b      	ldr	r2, [pc, #108]	@ (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1a      	ldr	r2, [pc, #104]	@ (80064cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a18      	ldr	r2, [pc, #96]	@ (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a13      	ldr	r2, [pc, #76]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a14      	ldr	r2, [pc, #80]	@ (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10c      	bne.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800648c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	4313      	orrs	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40000c00 	.word	0x40000c00
 80064d4:	40014000 	.word	0x40014000

080064d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e040      	b.n	80065a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fb f89e 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	@ 0x24
 8006540:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fb6a 	bl	8006c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8af 	bl	80066c4 <UART_SetConfig>
 8006566:	4603      	mov	r3, r0
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e01b      	b.n	80065a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800657e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800658e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fbe9 	bl	8006d78 <UART_CheckIdleState>
 80065a6:	4603      	mov	r3, r0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	@ 0x28
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d177      	bne.n	80066b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_UART_Transmit+0x24>
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e070      	b.n	80066ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2221      	movs	r2, #33	@ 0x21
 80065e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e6:	f7fb fa15 	bl	8001a14 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006604:	d108      	bne.n	8006618 <HAL_UART_Transmit+0x68>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	e003      	b.n	8006620 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006620:	e02f      	b.n	8006682 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	@ 0x80
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fc4b 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e03b      	b.n	80066ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	881a      	ldrh	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006654:	b292      	uxth	r2, r2
 8006656:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	3302      	adds	r3, #2
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e007      	b.n	8006670 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	781a      	ldrb	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	3301      	adds	r3, #1
 800666e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1c9      	bne.n	8006622 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2200      	movs	r2, #0
 8006696:	2140      	movs	r1, #64	@ 0x40
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fc15 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e005      	b.n	80066ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066c8:	b08a      	sub	sp, #40	@ 0x28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4ba4      	ldr	r3, [pc, #656]	@ (8006984 <UART_SetConfig+0x2c0>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a99      	ldr	r2, [pc, #612]	@ (8006988 <UART_SetConfig+0x2c4>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800672c:	4313      	orrs	r3, r2
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	430a      	orrs	r2, r1
 8006742:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a90      	ldr	r2, [pc, #576]	@ (800698c <UART_SetConfig+0x2c8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d126      	bne.n	800679c <UART_SetConfig+0xd8>
 800674e:	4b90      	ldr	r3, [pc, #576]	@ (8006990 <UART_SetConfig+0x2cc>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	2b03      	cmp	r3, #3
 800675a:	d81b      	bhi.n	8006794 <UART_SetConfig+0xd0>
 800675c:	a201      	add	r2, pc, #4	@ (adr r2, 8006764 <UART_SetConfig+0xa0>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006775 	.word	0x08006775
 8006768:	08006785 	.word	0x08006785
 800676c:	0800677d 	.word	0x0800677d
 8006770:	0800678d 	.word	0x0800678d
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677a:	e116      	b.n	80069aa <UART_SetConfig+0x2e6>
 800677c:	2302      	movs	r3, #2
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006782:	e112      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006784:	2304      	movs	r3, #4
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678a:	e10e      	b.n	80069aa <UART_SetConfig+0x2e6>
 800678c:	2308      	movs	r3, #8
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006792:	e10a      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006794:	2310      	movs	r3, #16
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800679a:	e106      	b.n	80069aa <UART_SetConfig+0x2e6>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a7c      	ldr	r2, [pc, #496]	@ (8006994 <UART_SetConfig+0x2d0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d138      	bne.n	8006818 <UART_SetConfig+0x154>
 80067a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006990 <UART_SetConfig+0x2cc>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ac:	f003 030c 	and.w	r3, r3, #12
 80067b0:	2b0c      	cmp	r3, #12
 80067b2:	d82d      	bhi.n	8006810 <UART_SetConfig+0x14c>
 80067b4:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <UART_SetConfig+0xf8>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067f1 	.word	0x080067f1
 80067c0:	08006811 	.word	0x08006811
 80067c4:	08006811 	.word	0x08006811
 80067c8:	08006811 	.word	0x08006811
 80067cc:	08006801 	.word	0x08006801
 80067d0:	08006811 	.word	0x08006811
 80067d4:	08006811 	.word	0x08006811
 80067d8:	08006811 	.word	0x08006811
 80067dc:	080067f9 	.word	0x080067f9
 80067e0:	08006811 	.word	0x08006811
 80067e4:	08006811 	.word	0x08006811
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006809 	.word	0x08006809
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f6:	e0d8      	b.n	80069aa <UART_SetConfig+0x2e6>
 80067f8:	2302      	movs	r3, #2
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067fe:	e0d4      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006800:	2304      	movs	r3, #4
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006806:	e0d0      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006808:	2308      	movs	r3, #8
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800680e:	e0cc      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006810:	2310      	movs	r3, #16
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006816:	e0c8      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5e      	ldr	r2, [pc, #376]	@ (8006998 <UART_SetConfig+0x2d4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d125      	bne.n	800686e <UART_SetConfig+0x1aa>
 8006822:	4b5b      	ldr	r3, [pc, #364]	@ (8006990 <UART_SetConfig+0x2cc>)
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006828:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800682c:	2b30      	cmp	r3, #48	@ 0x30
 800682e:	d016      	beq.n	800685e <UART_SetConfig+0x19a>
 8006830:	2b30      	cmp	r3, #48	@ 0x30
 8006832:	d818      	bhi.n	8006866 <UART_SetConfig+0x1a2>
 8006834:	2b20      	cmp	r3, #32
 8006836:	d00a      	beq.n	800684e <UART_SetConfig+0x18a>
 8006838:	2b20      	cmp	r3, #32
 800683a:	d814      	bhi.n	8006866 <UART_SetConfig+0x1a2>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <UART_SetConfig+0x182>
 8006840:	2b10      	cmp	r3, #16
 8006842:	d008      	beq.n	8006856 <UART_SetConfig+0x192>
 8006844:	e00f      	b.n	8006866 <UART_SetConfig+0x1a2>
 8006846:	2300      	movs	r3, #0
 8006848:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684c:	e0ad      	b.n	80069aa <UART_SetConfig+0x2e6>
 800684e:	2302      	movs	r3, #2
 8006850:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006854:	e0a9      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006856:	2304      	movs	r3, #4
 8006858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685c:	e0a5      	b.n	80069aa <UART_SetConfig+0x2e6>
 800685e:	2308      	movs	r3, #8
 8006860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006864:	e0a1      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006866:	2310      	movs	r3, #16
 8006868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686c:	e09d      	b.n	80069aa <UART_SetConfig+0x2e6>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a4a      	ldr	r2, [pc, #296]	@ (800699c <UART_SetConfig+0x2d8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d125      	bne.n	80068c4 <UART_SetConfig+0x200>
 8006878:	4b45      	ldr	r3, [pc, #276]	@ (8006990 <UART_SetConfig+0x2cc>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006882:	2bc0      	cmp	r3, #192	@ 0xc0
 8006884:	d016      	beq.n	80068b4 <UART_SetConfig+0x1f0>
 8006886:	2bc0      	cmp	r3, #192	@ 0xc0
 8006888:	d818      	bhi.n	80068bc <UART_SetConfig+0x1f8>
 800688a:	2b80      	cmp	r3, #128	@ 0x80
 800688c:	d00a      	beq.n	80068a4 <UART_SetConfig+0x1e0>
 800688e:	2b80      	cmp	r3, #128	@ 0x80
 8006890:	d814      	bhi.n	80068bc <UART_SetConfig+0x1f8>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <UART_SetConfig+0x1d8>
 8006896:	2b40      	cmp	r3, #64	@ 0x40
 8006898:	d008      	beq.n	80068ac <UART_SetConfig+0x1e8>
 800689a:	e00f      	b.n	80068bc <UART_SetConfig+0x1f8>
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a2:	e082      	b.n	80069aa <UART_SetConfig+0x2e6>
 80068a4:	2302      	movs	r3, #2
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068aa:	e07e      	b.n	80069aa <UART_SetConfig+0x2e6>
 80068ac:	2304      	movs	r3, #4
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b2:	e07a      	b.n	80069aa <UART_SetConfig+0x2e6>
 80068b4:	2308      	movs	r3, #8
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ba:	e076      	b.n	80069aa <UART_SetConfig+0x2e6>
 80068bc:	2310      	movs	r3, #16
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c2:	e072      	b.n	80069aa <UART_SetConfig+0x2e6>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a35      	ldr	r2, [pc, #212]	@ (80069a0 <UART_SetConfig+0x2dc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d12a      	bne.n	8006924 <UART_SetConfig+0x260>
 80068ce:	4b30      	ldr	r3, [pc, #192]	@ (8006990 <UART_SetConfig+0x2cc>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068dc:	d01a      	beq.n	8006914 <UART_SetConfig+0x250>
 80068de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068e2:	d81b      	bhi.n	800691c <UART_SetConfig+0x258>
 80068e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068e8:	d00c      	beq.n	8006904 <UART_SetConfig+0x240>
 80068ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ee:	d815      	bhi.n	800691c <UART_SetConfig+0x258>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <UART_SetConfig+0x238>
 80068f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f8:	d008      	beq.n	800690c <UART_SetConfig+0x248>
 80068fa:	e00f      	b.n	800691c <UART_SetConfig+0x258>
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006902:	e052      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006904:	2302      	movs	r3, #2
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800690a:	e04e      	b.n	80069aa <UART_SetConfig+0x2e6>
 800690c:	2304      	movs	r3, #4
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006912:	e04a      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006914:	2308      	movs	r3, #8
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691a:	e046      	b.n	80069aa <UART_SetConfig+0x2e6>
 800691c:	2310      	movs	r3, #16
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006922:	e042      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a17      	ldr	r2, [pc, #92]	@ (8006988 <UART_SetConfig+0x2c4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d13a      	bne.n	80069a4 <UART_SetConfig+0x2e0>
 800692e:	4b18      	ldr	r3, [pc, #96]	@ (8006990 <UART_SetConfig+0x2cc>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006934:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006938:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800693c:	d01a      	beq.n	8006974 <UART_SetConfig+0x2b0>
 800693e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006942:	d81b      	bhi.n	800697c <UART_SetConfig+0x2b8>
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006948:	d00c      	beq.n	8006964 <UART_SetConfig+0x2a0>
 800694a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800694e:	d815      	bhi.n	800697c <UART_SetConfig+0x2b8>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <UART_SetConfig+0x298>
 8006954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006958:	d008      	beq.n	800696c <UART_SetConfig+0x2a8>
 800695a:	e00f      	b.n	800697c <UART_SetConfig+0x2b8>
 800695c:	2300      	movs	r3, #0
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006962:	e022      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006964:	2302      	movs	r3, #2
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800696a:	e01e      	b.n	80069aa <UART_SetConfig+0x2e6>
 800696c:	2304      	movs	r3, #4
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006972:	e01a      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006974:	2308      	movs	r3, #8
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800697a:	e016      	b.n	80069aa <UART_SetConfig+0x2e6>
 800697c:	2310      	movs	r3, #16
 800697e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006982:	e012      	b.n	80069aa <UART_SetConfig+0x2e6>
 8006984:	efff69f3 	.word	0xefff69f3
 8006988:	40008000 	.word	0x40008000
 800698c:	40013800 	.word	0x40013800
 8006990:	40021000 	.word	0x40021000
 8006994:	40004400 	.word	0x40004400
 8006998:	40004800 	.word	0x40004800
 800699c:	40004c00 	.word	0x40004c00
 80069a0:	40005000 	.word	0x40005000
 80069a4:	2310      	movs	r3, #16
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a9f      	ldr	r2, [pc, #636]	@ (8006c2c <UART_SetConfig+0x568>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d17a      	bne.n	8006aaa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d824      	bhi.n	8006a06 <UART_SetConfig+0x342>
 80069bc:	a201      	add	r2, pc, #4	@ (adr r2, 80069c4 <UART_SetConfig+0x300>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069e9 	.word	0x080069e9
 80069c8:	08006a07 	.word	0x08006a07
 80069cc:	080069f1 	.word	0x080069f1
 80069d0:	08006a07 	.word	0x08006a07
 80069d4:	080069f7 	.word	0x080069f7
 80069d8:	08006a07 	.word	0x08006a07
 80069dc:	08006a07 	.word	0x08006a07
 80069e0:	08006a07 	.word	0x08006a07
 80069e4:	080069ff 	.word	0x080069ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e8:	f7fe fb0c 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 80069ec:	61f8      	str	r0, [r7, #28]
        break;
 80069ee:	e010      	b.n	8006a12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006c30 <UART_SetConfig+0x56c>)
 80069f2:	61fb      	str	r3, [r7, #28]
        break;
 80069f4:	e00d      	b.n	8006a12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f6:	f7fe fa6d 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 80069fa:	61f8      	str	r0, [r7, #28]
        break;
 80069fc:	e009      	b.n	8006a12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a02:	61fb      	str	r3, [r7, #28]
        break;
 8006a04:	e005      	b.n	8006a12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 80fb 	beq.w	8006c10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	4413      	add	r3, r2
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d305      	bcc.n	8006a36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d903      	bls.n	8006a3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a3c:	e0e8      	b.n	8006c10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2200      	movs	r2, #0
 8006a42:	461c      	mov	r4, r3
 8006a44:	4615      	mov	r5, r2
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	f04f 0300 	mov.w	r3, #0
 8006a4e:	022b      	lsls	r3, r5, #8
 8006a50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a54:	0222      	lsls	r2, r4, #8
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	6849      	ldr	r1, [r1, #4]
 8006a5a:	0849      	lsrs	r1, r1, #1
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	4688      	mov	r8, r1
 8006a60:	4681      	mov	r9, r0
 8006a62:	eb12 0a08 	adds.w	sl, r2, r8
 8006a66:	eb43 0b09 	adc.w	fp, r3, r9
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a78:	4650      	mov	r0, sl
 8006a7a:	4659      	mov	r1, fp
 8006a7c:	f7f9 fc00 	bl	8000280 <__aeabi_uldivmod>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4613      	mov	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a8e:	d308      	bcc.n	8006aa2 <UART_SetConfig+0x3de>
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a96:	d204      	bcs.n	8006aa2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	60da      	str	r2, [r3, #12]
 8006aa0:	e0b6      	b.n	8006c10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006aa8:	e0b2      	b.n	8006c10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ab2:	d15e      	bne.n	8006b72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d828      	bhi.n	8006b0e <UART_SetConfig+0x44a>
 8006abc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac4 <UART_SetConfig+0x400>)
 8006abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac2:	bf00      	nop
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	08006b0f 	.word	0x08006b0f
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006b0f 	.word	0x08006b0f
 8006adc:	08006b0f 	.word	0x08006b0f
 8006ae0:	08006b0f 	.word	0x08006b0f
 8006ae4:	08006b07 	.word	0x08006b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fe fa8c 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 8006aec:	61f8      	str	r0, [r7, #28]
        break;
 8006aee:	e014      	b.n	8006b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7fe fa9e 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 8006af4:	61f8      	str	r0, [r7, #28]
        break;
 8006af6:	e010      	b.n	8006b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af8:	4b4d      	ldr	r3, [pc, #308]	@ (8006c30 <UART_SetConfig+0x56c>)
 8006afa:	61fb      	str	r3, [r7, #28]
        break;
 8006afc:	e00d      	b.n	8006b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006afe:	f7fe f9e9 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8006b02:	61f8      	str	r0, [r7, #28]
        break;
 8006b04:	e009      	b.n	8006b1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0a:	61fb      	str	r3, [r7, #28]
        break;
 8006b0c:	e005      	b.n	8006b1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d077      	beq.n	8006c10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	005a      	lsls	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	441a      	add	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b0f      	cmp	r3, #15
 8006b3a:	d916      	bls.n	8006b6a <UART_SetConfig+0x4a6>
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b42:	d212      	bcs.n	8006b6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f023 030f 	bic.w	r3, r3, #15
 8006b4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	8afb      	ldrh	r3, [r7, #22]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	8afa      	ldrh	r2, [r7, #22]
 8006b66:	60da      	str	r2, [r3, #12]
 8006b68:	e052      	b.n	8006c10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b70:	e04e      	b.n	8006c10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d827      	bhi.n	8006bca <UART_SetConfig+0x506>
 8006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b80 <UART_SetConfig+0x4bc>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006ba5 	.word	0x08006ba5
 8006b84:	08006bad 	.word	0x08006bad
 8006b88:	08006bb5 	.word	0x08006bb5
 8006b8c:	08006bcb 	.word	0x08006bcb
 8006b90:	08006bbb 	.word	0x08006bbb
 8006b94:	08006bcb 	.word	0x08006bcb
 8006b98:	08006bcb 	.word	0x08006bcb
 8006b9c:	08006bcb 	.word	0x08006bcb
 8006ba0:	08006bc3 	.word	0x08006bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba4:	f7fe fa2e 	bl	8005004 <HAL_RCC_GetPCLK1Freq>
 8006ba8:	61f8      	str	r0, [r7, #28]
        break;
 8006baa:	e014      	b.n	8006bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bac:	f7fe fa40 	bl	8005030 <HAL_RCC_GetPCLK2Freq>
 8006bb0:	61f8      	str	r0, [r7, #28]
        break;
 8006bb2:	e010      	b.n	8006bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8006c30 <UART_SetConfig+0x56c>)
 8006bb6:	61fb      	str	r3, [r7, #28]
        break;
 8006bb8:	e00d      	b.n	8006bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bba:	f7fe f98b 	bl	8004ed4 <HAL_RCC_GetSysClockFreq>
 8006bbe:	61f8      	str	r0, [r7, #28]
        break;
 8006bc0:	e009      	b.n	8006bd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc6:	61fb      	str	r3, [r7, #28]
        break;
 8006bc8:	e005      	b.n	8006bd6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006bd4:	bf00      	nop
    }

    if (pclk != 0U)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d019      	beq.n	8006c10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	085a      	lsrs	r2, r3, #1
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	441a      	add	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b0f      	cmp	r3, #15
 8006bf4:	d909      	bls.n	8006c0a <UART_SetConfig+0x546>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfc:	d205      	bcs.n	8006c0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e002      	b.n	8006c10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3728      	adds	r7, #40	@ 0x28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40008000 	.word	0x40008000
 8006c30:	00f42400 	.word	0x00f42400

08006c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d32:	d10a      	bne.n	8006d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b098      	sub	sp, #96	@ 0x60
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d88:	f7fa fe44 	bl	8001a14 <HAL_GetTick>
 8006d8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d12e      	bne.n	8006dfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f88c 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d021      	beq.n	8006dfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e6      	bne.n	8006db6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e062      	b.n	8006ec0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d149      	bne.n	8006e9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e10:	2200      	movs	r2, #0
 8006e12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f856 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d03c      	beq.n	8006e9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e6      	bne.n	8006e22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3308      	adds	r3, #8
 8006e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3308      	adds	r3, #8
 8006e72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e74:	61fa      	str	r2, [r7, #28]
 8006e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	69b9      	ldr	r1, [r7, #24]
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	617b      	str	r3, [r7, #20]
   return(result);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e5      	bne.n	8006e54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e011      	b.n	8006ec0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3758      	adds	r7, #88	@ 0x58
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed8:	e04f      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d04b      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee2:	f7fa fd97 	bl	8001a14 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d302      	bcc.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e04e      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d037      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b80      	cmp	r3, #128	@ 0x80
 8006f0e:	d034      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b40      	cmp	r3, #64	@ 0x40
 8006f14:	d031      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d110      	bne.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f838 	bl	8006fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2208      	movs	r2, #8
 8006f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e029      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f54:	d111      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f81e 	bl	8006fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e00f      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4013      	ands	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d0a0      	beq.n	8006eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b095      	sub	sp, #84	@ 0x54
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f023 0301 	bic.w	r3, r3, #1
 8006ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e5      	bne.n	8006fdc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007014:	2b01      	cmp	r3, #1
 8007016:	d118      	bne.n	800704a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	60bb      	str	r3, [r7, #8]
   return(result);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f023 0310 	bic.w	r3, r3, #16
 800702c:	647b      	str	r3, [r7, #68]	@ 0x44
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6979      	ldr	r1, [r7, #20]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	613b      	str	r3, [r7, #16]
   return(result);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800705e:	bf00      	nop
 8007060:	3754      	adds	r7, #84	@ 0x54
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <siprintf>:
 800706c:	b40e      	push	{r1, r2, r3}
 800706e:	b500      	push	{lr}
 8007070:	b09c      	sub	sp, #112	@ 0x70
 8007072:	ab1d      	add	r3, sp, #116	@ 0x74
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	9006      	str	r0, [sp, #24]
 8007078:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800707c:	4809      	ldr	r0, [pc, #36]	@ (80070a4 <siprintf+0x38>)
 800707e:	9107      	str	r1, [sp, #28]
 8007080:	9104      	str	r1, [sp, #16]
 8007082:	4909      	ldr	r1, [pc, #36]	@ (80070a8 <siprintf+0x3c>)
 8007084:	f853 2b04 	ldr.w	r2, [r3], #4
 8007088:	9105      	str	r1, [sp, #20]
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	a902      	add	r1, sp, #8
 8007090:	f000 f994 	bl	80073bc <_svfiprintf_r>
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	b01c      	add	sp, #112	@ 0x70
 800709c:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a0:	b003      	add	sp, #12
 80070a2:	4770      	bx	lr
 80070a4:	20000024 	.word	0x20000024
 80070a8:	ffff0208 	.word	0xffff0208

080070ac <memset>:
 80070ac:	4402      	add	r2, r0
 80070ae:	4603      	mov	r3, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <__errno>:
 80070bc:	4b01      	ldr	r3, [pc, #4]	@ (80070c4 <__errno+0x8>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20000024 	.word	0x20000024

080070c8 <__libc_init_array>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007100 <__libc_init_array+0x38>)
 80070cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007104 <__libc_init_array+0x3c>)
 80070ce:	1b64      	subs	r4, r4, r5
 80070d0:	10a4      	asrs	r4, r4, #2
 80070d2:	2600      	movs	r6, #0
 80070d4:	42a6      	cmp	r6, r4
 80070d6:	d109      	bne.n	80070ec <__libc_init_array+0x24>
 80070d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007108 <__libc_init_array+0x40>)
 80070da:	4c0c      	ldr	r4, [pc, #48]	@ (800710c <__libc_init_array+0x44>)
 80070dc:	f000 fc66 	bl	80079ac <_init>
 80070e0:	1b64      	subs	r4, r4, r5
 80070e2:	10a4      	asrs	r4, r4, #2
 80070e4:	2600      	movs	r6, #0
 80070e6:	42a6      	cmp	r6, r4
 80070e8:	d105      	bne.n	80070f6 <__libc_init_array+0x2e>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f0:	4798      	blx	r3
 80070f2:	3601      	adds	r6, #1
 80070f4:	e7ee      	b.n	80070d4 <__libc_init_array+0xc>
 80070f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fa:	4798      	blx	r3
 80070fc:	3601      	adds	r6, #1
 80070fe:	e7f2      	b.n	80070e6 <__libc_init_array+0x1e>
 8007100:	08007b1c 	.word	0x08007b1c
 8007104:	08007b1c 	.word	0x08007b1c
 8007108:	08007b1c 	.word	0x08007b1c
 800710c:	08007b20 	.word	0x08007b20

08007110 <__retarget_lock_acquire_recursive>:
 8007110:	4770      	bx	lr

08007112 <__retarget_lock_release_recursive>:
 8007112:	4770      	bx	lr

08007114 <_free_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4605      	mov	r5, r0
 8007118:	2900      	cmp	r1, #0
 800711a:	d041      	beq.n	80071a0 <_free_r+0x8c>
 800711c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007120:	1f0c      	subs	r4, r1, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfb8      	it	lt
 8007126:	18e4      	addlt	r4, r4, r3
 8007128:	f000 f8e0 	bl	80072ec <__malloc_lock>
 800712c:	4a1d      	ldr	r2, [pc, #116]	@ (80071a4 <_free_r+0x90>)
 800712e:	6813      	ldr	r3, [r2, #0]
 8007130:	b933      	cbnz	r3, 8007140 <_free_r+0x2c>
 8007132:	6063      	str	r3, [r4, #4]
 8007134:	6014      	str	r4, [r2, #0]
 8007136:	4628      	mov	r0, r5
 8007138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800713c:	f000 b8dc 	b.w	80072f8 <__malloc_unlock>
 8007140:	42a3      	cmp	r3, r4
 8007142:	d908      	bls.n	8007156 <_free_r+0x42>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	1821      	adds	r1, r4, r0
 8007148:	428b      	cmp	r3, r1
 800714a:	bf01      	itttt	eq
 800714c:	6819      	ldreq	r1, [r3, #0]
 800714e:	685b      	ldreq	r3, [r3, #4]
 8007150:	1809      	addeq	r1, r1, r0
 8007152:	6021      	streq	r1, [r4, #0]
 8007154:	e7ed      	b.n	8007132 <_free_r+0x1e>
 8007156:	461a      	mov	r2, r3
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	b10b      	cbz	r3, 8007160 <_free_r+0x4c>
 800715c:	42a3      	cmp	r3, r4
 800715e:	d9fa      	bls.n	8007156 <_free_r+0x42>
 8007160:	6811      	ldr	r1, [r2, #0]
 8007162:	1850      	adds	r0, r2, r1
 8007164:	42a0      	cmp	r0, r4
 8007166:	d10b      	bne.n	8007180 <_free_r+0x6c>
 8007168:	6820      	ldr	r0, [r4, #0]
 800716a:	4401      	add	r1, r0
 800716c:	1850      	adds	r0, r2, r1
 800716e:	4283      	cmp	r3, r0
 8007170:	6011      	str	r1, [r2, #0]
 8007172:	d1e0      	bne.n	8007136 <_free_r+0x22>
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	6053      	str	r3, [r2, #4]
 800717a:	4408      	add	r0, r1
 800717c:	6010      	str	r0, [r2, #0]
 800717e:	e7da      	b.n	8007136 <_free_r+0x22>
 8007180:	d902      	bls.n	8007188 <_free_r+0x74>
 8007182:	230c      	movs	r3, #12
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	e7d6      	b.n	8007136 <_free_r+0x22>
 8007188:	6820      	ldr	r0, [r4, #0]
 800718a:	1821      	adds	r1, r4, r0
 800718c:	428b      	cmp	r3, r1
 800718e:	bf04      	itt	eq
 8007190:	6819      	ldreq	r1, [r3, #0]
 8007192:	685b      	ldreq	r3, [r3, #4]
 8007194:	6063      	str	r3, [r4, #4]
 8007196:	bf04      	itt	eq
 8007198:	1809      	addeq	r1, r1, r0
 800719a:	6021      	streq	r1, [r4, #0]
 800719c:	6054      	str	r4, [r2, #4]
 800719e:	e7ca      	b.n	8007136 <_free_r+0x22>
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	bf00      	nop
 80071a4:	20011a6c 	.word	0x20011a6c

080071a8 <sbrk_aligned>:
 80071a8:	b570      	push	{r4, r5, r6, lr}
 80071aa:	4e0f      	ldr	r6, [pc, #60]	@ (80071e8 <sbrk_aligned+0x40>)
 80071ac:	460c      	mov	r4, r1
 80071ae:	6831      	ldr	r1, [r6, #0]
 80071b0:	4605      	mov	r5, r0
 80071b2:	b911      	cbnz	r1, 80071ba <sbrk_aligned+0x12>
 80071b4:	f000 fba6 	bl	8007904 <_sbrk_r>
 80071b8:	6030      	str	r0, [r6, #0]
 80071ba:	4621      	mov	r1, r4
 80071bc:	4628      	mov	r0, r5
 80071be:	f000 fba1 	bl	8007904 <_sbrk_r>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	d103      	bne.n	80071ce <sbrk_aligned+0x26>
 80071c6:	f04f 34ff 	mov.w	r4, #4294967295
 80071ca:	4620      	mov	r0, r4
 80071cc:	bd70      	pop	{r4, r5, r6, pc}
 80071ce:	1cc4      	adds	r4, r0, #3
 80071d0:	f024 0403 	bic.w	r4, r4, #3
 80071d4:	42a0      	cmp	r0, r4
 80071d6:	d0f8      	beq.n	80071ca <sbrk_aligned+0x22>
 80071d8:	1a21      	subs	r1, r4, r0
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 fb92 	bl	8007904 <_sbrk_r>
 80071e0:	3001      	adds	r0, #1
 80071e2:	d1f2      	bne.n	80071ca <sbrk_aligned+0x22>
 80071e4:	e7ef      	b.n	80071c6 <sbrk_aligned+0x1e>
 80071e6:	bf00      	nop
 80071e8:	20011a68 	.word	0x20011a68

080071ec <_malloc_r>:
 80071ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f0:	1ccd      	adds	r5, r1, #3
 80071f2:	f025 0503 	bic.w	r5, r5, #3
 80071f6:	3508      	adds	r5, #8
 80071f8:	2d0c      	cmp	r5, #12
 80071fa:	bf38      	it	cc
 80071fc:	250c      	movcc	r5, #12
 80071fe:	2d00      	cmp	r5, #0
 8007200:	4606      	mov	r6, r0
 8007202:	db01      	blt.n	8007208 <_malloc_r+0x1c>
 8007204:	42a9      	cmp	r1, r5
 8007206:	d904      	bls.n	8007212 <_malloc_r+0x26>
 8007208:	230c      	movs	r3, #12
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	2000      	movs	r0, #0
 800720e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072e8 <_malloc_r+0xfc>
 8007216:	f000 f869 	bl	80072ec <__malloc_lock>
 800721a:	f8d8 3000 	ldr.w	r3, [r8]
 800721e:	461c      	mov	r4, r3
 8007220:	bb44      	cbnz	r4, 8007274 <_malloc_r+0x88>
 8007222:	4629      	mov	r1, r5
 8007224:	4630      	mov	r0, r6
 8007226:	f7ff ffbf 	bl	80071a8 <sbrk_aligned>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	4604      	mov	r4, r0
 800722e:	d158      	bne.n	80072e2 <_malloc_r+0xf6>
 8007230:	f8d8 4000 	ldr.w	r4, [r8]
 8007234:	4627      	mov	r7, r4
 8007236:	2f00      	cmp	r7, #0
 8007238:	d143      	bne.n	80072c2 <_malloc_r+0xd6>
 800723a:	2c00      	cmp	r4, #0
 800723c:	d04b      	beq.n	80072d6 <_malloc_r+0xea>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	4639      	mov	r1, r7
 8007242:	4630      	mov	r0, r6
 8007244:	eb04 0903 	add.w	r9, r4, r3
 8007248:	f000 fb5c 	bl	8007904 <_sbrk_r>
 800724c:	4581      	cmp	r9, r0
 800724e:	d142      	bne.n	80072d6 <_malloc_r+0xea>
 8007250:	6821      	ldr	r1, [r4, #0]
 8007252:	1a6d      	subs	r5, r5, r1
 8007254:	4629      	mov	r1, r5
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff ffa6 	bl	80071a8 <sbrk_aligned>
 800725c:	3001      	adds	r0, #1
 800725e:	d03a      	beq.n	80072d6 <_malloc_r+0xea>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	442b      	add	r3, r5
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	f8d8 3000 	ldr.w	r3, [r8]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	bb62      	cbnz	r2, 80072c8 <_malloc_r+0xdc>
 800726e:	f8c8 7000 	str.w	r7, [r8]
 8007272:	e00f      	b.n	8007294 <_malloc_r+0xa8>
 8007274:	6822      	ldr	r2, [r4, #0]
 8007276:	1b52      	subs	r2, r2, r5
 8007278:	d420      	bmi.n	80072bc <_malloc_r+0xd0>
 800727a:	2a0b      	cmp	r2, #11
 800727c:	d917      	bls.n	80072ae <_malloc_r+0xc2>
 800727e:	1961      	adds	r1, r4, r5
 8007280:	42a3      	cmp	r3, r4
 8007282:	6025      	str	r5, [r4, #0]
 8007284:	bf18      	it	ne
 8007286:	6059      	strne	r1, [r3, #4]
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	bf08      	it	eq
 800728c:	f8c8 1000 	streq.w	r1, [r8]
 8007290:	5162      	str	r2, [r4, r5]
 8007292:	604b      	str	r3, [r1, #4]
 8007294:	4630      	mov	r0, r6
 8007296:	f000 f82f 	bl	80072f8 <__malloc_unlock>
 800729a:	f104 000b 	add.w	r0, r4, #11
 800729e:	1d23      	adds	r3, r4, #4
 80072a0:	f020 0007 	bic.w	r0, r0, #7
 80072a4:	1ac2      	subs	r2, r0, r3
 80072a6:	bf1c      	itt	ne
 80072a8:	1a1b      	subne	r3, r3, r0
 80072aa:	50a3      	strne	r3, [r4, r2]
 80072ac:	e7af      	b.n	800720e <_malloc_r+0x22>
 80072ae:	6862      	ldr	r2, [r4, #4]
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	bf0c      	ite	eq
 80072b4:	f8c8 2000 	streq.w	r2, [r8]
 80072b8:	605a      	strne	r2, [r3, #4]
 80072ba:	e7eb      	b.n	8007294 <_malloc_r+0xa8>
 80072bc:	4623      	mov	r3, r4
 80072be:	6864      	ldr	r4, [r4, #4]
 80072c0:	e7ae      	b.n	8007220 <_malloc_r+0x34>
 80072c2:	463c      	mov	r4, r7
 80072c4:	687f      	ldr	r7, [r7, #4]
 80072c6:	e7b6      	b.n	8007236 <_malloc_r+0x4a>
 80072c8:	461a      	mov	r2, r3
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	d1fb      	bne.n	80072c8 <_malloc_r+0xdc>
 80072d0:	2300      	movs	r3, #0
 80072d2:	6053      	str	r3, [r2, #4]
 80072d4:	e7de      	b.n	8007294 <_malloc_r+0xa8>
 80072d6:	230c      	movs	r3, #12
 80072d8:	6033      	str	r3, [r6, #0]
 80072da:	4630      	mov	r0, r6
 80072dc:	f000 f80c 	bl	80072f8 <__malloc_unlock>
 80072e0:	e794      	b.n	800720c <_malloc_r+0x20>
 80072e2:	6005      	str	r5, [r0, #0]
 80072e4:	e7d6      	b.n	8007294 <_malloc_r+0xa8>
 80072e6:	bf00      	nop
 80072e8:	20011a6c 	.word	0x20011a6c

080072ec <__malloc_lock>:
 80072ec:	4801      	ldr	r0, [pc, #4]	@ (80072f4 <__malloc_lock+0x8>)
 80072ee:	f7ff bf0f 	b.w	8007110 <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	20011a64 	.word	0x20011a64

080072f8 <__malloc_unlock>:
 80072f8:	4801      	ldr	r0, [pc, #4]	@ (8007300 <__malloc_unlock+0x8>)
 80072fa:	f7ff bf0a 	b.w	8007112 <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	20011a64 	.word	0x20011a64

08007304 <__ssputs_r>:
 8007304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007308:	688e      	ldr	r6, [r1, #8]
 800730a:	461f      	mov	r7, r3
 800730c:	42be      	cmp	r6, r7
 800730e:	680b      	ldr	r3, [r1, #0]
 8007310:	4682      	mov	sl, r0
 8007312:	460c      	mov	r4, r1
 8007314:	4690      	mov	r8, r2
 8007316:	d82d      	bhi.n	8007374 <__ssputs_r+0x70>
 8007318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800731c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007320:	d026      	beq.n	8007370 <__ssputs_r+0x6c>
 8007322:	6965      	ldr	r5, [r4, #20]
 8007324:	6909      	ldr	r1, [r1, #16]
 8007326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800732a:	eba3 0901 	sub.w	r9, r3, r1
 800732e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007332:	1c7b      	adds	r3, r7, #1
 8007334:	444b      	add	r3, r9
 8007336:	106d      	asrs	r5, r5, #1
 8007338:	429d      	cmp	r5, r3
 800733a:	bf38      	it	cc
 800733c:	461d      	movcc	r5, r3
 800733e:	0553      	lsls	r3, r2, #21
 8007340:	d527      	bpl.n	8007392 <__ssputs_r+0x8e>
 8007342:	4629      	mov	r1, r5
 8007344:	f7ff ff52 	bl	80071ec <_malloc_r>
 8007348:	4606      	mov	r6, r0
 800734a:	b360      	cbz	r0, 80073a6 <__ssputs_r+0xa2>
 800734c:	6921      	ldr	r1, [r4, #16]
 800734e:	464a      	mov	r2, r9
 8007350:	f000 fae8 	bl	8007924 <memcpy>
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800735a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	6126      	str	r6, [r4, #16]
 8007362:	6165      	str	r5, [r4, #20]
 8007364:	444e      	add	r6, r9
 8007366:	eba5 0509 	sub.w	r5, r5, r9
 800736a:	6026      	str	r6, [r4, #0]
 800736c:	60a5      	str	r5, [r4, #8]
 800736e:	463e      	mov	r6, r7
 8007370:	42be      	cmp	r6, r7
 8007372:	d900      	bls.n	8007376 <__ssputs_r+0x72>
 8007374:	463e      	mov	r6, r7
 8007376:	6820      	ldr	r0, [r4, #0]
 8007378:	4632      	mov	r2, r6
 800737a:	4641      	mov	r1, r8
 800737c:	f000 faa8 	bl	80078d0 <memmove>
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	1b9b      	subs	r3, r3, r6
 8007384:	60a3      	str	r3, [r4, #8]
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	4433      	add	r3, r6
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	2000      	movs	r0, #0
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	462a      	mov	r2, r5
 8007394:	f000 fad4 	bl	8007940 <_realloc_r>
 8007398:	4606      	mov	r6, r0
 800739a:	2800      	cmp	r0, #0
 800739c:	d1e0      	bne.n	8007360 <__ssputs_r+0x5c>
 800739e:	6921      	ldr	r1, [r4, #16]
 80073a0:	4650      	mov	r0, sl
 80073a2:	f7ff feb7 	bl	8007114 <_free_r>
 80073a6:	230c      	movs	r3, #12
 80073a8:	f8ca 3000 	str.w	r3, [sl]
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e7e9      	b.n	800738e <__ssputs_r+0x8a>
	...

080073bc <_svfiprintf_r>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	4698      	mov	r8, r3
 80073c2:	898b      	ldrh	r3, [r1, #12]
 80073c4:	061b      	lsls	r3, r3, #24
 80073c6:	b09d      	sub	sp, #116	@ 0x74
 80073c8:	4607      	mov	r7, r0
 80073ca:	460d      	mov	r5, r1
 80073cc:	4614      	mov	r4, r2
 80073ce:	d510      	bpl.n	80073f2 <_svfiprintf_r+0x36>
 80073d0:	690b      	ldr	r3, [r1, #16]
 80073d2:	b973      	cbnz	r3, 80073f2 <_svfiprintf_r+0x36>
 80073d4:	2140      	movs	r1, #64	@ 0x40
 80073d6:	f7ff ff09 	bl	80071ec <_malloc_r>
 80073da:	6028      	str	r0, [r5, #0]
 80073dc:	6128      	str	r0, [r5, #16]
 80073de:	b930      	cbnz	r0, 80073ee <_svfiprintf_r+0x32>
 80073e0:	230c      	movs	r3, #12
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
 80073e8:	b01d      	add	sp, #116	@ 0x74
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ee:	2340      	movs	r3, #64	@ 0x40
 80073f0:	616b      	str	r3, [r5, #20]
 80073f2:	2300      	movs	r3, #0
 80073f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f6:	2320      	movs	r3, #32
 80073f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007400:	2330      	movs	r3, #48	@ 0x30
 8007402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075a0 <_svfiprintf_r+0x1e4>
 8007406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800740a:	f04f 0901 	mov.w	r9, #1
 800740e:	4623      	mov	r3, r4
 8007410:	469a      	mov	sl, r3
 8007412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007416:	b10a      	cbz	r2, 800741c <_svfiprintf_r+0x60>
 8007418:	2a25      	cmp	r2, #37	@ 0x25
 800741a:	d1f9      	bne.n	8007410 <_svfiprintf_r+0x54>
 800741c:	ebba 0b04 	subs.w	fp, sl, r4
 8007420:	d00b      	beq.n	800743a <_svfiprintf_r+0x7e>
 8007422:	465b      	mov	r3, fp
 8007424:	4622      	mov	r2, r4
 8007426:	4629      	mov	r1, r5
 8007428:	4638      	mov	r0, r7
 800742a:	f7ff ff6b 	bl	8007304 <__ssputs_r>
 800742e:	3001      	adds	r0, #1
 8007430:	f000 80a7 	beq.w	8007582 <_svfiprintf_r+0x1c6>
 8007434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007436:	445a      	add	r2, fp
 8007438:	9209      	str	r2, [sp, #36]	@ 0x24
 800743a:	f89a 3000 	ldrb.w	r3, [sl]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 809f 	beq.w	8007582 <_svfiprintf_r+0x1c6>
 8007444:	2300      	movs	r3, #0
 8007446:	f04f 32ff 	mov.w	r2, #4294967295
 800744a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800744e:	f10a 0a01 	add.w	sl, sl, #1
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	9307      	str	r3, [sp, #28]
 8007456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800745a:	931a      	str	r3, [sp, #104]	@ 0x68
 800745c:	4654      	mov	r4, sl
 800745e:	2205      	movs	r2, #5
 8007460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007464:	484e      	ldr	r0, [pc, #312]	@ (80075a0 <_svfiprintf_r+0x1e4>)
 8007466:	f7f8 febb 	bl	80001e0 <memchr>
 800746a:	9a04      	ldr	r2, [sp, #16]
 800746c:	b9d8      	cbnz	r0, 80074a6 <_svfiprintf_r+0xea>
 800746e:	06d0      	lsls	r0, r2, #27
 8007470:	bf44      	itt	mi
 8007472:	2320      	movmi	r3, #32
 8007474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007478:	0711      	lsls	r1, r2, #28
 800747a:	bf44      	itt	mi
 800747c:	232b      	movmi	r3, #43	@ 0x2b
 800747e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007482:	f89a 3000 	ldrb.w	r3, [sl]
 8007486:	2b2a      	cmp	r3, #42	@ 0x2a
 8007488:	d015      	beq.n	80074b6 <_svfiprintf_r+0xfa>
 800748a:	9a07      	ldr	r2, [sp, #28]
 800748c:	4654      	mov	r4, sl
 800748e:	2000      	movs	r0, #0
 8007490:	f04f 0c0a 	mov.w	ip, #10
 8007494:	4621      	mov	r1, r4
 8007496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800749a:	3b30      	subs	r3, #48	@ 0x30
 800749c:	2b09      	cmp	r3, #9
 800749e:	d94b      	bls.n	8007538 <_svfiprintf_r+0x17c>
 80074a0:	b1b0      	cbz	r0, 80074d0 <_svfiprintf_r+0x114>
 80074a2:	9207      	str	r2, [sp, #28]
 80074a4:	e014      	b.n	80074d0 <_svfiprintf_r+0x114>
 80074a6:	eba0 0308 	sub.w	r3, r0, r8
 80074aa:	fa09 f303 	lsl.w	r3, r9, r3
 80074ae:	4313      	orrs	r3, r2
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	46a2      	mov	sl, r4
 80074b4:	e7d2      	b.n	800745c <_svfiprintf_r+0xa0>
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	1d19      	adds	r1, r3, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	9103      	str	r1, [sp, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bfbb      	ittet	lt
 80074c2:	425b      	neglt	r3, r3
 80074c4:	f042 0202 	orrlt.w	r2, r2, #2
 80074c8:	9307      	strge	r3, [sp, #28]
 80074ca:	9307      	strlt	r3, [sp, #28]
 80074cc:	bfb8      	it	lt
 80074ce:	9204      	strlt	r2, [sp, #16]
 80074d0:	7823      	ldrb	r3, [r4, #0]
 80074d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074d4:	d10a      	bne.n	80074ec <_svfiprintf_r+0x130>
 80074d6:	7863      	ldrb	r3, [r4, #1]
 80074d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074da:	d132      	bne.n	8007542 <_svfiprintf_r+0x186>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	1d1a      	adds	r2, r3, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	9203      	str	r2, [sp, #12]
 80074e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074e8:	3402      	adds	r4, #2
 80074ea:	9305      	str	r3, [sp, #20]
 80074ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075b0 <_svfiprintf_r+0x1f4>
 80074f0:	7821      	ldrb	r1, [r4, #0]
 80074f2:	2203      	movs	r2, #3
 80074f4:	4650      	mov	r0, sl
 80074f6:	f7f8 fe73 	bl	80001e0 <memchr>
 80074fa:	b138      	cbz	r0, 800750c <_svfiprintf_r+0x150>
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	eba0 000a 	sub.w	r0, r0, sl
 8007502:	2240      	movs	r2, #64	@ 0x40
 8007504:	4082      	lsls	r2, r0
 8007506:	4313      	orrs	r3, r2
 8007508:	3401      	adds	r4, #1
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007510:	4824      	ldr	r0, [pc, #144]	@ (80075a4 <_svfiprintf_r+0x1e8>)
 8007512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007516:	2206      	movs	r2, #6
 8007518:	f7f8 fe62 	bl	80001e0 <memchr>
 800751c:	2800      	cmp	r0, #0
 800751e:	d036      	beq.n	800758e <_svfiprintf_r+0x1d2>
 8007520:	4b21      	ldr	r3, [pc, #132]	@ (80075a8 <_svfiprintf_r+0x1ec>)
 8007522:	bb1b      	cbnz	r3, 800756c <_svfiprintf_r+0x1b0>
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	3307      	adds	r3, #7
 8007528:	f023 0307 	bic.w	r3, r3, #7
 800752c:	3308      	adds	r3, #8
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007532:	4433      	add	r3, r6
 8007534:	9309      	str	r3, [sp, #36]	@ 0x24
 8007536:	e76a      	b.n	800740e <_svfiprintf_r+0x52>
 8007538:	fb0c 3202 	mla	r2, ip, r2, r3
 800753c:	460c      	mov	r4, r1
 800753e:	2001      	movs	r0, #1
 8007540:	e7a8      	b.n	8007494 <_svfiprintf_r+0xd8>
 8007542:	2300      	movs	r3, #0
 8007544:	3401      	adds	r4, #1
 8007546:	9305      	str	r3, [sp, #20]
 8007548:	4619      	mov	r1, r3
 800754a:	f04f 0c0a 	mov.w	ip, #10
 800754e:	4620      	mov	r0, r4
 8007550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007554:	3a30      	subs	r2, #48	@ 0x30
 8007556:	2a09      	cmp	r2, #9
 8007558:	d903      	bls.n	8007562 <_svfiprintf_r+0x1a6>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0c6      	beq.n	80074ec <_svfiprintf_r+0x130>
 800755e:	9105      	str	r1, [sp, #20]
 8007560:	e7c4      	b.n	80074ec <_svfiprintf_r+0x130>
 8007562:	fb0c 2101 	mla	r1, ip, r1, r2
 8007566:	4604      	mov	r4, r0
 8007568:	2301      	movs	r3, #1
 800756a:	e7f0      	b.n	800754e <_svfiprintf_r+0x192>
 800756c:	ab03      	add	r3, sp, #12
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	462a      	mov	r2, r5
 8007572:	4b0e      	ldr	r3, [pc, #56]	@ (80075ac <_svfiprintf_r+0x1f0>)
 8007574:	a904      	add	r1, sp, #16
 8007576:	4638      	mov	r0, r7
 8007578:	f3af 8000 	nop.w
 800757c:	1c42      	adds	r2, r0, #1
 800757e:	4606      	mov	r6, r0
 8007580:	d1d6      	bne.n	8007530 <_svfiprintf_r+0x174>
 8007582:	89ab      	ldrh	r3, [r5, #12]
 8007584:	065b      	lsls	r3, r3, #25
 8007586:	f53f af2d 	bmi.w	80073e4 <_svfiprintf_r+0x28>
 800758a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800758c:	e72c      	b.n	80073e8 <_svfiprintf_r+0x2c>
 800758e:	ab03      	add	r3, sp, #12
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	462a      	mov	r2, r5
 8007594:	4b05      	ldr	r3, [pc, #20]	@ (80075ac <_svfiprintf_r+0x1f0>)
 8007596:	a904      	add	r1, sp, #16
 8007598:	4638      	mov	r0, r7
 800759a:	f000 f879 	bl	8007690 <_printf_i>
 800759e:	e7ed      	b.n	800757c <_svfiprintf_r+0x1c0>
 80075a0:	08007ae0 	.word	0x08007ae0
 80075a4:	08007aea 	.word	0x08007aea
 80075a8:	00000000 	.word	0x00000000
 80075ac:	08007305 	.word	0x08007305
 80075b0:	08007ae6 	.word	0x08007ae6

080075b4 <_printf_common>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	4616      	mov	r6, r2
 80075ba:	4698      	mov	r8, r3
 80075bc:	688a      	ldr	r2, [r1, #8]
 80075be:	690b      	ldr	r3, [r1, #16]
 80075c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075c4:	4293      	cmp	r3, r2
 80075c6:	bfb8      	it	lt
 80075c8:	4613      	movlt	r3, r2
 80075ca:	6033      	str	r3, [r6, #0]
 80075cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075d0:	4607      	mov	r7, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	b10a      	cbz	r2, 80075da <_printf_common+0x26>
 80075d6:	3301      	adds	r3, #1
 80075d8:	6033      	str	r3, [r6, #0]
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	0699      	lsls	r1, r3, #26
 80075de:	bf42      	ittt	mi
 80075e0:	6833      	ldrmi	r3, [r6, #0]
 80075e2:	3302      	addmi	r3, #2
 80075e4:	6033      	strmi	r3, [r6, #0]
 80075e6:	6825      	ldr	r5, [r4, #0]
 80075e8:	f015 0506 	ands.w	r5, r5, #6
 80075ec:	d106      	bne.n	80075fc <_printf_common+0x48>
 80075ee:	f104 0a19 	add.w	sl, r4, #25
 80075f2:	68e3      	ldr	r3, [r4, #12]
 80075f4:	6832      	ldr	r2, [r6, #0]
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	42ab      	cmp	r3, r5
 80075fa:	dc26      	bgt.n	800764a <_printf_common+0x96>
 80075fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007600:	6822      	ldr	r2, [r4, #0]
 8007602:	3b00      	subs	r3, #0
 8007604:	bf18      	it	ne
 8007606:	2301      	movne	r3, #1
 8007608:	0692      	lsls	r2, r2, #26
 800760a:	d42b      	bmi.n	8007664 <_printf_common+0xb0>
 800760c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007610:	4641      	mov	r1, r8
 8007612:	4638      	mov	r0, r7
 8007614:	47c8      	blx	r9
 8007616:	3001      	adds	r0, #1
 8007618:	d01e      	beq.n	8007658 <_printf_common+0xa4>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	6922      	ldr	r2, [r4, #16]
 800761e:	f003 0306 	and.w	r3, r3, #6
 8007622:	2b04      	cmp	r3, #4
 8007624:	bf02      	ittt	eq
 8007626:	68e5      	ldreq	r5, [r4, #12]
 8007628:	6833      	ldreq	r3, [r6, #0]
 800762a:	1aed      	subeq	r5, r5, r3
 800762c:	68a3      	ldr	r3, [r4, #8]
 800762e:	bf0c      	ite	eq
 8007630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007634:	2500      	movne	r5, #0
 8007636:	4293      	cmp	r3, r2
 8007638:	bfc4      	itt	gt
 800763a:	1a9b      	subgt	r3, r3, r2
 800763c:	18ed      	addgt	r5, r5, r3
 800763e:	2600      	movs	r6, #0
 8007640:	341a      	adds	r4, #26
 8007642:	42b5      	cmp	r5, r6
 8007644:	d11a      	bne.n	800767c <_printf_common+0xc8>
 8007646:	2000      	movs	r0, #0
 8007648:	e008      	b.n	800765c <_printf_common+0xa8>
 800764a:	2301      	movs	r3, #1
 800764c:	4652      	mov	r2, sl
 800764e:	4641      	mov	r1, r8
 8007650:	4638      	mov	r0, r7
 8007652:	47c8      	blx	r9
 8007654:	3001      	adds	r0, #1
 8007656:	d103      	bne.n	8007660 <_printf_common+0xac>
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007660:	3501      	adds	r5, #1
 8007662:	e7c6      	b.n	80075f2 <_printf_common+0x3e>
 8007664:	18e1      	adds	r1, r4, r3
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	2030      	movs	r0, #48	@ 0x30
 800766a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800766e:	4422      	add	r2, r4
 8007670:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007674:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007678:	3302      	adds	r3, #2
 800767a:	e7c7      	b.n	800760c <_printf_common+0x58>
 800767c:	2301      	movs	r3, #1
 800767e:	4622      	mov	r2, r4
 8007680:	4641      	mov	r1, r8
 8007682:	4638      	mov	r0, r7
 8007684:	47c8      	blx	r9
 8007686:	3001      	adds	r0, #1
 8007688:	d0e6      	beq.n	8007658 <_printf_common+0xa4>
 800768a:	3601      	adds	r6, #1
 800768c:	e7d9      	b.n	8007642 <_printf_common+0x8e>
	...

08007690 <_printf_i>:
 8007690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007694:	7e0f      	ldrb	r7, [r1, #24]
 8007696:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007698:	2f78      	cmp	r7, #120	@ 0x78
 800769a:	4691      	mov	r9, r2
 800769c:	4680      	mov	r8, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	469a      	mov	sl, r3
 80076a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076a6:	d807      	bhi.n	80076b8 <_printf_i+0x28>
 80076a8:	2f62      	cmp	r7, #98	@ 0x62
 80076aa:	d80a      	bhi.n	80076c2 <_printf_i+0x32>
 80076ac:	2f00      	cmp	r7, #0
 80076ae:	f000 80d2 	beq.w	8007856 <_printf_i+0x1c6>
 80076b2:	2f58      	cmp	r7, #88	@ 0x58
 80076b4:	f000 80b9 	beq.w	800782a <_printf_i+0x19a>
 80076b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076c0:	e03a      	b.n	8007738 <_printf_i+0xa8>
 80076c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076c6:	2b15      	cmp	r3, #21
 80076c8:	d8f6      	bhi.n	80076b8 <_printf_i+0x28>
 80076ca:	a101      	add	r1, pc, #4	@ (adr r1, 80076d0 <_printf_i+0x40>)
 80076cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076d0:	08007729 	.word	0x08007729
 80076d4:	0800773d 	.word	0x0800773d
 80076d8:	080076b9 	.word	0x080076b9
 80076dc:	080076b9 	.word	0x080076b9
 80076e0:	080076b9 	.word	0x080076b9
 80076e4:	080076b9 	.word	0x080076b9
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	080076b9 	.word	0x080076b9
 80076f0:	080076b9 	.word	0x080076b9
 80076f4:	080076b9 	.word	0x080076b9
 80076f8:	080076b9 	.word	0x080076b9
 80076fc:	0800783d 	.word	0x0800783d
 8007700:	08007767 	.word	0x08007767
 8007704:	080077f7 	.word	0x080077f7
 8007708:	080076b9 	.word	0x080076b9
 800770c:	080076b9 	.word	0x080076b9
 8007710:	0800785f 	.word	0x0800785f
 8007714:	080076b9 	.word	0x080076b9
 8007718:	08007767 	.word	0x08007767
 800771c:	080076b9 	.word	0x080076b9
 8007720:	080076b9 	.word	0x080076b9
 8007724:	080077ff 	.word	0x080077ff
 8007728:	6833      	ldr	r3, [r6, #0]
 800772a:	1d1a      	adds	r2, r3, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6032      	str	r2, [r6, #0]
 8007730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007734:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007738:	2301      	movs	r3, #1
 800773a:	e09d      	b.n	8007878 <_printf_i+0x1e8>
 800773c:	6833      	ldr	r3, [r6, #0]
 800773e:	6820      	ldr	r0, [r4, #0]
 8007740:	1d19      	adds	r1, r3, #4
 8007742:	6031      	str	r1, [r6, #0]
 8007744:	0606      	lsls	r6, r0, #24
 8007746:	d501      	bpl.n	800774c <_printf_i+0xbc>
 8007748:	681d      	ldr	r5, [r3, #0]
 800774a:	e003      	b.n	8007754 <_printf_i+0xc4>
 800774c:	0645      	lsls	r5, r0, #25
 800774e:	d5fb      	bpl.n	8007748 <_printf_i+0xb8>
 8007750:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007754:	2d00      	cmp	r5, #0
 8007756:	da03      	bge.n	8007760 <_printf_i+0xd0>
 8007758:	232d      	movs	r3, #45	@ 0x2d
 800775a:	426d      	negs	r5, r5
 800775c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007760:	4859      	ldr	r0, [pc, #356]	@ (80078c8 <_printf_i+0x238>)
 8007762:	230a      	movs	r3, #10
 8007764:	e011      	b.n	800778a <_printf_i+0xfa>
 8007766:	6821      	ldr	r1, [r4, #0]
 8007768:	6833      	ldr	r3, [r6, #0]
 800776a:	0608      	lsls	r0, r1, #24
 800776c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007770:	d402      	bmi.n	8007778 <_printf_i+0xe8>
 8007772:	0649      	lsls	r1, r1, #25
 8007774:	bf48      	it	mi
 8007776:	b2ad      	uxthmi	r5, r5
 8007778:	2f6f      	cmp	r7, #111	@ 0x6f
 800777a:	4853      	ldr	r0, [pc, #332]	@ (80078c8 <_printf_i+0x238>)
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	bf14      	ite	ne
 8007780:	230a      	movne	r3, #10
 8007782:	2308      	moveq	r3, #8
 8007784:	2100      	movs	r1, #0
 8007786:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800778a:	6866      	ldr	r6, [r4, #4]
 800778c:	60a6      	str	r6, [r4, #8]
 800778e:	2e00      	cmp	r6, #0
 8007790:	bfa2      	ittt	ge
 8007792:	6821      	ldrge	r1, [r4, #0]
 8007794:	f021 0104 	bicge.w	r1, r1, #4
 8007798:	6021      	strge	r1, [r4, #0]
 800779a:	b90d      	cbnz	r5, 80077a0 <_printf_i+0x110>
 800779c:	2e00      	cmp	r6, #0
 800779e:	d04b      	beq.n	8007838 <_printf_i+0x1a8>
 80077a0:	4616      	mov	r6, r2
 80077a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80077a6:	fb03 5711 	mls	r7, r3, r1, r5
 80077aa:	5dc7      	ldrb	r7, [r0, r7]
 80077ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077b0:	462f      	mov	r7, r5
 80077b2:	42bb      	cmp	r3, r7
 80077b4:	460d      	mov	r5, r1
 80077b6:	d9f4      	bls.n	80077a2 <_printf_i+0x112>
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d10b      	bne.n	80077d4 <_printf_i+0x144>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	07df      	lsls	r7, r3, #31
 80077c0:	d508      	bpl.n	80077d4 <_printf_i+0x144>
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	6861      	ldr	r1, [r4, #4]
 80077c6:	4299      	cmp	r1, r3
 80077c8:	bfde      	ittt	le
 80077ca:	2330      	movle	r3, #48	@ 0x30
 80077cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077d4:	1b92      	subs	r2, r2, r6
 80077d6:	6122      	str	r2, [r4, #16]
 80077d8:	f8cd a000 	str.w	sl, [sp]
 80077dc:	464b      	mov	r3, r9
 80077de:	aa03      	add	r2, sp, #12
 80077e0:	4621      	mov	r1, r4
 80077e2:	4640      	mov	r0, r8
 80077e4:	f7ff fee6 	bl	80075b4 <_printf_common>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d14a      	bne.n	8007882 <_printf_i+0x1f2>
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	b004      	add	sp, #16
 80077f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	f043 0320 	orr.w	r3, r3, #32
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	4833      	ldr	r0, [pc, #204]	@ (80078cc <_printf_i+0x23c>)
 8007800:	2778      	movs	r7, #120	@ 0x78
 8007802:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	6831      	ldr	r1, [r6, #0]
 800780a:	061f      	lsls	r7, r3, #24
 800780c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007810:	d402      	bmi.n	8007818 <_printf_i+0x188>
 8007812:	065f      	lsls	r7, r3, #25
 8007814:	bf48      	it	mi
 8007816:	b2ad      	uxthmi	r5, r5
 8007818:	6031      	str	r1, [r6, #0]
 800781a:	07d9      	lsls	r1, r3, #31
 800781c:	bf44      	itt	mi
 800781e:	f043 0320 	orrmi.w	r3, r3, #32
 8007822:	6023      	strmi	r3, [r4, #0]
 8007824:	b11d      	cbz	r5, 800782e <_printf_i+0x19e>
 8007826:	2310      	movs	r3, #16
 8007828:	e7ac      	b.n	8007784 <_printf_i+0xf4>
 800782a:	4827      	ldr	r0, [pc, #156]	@ (80078c8 <_printf_i+0x238>)
 800782c:	e7e9      	b.n	8007802 <_printf_i+0x172>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	f023 0320 	bic.w	r3, r3, #32
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	e7f6      	b.n	8007826 <_printf_i+0x196>
 8007838:	4616      	mov	r6, r2
 800783a:	e7bd      	b.n	80077b8 <_printf_i+0x128>
 800783c:	6833      	ldr	r3, [r6, #0]
 800783e:	6825      	ldr	r5, [r4, #0]
 8007840:	6961      	ldr	r1, [r4, #20]
 8007842:	1d18      	adds	r0, r3, #4
 8007844:	6030      	str	r0, [r6, #0]
 8007846:	062e      	lsls	r6, r5, #24
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	d501      	bpl.n	8007850 <_printf_i+0x1c0>
 800784c:	6019      	str	r1, [r3, #0]
 800784e:	e002      	b.n	8007856 <_printf_i+0x1c6>
 8007850:	0668      	lsls	r0, r5, #25
 8007852:	d5fb      	bpl.n	800784c <_printf_i+0x1bc>
 8007854:	8019      	strh	r1, [r3, #0]
 8007856:	2300      	movs	r3, #0
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	4616      	mov	r6, r2
 800785c:	e7bc      	b.n	80077d8 <_printf_i+0x148>
 800785e:	6833      	ldr	r3, [r6, #0]
 8007860:	1d1a      	adds	r2, r3, #4
 8007862:	6032      	str	r2, [r6, #0]
 8007864:	681e      	ldr	r6, [r3, #0]
 8007866:	6862      	ldr	r2, [r4, #4]
 8007868:	2100      	movs	r1, #0
 800786a:	4630      	mov	r0, r6
 800786c:	f7f8 fcb8 	bl	80001e0 <memchr>
 8007870:	b108      	cbz	r0, 8007876 <_printf_i+0x1e6>
 8007872:	1b80      	subs	r0, r0, r6
 8007874:	6060      	str	r0, [r4, #4]
 8007876:	6863      	ldr	r3, [r4, #4]
 8007878:	6123      	str	r3, [r4, #16]
 800787a:	2300      	movs	r3, #0
 800787c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007880:	e7aa      	b.n	80077d8 <_printf_i+0x148>
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	4632      	mov	r2, r6
 8007886:	4649      	mov	r1, r9
 8007888:	4640      	mov	r0, r8
 800788a:	47d0      	blx	sl
 800788c:	3001      	adds	r0, #1
 800788e:	d0ad      	beq.n	80077ec <_printf_i+0x15c>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	079b      	lsls	r3, r3, #30
 8007894:	d413      	bmi.n	80078be <_printf_i+0x22e>
 8007896:	68e0      	ldr	r0, [r4, #12]
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	4298      	cmp	r0, r3
 800789c:	bfb8      	it	lt
 800789e:	4618      	movlt	r0, r3
 80078a0:	e7a6      	b.n	80077f0 <_printf_i+0x160>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4632      	mov	r2, r6
 80078a6:	4649      	mov	r1, r9
 80078a8:	4640      	mov	r0, r8
 80078aa:	47d0      	blx	sl
 80078ac:	3001      	adds	r0, #1
 80078ae:	d09d      	beq.n	80077ec <_printf_i+0x15c>
 80078b0:	3501      	adds	r5, #1
 80078b2:	68e3      	ldr	r3, [r4, #12]
 80078b4:	9903      	ldr	r1, [sp, #12]
 80078b6:	1a5b      	subs	r3, r3, r1
 80078b8:	42ab      	cmp	r3, r5
 80078ba:	dcf2      	bgt.n	80078a2 <_printf_i+0x212>
 80078bc:	e7eb      	b.n	8007896 <_printf_i+0x206>
 80078be:	2500      	movs	r5, #0
 80078c0:	f104 0619 	add.w	r6, r4, #25
 80078c4:	e7f5      	b.n	80078b2 <_printf_i+0x222>
 80078c6:	bf00      	nop
 80078c8:	08007af1 	.word	0x08007af1
 80078cc:	08007b02 	.word	0x08007b02

080078d0 <memmove>:
 80078d0:	4288      	cmp	r0, r1
 80078d2:	b510      	push	{r4, lr}
 80078d4:	eb01 0402 	add.w	r4, r1, r2
 80078d8:	d902      	bls.n	80078e0 <memmove+0x10>
 80078da:	4284      	cmp	r4, r0
 80078dc:	4623      	mov	r3, r4
 80078de:	d807      	bhi.n	80078f0 <memmove+0x20>
 80078e0:	1e43      	subs	r3, r0, #1
 80078e2:	42a1      	cmp	r1, r4
 80078e4:	d008      	beq.n	80078f8 <memmove+0x28>
 80078e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ee:	e7f8      	b.n	80078e2 <memmove+0x12>
 80078f0:	4402      	add	r2, r0
 80078f2:	4601      	mov	r1, r0
 80078f4:	428a      	cmp	r2, r1
 80078f6:	d100      	bne.n	80078fa <memmove+0x2a>
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007902:	e7f7      	b.n	80078f4 <memmove+0x24>

08007904 <_sbrk_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	4d06      	ldr	r5, [pc, #24]	@ (8007920 <_sbrk_r+0x1c>)
 8007908:	2300      	movs	r3, #0
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7f9 ffda 	bl	80018c8 <_sbrk>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_sbrk_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_sbrk_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	20011a60 	.word	0x20011a60

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <_realloc_r>:
 8007940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007944:	4680      	mov	r8, r0
 8007946:	4615      	mov	r5, r2
 8007948:	460c      	mov	r4, r1
 800794a:	b921      	cbnz	r1, 8007956 <_realloc_r+0x16>
 800794c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007950:	4611      	mov	r1, r2
 8007952:	f7ff bc4b 	b.w	80071ec <_malloc_r>
 8007956:	b92a      	cbnz	r2, 8007964 <_realloc_r+0x24>
 8007958:	f7ff fbdc 	bl	8007114 <_free_r>
 800795c:	2400      	movs	r4, #0
 800795e:	4620      	mov	r0, r4
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007964:	f000 f81a 	bl	800799c <_malloc_usable_size_r>
 8007968:	4285      	cmp	r5, r0
 800796a:	4606      	mov	r6, r0
 800796c:	d802      	bhi.n	8007974 <_realloc_r+0x34>
 800796e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007972:	d8f4      	bhi.n	800795e <_realloc_r+0x1e>
 8007974:	4629      	mov	r1, r5
 8007976:	4640      	mov	r0, r8
 8007978:	f7ff fc38 	bl	80071ec <_malloc_r>
 800797c:	4607      	mov	r7, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	d0ec      	beq.n	800795c <_realloc_r+0x1c>
 8007982:	42b5      	cmp	r5, r6
 8007984:	462a      	mov	r2, r5
 8007986:	4621      	mov	r1, r4
 8007988:	bf28      	it	cs
 800798a:	4632      	movcs	r2, r6
 800798c:	f7ff ffca 	bl	8007924 <memcpy>
 8007990:	4621      	mov	r1, r4
 8007992:	4640      	mov	r0, r8
 8007994:	f7ff fbbe 	bl	8007114 <_free_r>
 8007998:	463c      	mov	r4, r7
 800799a:	e7e0      	b.n	800795e <_realloc_r+0x1e>

0800799c <_malloc_usable_size_r>:
 800799c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a0:	1f18      	subs	r0, r3, #4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bfbc      	itt	lt
 80079a6:	580b      	ldrlt	r3, [r1, r0]
 80079a8:	18c0      	addlt	r0, r0, r3
 80079aa:	4770      	bx	lr

080079ac <_init>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr

080079b8 <_fini>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr
